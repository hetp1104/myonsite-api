var utils = require('./utils');
var server = require('../../server');
require('./constant');
// var sql = require('../../config/mysqlconnect');
// var sql1 = require('../../config/mysqlconnect1');
// var sql2 = require('../../config/mysqlconn');
var sql = "";
var sql1 = "";
var sql2 = "";

var myAnalytics = require('./provider_analytics');
var myPayments = require('./payments');
var allemails = require('./emails');
var Trip = require('mongoose').model('Trip');
var Type = require('mongoose').model('Type');
var Trip_Service = require('mongoose').model('trip_service');
var User = require('mongoose').model('User');
var Provider = require('mongoose').model('Provider');
var TripLocation = require('mongoose').model('trip_location');
var TripOrder = require('mongoose').model('trip_order');
var Citytype = require('mongoose').model('city_type');
var Reviews = require('mongoose').model('Reviews');
var Promo_Code = require('mongoose').model('Promo_Code');
var User_promo_use = require('mongoose').model('User_promo_use');
var Card = require('mongoose').model('Card');
var EmergencyContactDetail = require('mongoose').model('emergency_contact_detail');
var swap = require('node-currency-swap');
var pad = require('pad-left');
var Settings = require('mongoose').model('Settings');
var Country = require('mongoose').model('Country');
var City = require('mongoose').model('City');
var moment = require('moment');
var geolib = require('geolib');
var distance = require('google-distance-matrix');
var distance2 = require('google-distance');
var Citytype = require('mongoose').model('city_type');
var CityZone = require('mongoose').model('CityZone');
var ZoneValue = require('mongoose').model('ZoneValue');
var Airport = require('mongoose').model('Airport');
var AirportCity = require('mongoose').model('Airport_to_City');
var CitytoCity = require('mongoose').model('City_to_City');
var Partner = require('mongoose').model('Partner');
var console = require('./console');
var utils = require('./utils');
const { json } = require('body-parser');
const trip = require('../routes/trip');
const { forEach } = require('async');
var Corporate = require('mongoose').model('Corporate');
var config = require('../../config/config');
var userController = require('../controllers/users');


exports.trip_detail_notify = function (res, trip_id) {
    // console.log('trip_detail_notify')
    // var new_trip_id="'"+trip_id+"'";
    // if(typeof(socket_object) && socket_object){
    //     console.log('trip_id: '+new_trip_id);
    //     socket_object.to(new_trip_id).emit('trip_detail_notify',{is_trip_updated: true, trip_id: trip_id});
    //     socket_object.in(new_trip_id).emit('trip_detail_notify',{is_trip_updated: true, trip_id: trip_id});
    //     socket_object.emit(new_trip_id, {is_trip_updated: true, trip_id: trip_id});
    // }
}

////  CREATE TRIP SERVICE //// ////////
exports.create_trip = function (user_data, trip_type, service_type_id, req_data, response) {

    var tripData = req_data;
    if (user_data.is_approved == 0) {
        response({ success: false, error_code: error_message.ERROR_CODE_USER_NOT_APPROVED });
    } else {
        if (user_data.wallet < 0) {
            response({ success: false, trip_id: null, error_code: error_message.ERROR_CODE_YOUR_TRIP_PAYMENT_IS_PENDING });
        } else {
            if (tripData.trip_type !== undefined) {
                trip_type = tripData.trip_type;
            }
            var user_id = tripData.user_id;
            if (trip_type == constant_json.TRIP_TYPE_CORPORATE) {
                user_id = user_data.user_type_id;
                tripData.user_type_id = user_data.user_type_id;
            }
            Card.find({ user_id: user_id }).then((card) => {
                if (tripData.payment_mode == Number(constant_json.PAYMENT_MODE_CARD)) {
                    if (card.length == 0) {
                        return response({ success: false, error_code: error_message.ERROR_CODE_ADD_CREDIT_CARD_FIRST });
                    }
                }
                Citytype.findOne({ _id: service_type_id }).then((citytype) => {
                    if (citytype) {
                        var city_id = citytype.cityid;
                        var country_id = citytype.countryid;
                        City.findOne({ _id: city_id }).then((city_detail) => {
                            if (city_detail) {

                                var is_fixed_fare = false;
                                var fixed_price = 0;
                                var received_trip_from_gender = [];
                                var provider_language = [];
                                var accessibility = [];

                                // Start 6 March //
                                if (tripData.is_fixed_fare != undefined) {
                                    is_fixed_fare = tripData.is_fixed_fare;
                                    if (is_fixed_fare) {
                                        fixed_price = tripData.fixed_price;
                                    }
                                }

                                if (tripData.received_trip_from_gender != undefined) {
                                    received_trip_from_gender = tripData.received_trip_from_gender;
                                }

                                if (tripData.provider_language != undefined) {
                                    provider_language = tripData.provider_language;
                                }

                                if (tripData.accessibility != undefined) {
                                    accessibility = tripData.accessibility;
                                }
                                // End 6 March //



                                var dateNow = new Date();
                                var schedule_start_time = null;
                                var server_start_time_for_schedule = null;
                                var is_schedule_trip = false;

                                if (tripData.start_time) {
                                    is_schedule_trip = true;
                                    schedule_start_time = Number(tripData.start_time);
                                    var addMiliSec = dateNow.getTime() + schedule_start_time;
                                    // server_start_time_for_schedule = new Date(addMiliSec);
                                    server_start_time_for_schedule = tripData.start_time;
                                }

                                var trip = new Trip({
                                    user_last_name: user_data.last_name,
                                    user_first_name: user_data.first_name,
                                    service_type_id: service_type_id,
                                    user_id: user_data._id,
                                    is_trip_inside_zone_queue: tripData.is_trip_inside_zone_queue,
                                    token: tripData.token,
                                    current_provider: null,
                                    provider_id: null,
                                    confirmed_provider: null,
                                    trip_type: trip_type,
                                    car_rental_id: tripData.car_rental_id,
                                    is_surge_hours: tripData.is_surge_hours,
                                    surge_multiplier: tripData.surge_multiplier,
                                    hotel_name: tripData.hotel_name,
                                    room_number: tripData.room_number,
                                    floor: tripData.floor,
                                    source_address: tripData.source_address,
                                    destination_address: tripData.destination_address,
                                    sourceLocation: [tripData.latitude, tripData.longitude],
                                    destinationLocation: [],
                                    timezone: city_detail.timezone,
                                    payment_mode: tripData.payment_mode,
                                    user_create_time: tripData.user_create_time,
                                    payment_id: tripData.payment_id,
                                    unit: city_detail.unit,
                                    // Start 6 March //
                                    country_id: country_id,
                                    city_id: city_detail._id,
                                    fixed_price: fixed_price,
                                    is_fixed_fare: is_fixed_fare,
                                    is_provider_earning_set_in_wallet: false,
                                    received_trip_from_gender: received_trip_from_gender,
                                    provider_language: provider_language,
                                    accessibility: accessibility,
                                    // End 6 March //
                                    // start 9 jul //
                                    is_schedule_trip: is_schedule_trip,
                                    schedule_start_time: schedule_start_time,
                                    server_start_time_for_schedule: server_start_time_for_schedule,
                                    // end 9 jul //
                                });

                                // if (trip.sourceLocation == null) {
                                //     trip.sourceLocation = tripData.sourceLocation;
                                //     // trip.destinationLocation = tripData.destinationLocation;
                                // }
                                if (tripData.d_longitude && tripData.d_latitude) {
                                    trip.destinationLocation = [tripData.d_latitude, tripData.d_longitude];
                                }
                                if (tripData.user_type_id) {
                                    trip.user_type = tripData.user_type;
                                    trip.user_type_id = tripData.user_type_id;
                                } else {
                                    trip.user_type = constant_json.USER_TYPE_NORMAL;
                                    trip.user_type_id = null;
                                }

                                if (tripData.device == undefined && trip_type != constant_json.TRIP_TYPE_PROVIDER) {
                                    trip.is_tip = setting_detail.is_tip;
                                }
                                trip.is_toll = setting_detail.is_toll;

                                Country.findOne({ _id: country_id }).then((country_data) => {

                                    var currency = "";
                                    var currencycode = "";
                                    if (country_data) {
                                        currency = country_data.currencysign;
                                        currencycode = country_data.currencycode;
                                    }
                                    trip.currency = currency;
                                    trip.currencycode = currencycode;

                                    user_data.total_request = user_data.total_request + 1;
                                    user_data.save();

                                    var service_type_id = tripData.service_type_id;
                                    if (tripData.car_rental_id) {
                                        service_type_id = tripData.car_rental_id;
                                    }
                                    // trip.save().then(() => {
                                    Trip_Service.find({
                                        service_type_id: service_type_id
                                    }, function (err, tripservice) {
                                        if (tripservice && tripservice.length > 0) {
                                            trip.trip_service_city_type_id = tripservice[0]._id;
                                            if (is_fixed_fare) {
                                                trip.provider_service_fees = Number((fixed_price * tripservice[0].provider_profit * 0.01).toFixed(3));
                                            }
                                        }
                                        trip.save().then(() => {

                                            var triplocation = new TripLocation({
                                                tripID: trip._id,
                                                trip_unique_id: trip.unique_id,
                                                providerStartTime: dateNow,
                                                providerStartLocation: [0, 0],
                                                startTripTime: dateNow,
                                                startTripLocation: [0, 0],
                                                endTripTime: dateNow,
                                                endTripLocation: [0, 0],
                                                providerStartToStartTripLocations: [],
                                                startTripToEndTripLocations: [],
                                                googlePathStartLocationToPickUpLocation: "",
                                                googlePickUpLocationToDestinationLocation: ""
                                            });
                                            triplocation.save(function (error) {
                                            }, (error) => {
                                            });

                                            response({
                                                success: true,
                                                trip: trip,
                                                message: success_messages.MESSAGE_CODE_YOUR_FUTURE_TRIP_CREATE_SUCCESSFULLY
                                            });
                                        }, (err) => {
                                            response({
                                                success: false,
                                                error_code: error_message.ERROR_CODE_SOMETHING_WENT_WRONG
                                            });
                                        });
                                    }).sort({ _id: -1 }).limit(1);

                                    // }, (err) => {
                                    //     console.log(err);
                                    //     res.json({
                                    //         success: false,
                                    //         error_code: error_message.ERROR_CODE_SOMETHING_WENT_WRONG
                                    //     });
                                    // });
                                });

                            } else {
                                response({ success: false, error_code: error_message.ERROR_CODE_CITY_TYPE_NOT_FOUND });

                            }
                        }, (err) => {
                            console.log(err);
                            response({
                                success: false,
                                error_code: error_message.ERROR_CODE_SOMETHING_WENT_WRONG
                            });
                        });
                    } else {
                        response({ success: false, error_code: error_message.ERROR_CODE_CITY_TYPE_NOT_FOUND });
                    }
                }, (err) => {
                    console.log(err);
                    response({
                        success: false,
                        error_code: error_message.ERROR_CODE_SOMETHING_WENT_WRONG
                    });
                });
            }, (err) => {
                console.log(err);
                response({
                    success: false,
                    error_code: error_message.ERROR_CODE_SOMETHING_WENT_WRONG
                });
            });
        }
    }

};




exports.nearest_provider_list = function (citytype, req_data, response) {

    var cityid = null;
    if (citytype) {
        cityid = citytype.cityid;
    }
    City.findOne({ _id: cityid }).then((city_detail) => {

        var provider_query = {};
        if (city_detail) {
            var is_check_provider_wallet_amount_for_received_cash_request = city_detail.is_check_provider_wallet_amount_for_received_cash_request;
            var provider_min_wallet_amount_set_for_received_cash_request = city_detail.provider_min_wallet_amount_set_for_received_cash_request;

            if (is_check_provider_wallet_amount_for_received_cash_request && payment_mode == Number(constant_json.PAYMENT_MODE_CASH)) {
                wallet_query = { $gte: provider_min_wallet_amount_set_for_received_cash_request };
                provider_query["wallet"] = wallet_query;
            }
           // provider_query["service_type"] = citytype._id;
        }

        var distance = setting_detail.default_Search_radious / constant_json.DEGREE_TO_KM;
        var received_trip_from_gender = [];
        var provider_language = [];
        var accessibility = [];

        var payment_mode = -1;
        if (req_data.payment_mode != undefined) {
            payment_mode = req_data.payment_mode;
        }

        // provider_query["is_trip"] = []; //Ankita
        provider_query["is_active"] = 1;
        provider_query["is_available"] = 1;
        provider_query["is_vehicle_document_uploaded"] = true;



        provider_query["providerLocation"] = {
            $near: [req_data.latitude, req_data.longitude],
            $maxDistance: distance
        };

        provider_admin_type_query = {
            $and: [{
                "provider_type": Number(constant_json.PROVIDER_TYPE_NORMAL)
            }, {
                "is_approved": 1
            }
            ]
        };
        provider_partner_type_query = {
            $and: [{
                "provider_type": Number(constant_json.PROVIDER_TYPE_PARTNER)
            }, {
                "is_approved": 1
            }, {
                "is_partner_approved_by_admin": 1
            }
            ]
        };


        provider_type_query = { $or: [provider_admin_type_query, provider_partner_type_query] };

        accessibility = req_data.accessibility;
        received_trip_from_gender = req_data.received_trip_from_gender;
        provider_language = req_data.provider_language;

        var provider_query_and = [];
        provider_query_and.push(provider_type_query);

        if (accessibility != undefined && accessibility.length > 0) {
            accessibility_query = {
                $and: [{
                    "vehicle_detail.accessibility": {
                        $exists: true,
                        $ne: [],
                        $all: accessibility
                    }
                }]
            };
            provider_query_and.push(accessibility_query);
        }

        if (provider_language != undefined && provider_language.length > 0) {
            languages_exists_query = { $and: [{ "languages": { $in: provider_language } }] };
            provider_query_and.push(languages_exists_query);
        }

        if (received_trip_from_gender != undefined && received_trip_from_gender.length > 0 && received_trip_from_gender.length != 2) {
            received_trip_from_gender_exists_query = {
                $and: [{
                    "gender": {
                        $exists: true,
                        $all: received_trip_from_gender
                    }
                }]
            }
            provider_query_and.push(received_trip_from_gender_exists_query);
        }


        provider_query["$and"] = provider_query_and;
        var query = Provider.find(provider_query);
        query.exec(function (err, providers) {
            if (!providers || providers.length == 0) {
                response({
                    success: false,
                    error_code: error_message.ERROR_CODE_NO_PROVIDER_FOUND_SELECTED_SERVICE_TYPE_AROUND_YOU
                });
            } else {
                response({
                    success: true,
                    message: success_messages.MESSAGE_CODE_YOU_GET_NEARBY_DRIVER_LIST, providers: providers
                });

            }

        });

    }, (err) => {
        console.log(err);
        res.json({
            success: false,
            error_code: error_message.ERROR_CODE_SOMETHING_WENT_WRONG
        });
    });

};


// FIND NEAREST PROVIDER
exports.nearest_provider = function (trip, provider_id, user_favourite_providers, response) {

    City.findOne({ _id: trip.city_id }).then((city_detail) => {

        if (city_detail) {

            var city_timezone = city_detail.timezone;
            var is_check_provider_wallet_amount_for_received_cash_request = city_detail.is_check_provider_wallet_amount_for_received_cash_request;
            var provider_min_wallet_amount_set_for_received_cash_request = city_detail.provider_min_wallet_amount_set_for_received_cash_request;


            var distance = setting_detail.default_Search_radious / constant_json.DEGREE_TO_KM;

            var provider_query = {};
            var providers_id_that_rejected_trip = trip.providers_id_that_rejected_trip;



            provider_query["_id"] = { $nin: providers_id_that_rejected_trip };
            //provider_query["service_type"] = trip.service_type_id;  
           // // provider_query["is_trip"] = [];//Ankita
            provider_query["is_active"] = 1;
            provider_query["is_available"] = 1;

            if (is_check_provider_wallet_amount_for_received_cash_request && trip.payment_mode == Number(constant_json.PAYMENT_MODE_CASH)) {
                wallet_query = { $gte: provider_min_wallet_amount_set_for_received_cash_request };
                provider_query["wallet"] = wallet_query;
            }
            provider_query["is_vehicle_document_uploaded"] = true;
// console.log(trip.sourceLocation);
            provider_query["providerLocation"] = { $near: trip.sourceLocation, $maxDistance: distance };

            provider_admin_type_query = {
                $and: [{
                    "provider_type": Number(constant_json.PROVIDER_TYPE_NORMAL)
                }, {
                    "is_approved": 1
                }
                ]
            };
            provider_partner_type_query = {
                $and: [{
                    "provider_type": Number(constant_json.PROVIDER_TYPE_PARTNER)
                }, {
                    "is_approved": 1
                }, {
                    "is_partner_approved_by_admin": 1
                }
                ]
            };
            provider_type_query = { $or: [provider_admin_type_query, provider_partner_type_query] };
            languages_exists_query = { $and: [{ "languages": { $in: trip.provider_language } }] };




            received_trip_from_gender_exists_query = {
                $and: [{
                    "gender": {
                        $exists: true,
                        $all: trip.received_trip_from_gender
                    }
                }]
            }

            var provider_query_and = [];
            provider_query_and.push(provider_type_query);
            if (provider_id != null) {
                provider_query_and.push({ $and: [{ "_id": { $eq: provider_id } }] });
            }

            var accessibility = trip.accessibility;
            if (accessibility != undefined && accessibility.length > 0) {
                accessibility_query = {
                    vehicle_detail: { $elemMatch: { is_selected: true, accessibility: { $exists: true, $ne: [], $all: accessibility } } }
                }
                provider_query_and.push(accessibility_query);
            }

            if (trip.provider_language.length > 0) {
                provider_query_and.push(languages_exists_query);
            }
            if (trip.received_trip_from_gender.length > 0 && trip.received_trip_from_gender.length != 2) {
                provider_query_and.push(received_trip_from_gender_exists_query);
            }

            var limit = 1;
            if (setting_detail.find_nearest_driver_type == Number(constant_json.NEAREST_PROVIDER_TYPE_MULTIPLE)) {
                limit = setting_detail.request_send_to_no_of_providers;
            }
            provider_query["$and"] = provider_query_and;

            var favourite_providers = [];
            if (user_favourite_providers) {
                favourite_providers = user_favourite_providers;
            }

            var query;
            var sort_field;
            if (trip.is_trip_inside_zone_queue) {
                sort_field = { zone_queue_no: 1 }
                query = Provider.find(provider_query).sort(sort_field)
            } else {
                query = Provider.find(provider_query)
            }

            query.exec(function (err, providers) {

                if(providers){
                   if(providers.length > 0) {
                       

                        var final_providers = [];
                        favourite_providers.forEach(function (fav_provider) {
                            var fav_index = providers.findIndex((x) => (x._id).toString() == fav_provider.toString())
                            if (fav_index !== -1) {
                                final_providers.push(providers[fav_index]);
                            }
                        });
                        providers.forEach(function (provider_detail) {
                            if (Number(final_providers.length) < Number(limit)) {
                                final_providers.push(provider_detail);
                            }
                        })
                        // var provider = providers[0];
                        // var provider_id = provider._id;
                        // var first_name = provider.first_name;
                        // var last_name = provider.last_name;

                        if (setting_detail.find_nearest_driver_type == Number(constant_json.NEAREST_PROVIDER_TYPE_SINGLE)) {
                            trip.current_provider = final_providers[0]._id;
                            trip.provider_type = final_providers[0].provider_type;
                            trip.provider_type_id = final_providers[0].provider_type_id;
                        }
                        trip.no_of_time_send_request++;
                        // trip.provider_first_name = first_name;
                        // trip.provider_last_name = last_name;
                        // trip.provider_type = provider.provider_type;
                        // trip.provider_type_id = provider.provider_type_id;
                        trip.unit = city_detail.unit;

                        // var phone = provider.country_phone_code + provider.phone;
                        // var index = provider.vehicle_detail.findIndex(x => x.is_selected == true);
                        // var car_model = provider.vehicle_detail[index].model;
                        // var car_number = provider.vehicle_detail[index].plate_no;
                        trip.is_provider_accepted = 0;

                        var current_providers = [];

                        if (setting_detail.find_nearest_driver_type == Number(constant_json.NEAREST_PROVIDER_TYPE_SINGLE)) {
                            current_providers.push(final_providers[0]._id);
                        } else {
                            final_providers.forEach(function (provider) {
                                console.log(provider._id);
                                current_providers.push(provider._id);
                            });
                        }

                        trip.find_nearest_provider_time = new Date();
                        trip.current_providers = current_providers;
                        trip.save().then(() => {

                            var trips = [];
                            trips.push(trip._id);
                            if (setting_detail.find_nearest_driver_type == Number(constant_json.NEAREST_PROVIDER_TYPE_SINGLE)) {
                                myAnalytics.insert_daily_provider_analytics(city_timezone, final_providers[0]._id, TRIP_STATUS.WAITING_FOR_PROVIDER, null);
                                utils.sendPushNotification(constant_json.PROVIDER_UNIQUE_NUMBER, final_providers[0].device_type, final_providers[0].device_token, push_messages.PUSH_CODE_FOR_NEW_TRIP, constant_json.PUSH_NOTIFICATION_SOUND_FILE_IN_IOS);
                                Provider.findOne({ _id: final_providers[0]._id }).then((updateprovider) => {
                                    var provicer_trips = updateprovider.is_trip;
                                    provicer_trips.push(trip._id);
                                    const unique = (value, index, self) => {
                                        return self.indexOf(value) === index
                                    }
                                    const uniquetrips = provicer_trips.filter(unique);
                                    updateprovider.is_trip = uniquetrips;
                                    updateprovider.total_request = updateprovider.total_request + 1;
                                    updateprovider.accepted_request = updateprovider.accepted_request + 1;
                                    updateprovider.save();
                                });
                                

                            } else {
                                final_providers.forEach(function (provider) {
                                    myAnalytics.insert_daily_provider_analytics(city_timezone, provider._id, TRIP_STATUS.WAITING_FOR_PROVIDER, null);
                                    utils.sendPushNotification(constant_json.PROVIDER_UNIQUE_NUMBER, provider.device_type, provider.device_token, push_messages.PUSH_CODE_FOR_NEW_TRIP, constant_json.PUSH_NOTIFICATION_SOUND_FILE_IN_IOS);
                                    Provider.findOne({ _id: provider._id }).then((updateprovider) => {
                                        var provicer_trips = updateprovider.is_trip;
                                        provicer_trips.push(trip._id);
                                        const unique = (value, index, self) => {
                                            return self.indexOf(value) === index
                                        }
                                        const uniquetrips = provicer_trips.filter(unique);
                                        updateprovider.is_trip = uniquetrips;
                                        updateprovider.total_request = updateprovider.total_request + 1;
                                        updateprovider.accepted_request = updateprovider.accepted_request + 1;
                                        updateprovider.save();
                                    });
                                
                                });
                            }

                            // Provider.update({ _id: { $in: current_providers } }, { is_available: 0, is_trip: trips, $inc: { total_request: 1 } }, { multi: true }, function (error, providers_list) {

                            // });
    

                            response({
                                success: true,
                                message: success_messages.MESSAGE_CODE_YOUR_TRIP_CREATED_SUCCESSFULLY,
                                trip_id: trip._id
                            });
                        }, (err) => {
                            console.log("err 683 ::: ");
                            trip.current_providers = [];
                            trip.provider_first_name = "";
                            trip.provider_last_name = "";

                            if (trip.trip_type.toString() !== constant_json.TRIP_TYPE_DISPATCHER.toString() && !trip.is_schedule_trip) {
                                trip.provider_trip_end_time = new Date();
                            // trip.is_trip_cancelled = 1;
                                trip.is_provider_accepted = 0;
                                var complete_date_in_city_timezone = utils.get_date_now_at_city(new Date(), trip.timezone);
                                var complete_date_tag = moment(moment(complete_date_in_city_timezone).startOf('day')).format(constant_json.DATE_FORMAT_MMM_D_YYYY);
                                trip.complete_date_in_city_timezone = complete_date_in_city_timezone;
                                trip.complete_date_tag = complete_date_tag;
                            } else {
                                trip.is_provider_accepted = 3;
                            }
                            trip.save();

                            response({ success: false, error_code: error_message.ERROR_CODE_CREATE_TRIP_FAILED+" Neareast Provider not found." });

                        });
                   }
                   else{

                        // trip.current_provider = null;
                         trip.provider_first_name = "";
                         trip.provider_last_name = "";
                         trip.providers_id_that_rejected_trip = [];
     
                         if (trip.trip_type.toString() !== constant_json.TRIP_TYPE_DISPATCHER.toString() && !trip.is_schedule_trip) {
                             //if (trip.trip_type.toString() !== constant_json.TRIP_TYPE_DISPATCHER.toString()) {
                             trip.provider_trip_end_time = new Date();
                             var complete_date_in_city_timezone = utils.get_date_now_at_city(new Date(), trip.timezone);
                             var complete_date_tag = moment(moment(complete_date_in_city_timezone).startOf('day')).format(constant_json.DATE_FORMAT_MMM_D_YYYY);
                             trip.complete_date_in_city_timezone = complete_date_in_city_timezone;
                             trip.complete_date_tag = complete_date_tag;
                             //trip.is_trip_cancelled = 1;
                              
                             trip.is_provider_accepted = 0;
                         } else {
                             trip.is_provider_accepted = 3;
                         }
                         trip.save();
     
                         User.findOne({ _id: trip.user_id }).then((user) => {
                             if (user) {
                                 user.current_trip_id = null;
                                 user.save();
                                 var phoneWithCode = user.country_phone_code + user.phone;
                                 if (setting_detail.sms_notification) {
                                     // utils.sendOtherSMS(phoneWithCode, 5, "");
                                 }
                                 utils.sendPushNotification(constant_json.USER_UNIQUE_NUMBER, user.device_type, user.device_token, push_messages.PUSH_CODE_FOR_NO_PROVIDER_FOUND, constant_json.PUSH_NOTIFICATION_SOUND_FILE_IN_IOS);
                             }
                         }, (err) => {
                             console.log(err);
                         });
     
                         response({
                             success: false,
                             error_code: error_message.ERROR_CODE_NO_PROVIDER_FOUND_AROUND_YOU+" No Active Provider found "
                         });
                     
                   }
                }
                else{
                        // trip.current_provider = null;
                         trip.provider_first_name = "";
                         trip.provider_last_name = "";
                         trip.providers_id_that_rejected_trip = [];
     
                         if (trip.trip_type.toString() !== constant_json.TRIP_TYPE_DISPATCHER.toString() && !trip.is_schedule_trip) {
                             //if (trip.trip_type.toString() !== constant_json.TRIP_TYPE_DISPATCHER.toString()) {
                             trip.provider_trip_end_time = new Date();
                             var complete_date_in_city_timezone = utils.get_date_now_at_city(new Date(), trip.timezone);
                             var complete_date_tag = moment(moment(complete_date_in_city_timezone).startOf('day')).format(constant_json.DATE_FORMAT_MMM_D_YYYY);
                             trip.complete_date_in_city_timezone = complete_date_in_city_timezone;
                             trip.complete_date_tag = complete_date_tag;
                             //trip.is_trip_cancelled = 1;
                              
                             trip.is_provider_accepted = 0;
                         } else {
                             trip.is_provider_accepted = 3;
                         }
                         trip.save();
     
                         User.findOne({ _id: trip.user_id }).then((user) => {
                             if (user) {
                                 user.current_trip_id = null;
                                 user.save();
                                 var phoneWithCode = user.country_phone_code + user.phone;
                                 if (setting_detail.sms_notification) {
                                     // utils.sendOtherSMS(phoneWithCode, 5, "");
                                 }
                                 utils.sendPushNotification(constant_json.USER_UNIQUE_NUMBER, user.device_type, user.device_token, push_messages.PUSH_CODE_FOR_NO_PROVIDER_FOUND, constant_json.PUSH_NOTIFICATION_SOUND_FILE_IN_IOS);
                             }
                         }, (err) => {
                             console.log(err);
                         });
     
                         response({
                             success: false,
                             error_code: error_message.ERROR_CODE_NO_PROVIDER_FOUND_AROUND_YOU+" No Active Provider found "
                         });
                     
                }
                 

            });
        } else {
            response({ success: false, error_code: error_message.ERROR_CODE_CITY_TYPE_NOT_FOUND+" Neareast Provider City not found."  });
        }
    }, (err) => {
        console.log("err 710 ::: ");
        console.log(err);
        response({
            success: false,
            error_code: error_message.ERROR_CODE_SOMETHING_WENT_WRONG+" Could not find City."
        });
    });

};

////  START USER CREATE TRIP SERVICE //// ////////
exports.create = function (req, res) {
    utils.check_request_params(req.body, [{ name: 'user_id', type: 'string' }, { name: 'service_type_id', type: 'string' },
    { name: 'timezone', type: 'string' },], function (response) {
        if (response.success) {
            User.findOne({ _id: req.body.user_id }).then((user_data) => {
                if (!user_data) {
                    res.json({ success: false, error_code: error_message.ERROR_CODE_USER_DETAIL_NOT_FOUND });
                } else {

                    if (user_data.current_trip_id) {
                        res.json({ success: false, error_code: error_message.ERROR_CODE_TRIP_ALREADY_RUNNING });
                    } else {
                        var provider_id = null
                        if (req.body.provider_id) {
                            provider_id = req.body.provider_id;
                        }
                        Citytype.findOne({ _id: req.body.service_type_id }).then((citytype) => {
                            exports.check_trip_inside_zone_queue(citytype.city_id, req.body.latitude, req.body.longitude, function (data) {
                                req.body.is_trip_inside_zone_queue = data.is_trip_inside_zone_queue;
                                var trip_type = constant_json.TRIP_TYPE_NORMAL;
                                // if(req.body.car_rental_id){
                                //     trip_type = constant_json.TRIP_TYPE_CAR_RENTAL;
                                // }

                                exports.create_trip(user_data, trip_type, req.body.service_type_id, req.body, function (response) {

                                    if (response.success) {
                                        var trip = response.trip;

                                        if (req.body.promo_id) {
                                            Promo_Code.findOne({ _id: req.body.promo_id }, function (error, promocode) {
                                                if (promocode) {
                                                    trip.promo_id = promocode._id;
                                                    trip.save();
                                                    promocode.user_used_promo = promocode.user_used_promo + 1;
                                                    promocode.save();
                                                    var userpromouse = new User_promo_use({
                                                        promo_id: promocode._id,
                                                        promocode: promocode.promocode,
                                                        user_id: req.body.user_id,
                                                        promo_type: promocode.code_type,
                                                        promo_value: promocode.code_value,
                                                        trip_id: trip._id,
                                                        user_used_amount: 0
                                                    });
                                                    userpromouse.save();
                                                }
                                            })

                                        }

                                        if (trip.is_schedule_trip) {
                                            res.json({
                                                success: true,
                                                trip: trip,
                                                message: success_messages.MESSAGE_CODE_YOUR_FUTURE_TRIP_CREATE_SUCCESSFULLY
                                            });
                                        } else {
                                            exports.nearest_provider(trip, provider_id, user_data.favourite_providers, function (nearest_provider_response) {
                                                if (nearest_provider_response.success) {
                                                    user_data.current_trip_id = trip._id;
                                                    user_data.save();
                                                    res.json(nearest_provider_response);
                                                } else {
                                                    res.json({
                                                        success: false,
                                                        error_code: error_message.ERROR_CODE_CREATE_TRIP_FAILED
                                                    });
                                                }
                                            });
                                        }
                                    } else {
                                        res.json(response);
                                    }
                                });
                            });
                        });
                    }
                }
            }, (err) => {
                console.log(err);
                res.json({
                    success: false,
                    error_code: error_message.ERROR_CODE_SOMETHING_WENT_WRONG
                });
            });
        } else {
            res.json({
                success: false,
                error_code: response.error_code,
                error_description: response.error_description
            });
        }
    });
};

exports.provider_create = function (req, res) {

    utils.check_request_params(req.body, [{ name: 'provider_id', type: 'string' }, {
        name: 'phone',
        type: 'string'
    }, { name: 'service_type_id', type: 'string' }], function (response) {
        if (response.success) {
            Provider.findOne({ _id: req.body.provider_id }).then((provider_detail) => {

                if (provider_detail) {

                    User.findOne({ phone: req.body.phone }).then((user_data) => {

                        if (user_data) {
                            exports.create_trip(user_data, constant_json.TRIP_TYPE_PROVIDER, req.body.service_type_id, req.body, function (response) {
                                if (response.success) {
                                    var trip = response.trip;
                                    if (trip.is_schedule_trip) {
                                        res.json({
                                            success: true,
                                            trip: trip,
                                            message: success_messages.MESSAGE_CODE_YOUR_FUTURE_TRIP_CREATE_SUCCESSFULLY
                                        });
                                    } else {
                                        var now_date = new Date()
                                        trip.is_toll = setting_detail.is_toll;
                                        trip.provider_last_name = provider_detail.last_name;
                                        trip.provider_type = provider_detail.provider_type;
                                        trip.provider_type_id = provider_detail.provider_type_id;
                                        trip.current_provider = provider_detail._id;
                                        trip.current_providers = [provider_detail._id];
                                        trip.confirmed_provider = provider_detail._id;
                                        trip.provider_id = provider_detail._id;
                                        trip.is_provider_accepted = 1;
                                        trip.is_provider_status = 4;
                                        trip.accepted_time = now_date;
                                        trip.provider_arrived_time = now_date;
                                        trip.provider_trip_start_time = now_date;

                                        var unique_id = pad(trip.unique_id, 7, '0');
                                        var invoice_number = constant_json.INVOICE_APP_NAME_CODE + " " + constant_json.INVOICE_PROVIDER_TRIP_EARNING_CODE + " " + (moment(new Date())).format(constant_json.DATE_FORMAT_MMDDYYYY) + " " + unique_id;
                                        trip.invoice_number = invoice_number;

                                        var is_favourite_provider = false;
                                        if (user_data) {
                                            var index = user_data.favourite_providers.findIndex((x) => (x).toString() == (provider_detail._id).toString());
                                            if (index !== -1) {
                                                is_favourite_provider = true;
                                            }
                                        }
                                        trip.is_favourite_provider = is_favourite_provider;

                                        trip.save().then(() => {
                                            var trips = [];
                                            trips.push(trip._id);
                                            provider_detail.is_trip = trips;

                                            provider_detail.total_request = provider_detail.total_request + 1;
                                            myAnalytics.insert_daily_provider_analytics(trip.timezone, provider_detail._id, TRIP_STATUS.INITIATE_TRIP, null);


                                            provider_detail.accepted_request = provider_detail.accepted_request + 1;
                                            // myAnalytics.insert_daily_provider_analytics(trip.timezone, provider_detail._id, TRIP_STATUS.PROVIDER_ACCEPTED, null);


                                            provider_detail.save(function (err) {
                                                console.log(err);

                                            });

                                            user_data.current_trip_id = trip._id;
                                            user_data.save();
                                            res.json({
                                                success: true,
                                                message: success_messages.MESSAGE_CODE_YOUR_TRIP_CREATED_SUCCESSFULLY,
                                                trip_id: trip._id,
                                                user: user_data
                                            });

                                        });
                                    }
                                } else {
                                    res.json(response);
                                }
                            });

                        } else {
                            var country_phone_code = req.body.country_phone_code;
                            Country.findOne({ countryphonecode: country_phone_code }).then((country) => {

                                var first_name = req.body.first_name;
                                var last_name = req.body.last_name;
                                var encrypt_password = require('crypto').createHash('md5').update(req.body.phone).digest('hex');
                                var referral_code = (utils.tokenGenerator(8)).toUpperCase();
                                var wallet_currency_code = "";
                                var countryname = "";
                                if (country) {
                                    wallet_currency_code = country.currencycode;
                                    countryname = country.countryname;
                                } else {
                                    var lookup = require('country-data').lookup;
                                    countries_data = lookup.countries({ countryCallingCodes: country_phone_code });
                                    if (countries_data.length == 1) {
                                        wallet_currency_code = countries_data[0].currencies[0];
                                    } else {
                                        countries_data = lookup.countries({
                                            countryCallingCodes: country_phone_code,
                                            name: country
                                        });
                                        if (countries_data.length == 1) {
                                            wallet_currency_code = countries_data[0].currencies[0];
                                        } else {
                                            wallet_currency_code = "";
                                        }
                                    }
                                }
                                var user = new User({
                                    first_name: first_name,
                                    last_name: last_name,
                                    email: ((req.body.email).trim()).toLowerCase(),
                                    password: encrypt_password,
                                    user_type: Number(constant_json.USER_TYPE_PROVIDER),
                                    user_type_id: provider_detail._id,
                                    country_phone_code: req.body.country_phone_code,
                                    phone: req.body.phone,
                                    token: utils.tokenGenerator(32),
                                    country: countryname,
                                    referral_code: referral_code,
                                    wallet_currency_code: wallet_currency_code,
                                });

                                user.save().then(() => {

                                    if (setting_detail.email_notification) {
                                        allemails.sendUserRegisterEmail(req, user);
                                    }
                                    exports.create_trip(user, constant_json.TRIP_TYPE_PROVIDER, req.body.service_type_id, req.body, function (response) {
                                        if (response.success) {
                                            var trip = response.trip;
                                            if (trip.is_schedule_trip) {
                                                res.json({
                                                    success: true,
                                                    trip: trip,
                                                    message: success_messages.MESSAGE_CODE_YOUR_FUTURE_TRIP_CREATE_SUCCESSFULLY
                                                });
                                            } else {
                                                trip.is_toll = setting_detail.is_toll;
                                                trip.provider_last_name = provider_detail.last_name;
                                                trip.provider_type = provider_detail.provider_type;
                                                trip.provider_type_id = provider_detail.provider_type_id;
                                                trip.current_provider = provider_detail._id;
                                                trip.current_providers = [provider_detail._id];
                                                trip.confirmed_provider = provider_detail._id;
                                                trip.provider_id = provider_detail._id;
                                                trip.is_provider_accepted = 1;
                                                trip.is_provider_status = 4;
                                                var now_date = new Date();
                                                trip.accepted_time = now_date;
                                                trip.provider_arrived_time = now_date;
                                                trip.provider_trip_start_time = now_date;

                                                var unique_id = pad(trip.unique_id, 7, '0');
                                                var invoice_number = constant_json.INVOICE_APP_NAME_CODE + " " + constant_json.INVOICE_PROVIDER_TRIP_EARNING_CODE + " " + (moment(new Date())).format(constant_json.DATE_FORMAT_MMDDYYYY) + " " + unique_id;
                                                trip.invoice_number = invoice_number;

                                                trip.save().then(() => {
                                                    var trips = [];
                                                    trips.push(trip._id);
                                                    provider_detail.is_trip = trips;

                                                    provider_detail.save(function (err) {

                                                    });

                                                    user.current_trip_id = trip._id;
                                                    user.save();
                                                    res.json({
                                                        success: true,
                                                        message: success_messages.MESSAGE_CODE_YOUR_TRIP_CREATED_SUCCESSFULLY,
                                                        trip_id: trip._id,
                                                        user: user
                                                    });
                                                }, (err) => {
                                                    console.log(err);
                                                    res.json({
                                                        success: false,
                                                        error_code: error_message.ERROR_CODE_SOMETHING_WENT_WRONG
                                                    });
                                                });
                                            }
                                        } else {
                                            res.json(response);
                                        }
                                    });
                                }, (err) => {
                                    console.log(err);
                                    res.json({
                                        success: false,
                                        error_code: error_message.ERROR_CODE_SOMETHING_WENT_WRONG
                                    });
                                });
                            });
                        }
                    }, (err) => {
                        console.log(err);
                        res.json({
                            success: false,
                            error_code: error_message.ERROR_CODE_SOMETHING_WENT_WRONG
                        });
                    });
                } else {
                    res.json({ success: false, error_code: error_message.ERROR_CODE_PROVIDER_DETAIL_NOT_FOUND });
                }
            }, (err) => {
                console.log(err);
                res.json({
                    success: false,
                    error_code: error_message.ERROR_CODE_SOMETHING_WENT_WRONG
                });
            });
        } else {
            res.json({
                success: false,
                error_code: response.error_code,
                error_description: response.error_description
            });
        }
    });
};

exports.send_request_from_dispatcher = function (req, res, next) {

    utils.check_request_params(req.body, [{ name: 'trip_id', type: 'string' }], function (response) {
        if (response.success) {
            var provider_id = null
            if (req.body.provider_id) {
                provider_id = req.body.provider_id;
            }
            Trip.findOne({ _id: req.body.trip_id }).then((tripData) => {
                exports.nearest_provider(tripData, provider_id, [], function (nearest_provider_response) {
                    res.json(nearest_provider_response);
                });
            }, (err) => {
                console.log(err);
                res.json({
                    success: false,
                    error_code: error_message.ERROR_CODE_SOMETHING_WENT_WRONG
                });
            });
        } else {
            res.json({
                success: false,
                error_code: response.error_code,
                error_description: response.error_description
            });
        }
    });
}

exports.get_near_by_provider = function (req, res) {

    utils.check_request_params(req.body, [{ name: 'user_id', type: 'string' }], function (response) {
        if (response.success) {
            User.findOne({ _id: req.body.user_id }).then((user) => {
                if (user) {
                    if (req.body.token != null && user.token != req.body.token) {
                        res.json({ success: false, error_code: error_message.ERROR_CODE_INVALID_TOKEN });
                    } else {
                        Citytype.findOne({ _id: req.body.service_type_id }).then((citytype) => {
                            if (citytype) {
                                exports.nearest_provider_list(citytype, req.body, function (nearest_provider_response) {
                                    res.json(nearest_provider_response);
                                });
                            } else {
                                exports.nearest_provider_list(null, req.body, function (nearest_provider_response) {
                                    res.json(nearest_provider_response);
                                });
                            }
                        }, (err) => {
                            console.log(err);
                            res.json({
                                success: false,
                                error_code: error_message.ERROR_CODE_SOMETHING_WENT_WRONG
                            });
                        });
                    }
                }
            }, (err) => {
                console.log(err);
                res.json({
                    success: false,
                    error_code: error_message.ERROR_CODE_SOMETHING_WENT_WRONG
                });
            });
        } else {
            res.json({
                success: false,
                error_code: response.error_code,
                error_description: response.error_description
            });
        }
    });
};


exports.get_providerequipment = function (req, res) {
    utils.check_request_params(req.body, [{ name: 'provider_id', type: 'string' }], function (response) {
        if (response.success) {
            Provider.findOne({ _id: req.body.provider_id }).then((provider_detail) => {

                if (provider_detail) {
                    res.json({
                        success: true,
                        //count:[2,1],
                        //equipmentlist: ['Dry Ice','centrifuge']
                        //required_docs: 'Requisition Doc'
                        equipmentlist:
                            [
                                {
                                    equipmentid: 1,
                                    equipment_Name: "Dry Ice",
                                    equipment_Quantity: 2
                                },
                                {
                                    equipmentid: 2,
                                    equipment_Name: "Centrifuge",
                                    equipment_Quantity: 1
                                }
                            ]
                    });
                }
                else {
                    res.json({ success: false, error_code: error_message.ERROR_CODE_PROVIDER_DETAIL_NOT_FOUND });

                }
            });
        }
        else {
            res.json({
                success: false,
                error_code: response.error_code,
                error_description: response.error_description
            });

        }
    });

};

/*exports.getproviderequipment = function (req, res) {
   utils.check_request_params(req.body, [{name: 'provider_id', type: 'string'}], function (response) {
        if (response.success) {
            Provider.findOne({_id: req.body.provider_id}).then((provider) => {
                if (provider) {
                    if (req.body.token != null && provider.token != req.body.token) {
                        res.json({success: false, error_code: error_message.ERROR_CODE_INVALID_TOKEN});
                    } else {
                        if (provider && provider.is_trip.length > 0) {
                            var mongoose = require('mongoose');
                            var Schema = new mongoose.Types.ObjectId;
                            var trip = new Trip();
                            var isTrip = [];
                            for (var x of provider.is_trip)
                            {
                                isTrip.push(Schema(x));
                            }
                            var condition = {$match: {$and: [{'_id': {$in: isTrip}},{is_trip_cancelled: {$eq: 0}}, {is_provider_invoice_show: {$eq: 0}}, {is_trip_completed: {$eq: 0}}]}};
                            var group = {
                                $project: {
                                    message: success_messages.MESSAGE_CODE_YOU_GET_TRIP,
                                    trip_id: '$_id',
                                                                        equipments: 'Dry Ice',
                                                                        required_docs: 'Requisition Doc'
                                      }
                            };
                        	
                            Trip.aggregate([condition, group]).then((array) => {
                                res.json({success: true, trips: array});
                            }, (err) => {
                                console.log(err);
                                res.json({
                                    success: true,
                                                                        equipmentslist: { 'Dry Ice', 'Centrifuge'}
                                                                        //required_docs: 'Requisition Doc'
                                    //error_code: error_message.ERROR_CODE_SOMETHING_WENT_WRONG
                                });
                        	
                        } else {
                            res.json({success: false, error_code: error_message.ERROR_CODE_NO_TRIP_FOUND});
                        }	
                                                                                }
                } else {
                    res.json({success: false, error_code: error_message.ERROR_CODE_PROVIDER_DETAIL_NOT_FOUND});
                }
            }, (err) => {
                console.log(err);
                res.json({
                    success: false,
                    error_code: error_message.ERROR_CODE_SOMETHING_WENT_WRONG
                });
            });
        } else {
            res.json({
                success: false,
                error_code: response.error_code,
                error_description: response.error_description
            });
        }
    });
};*/

exports.getRequisitionResult = function (req, res) {
    utils.check_request_params(req.body, [{ name: 'requisition_num', type: 'string' }], function (response) {
        if (response.success) {
            var reqNo = req.body.UserRequisitionID;
            var userId = "IMARIO";
            var ownerId = "HCS";
            var IsNeedToClearHoldingTank = 1;
            var sessionId = "ee2331b0-ebf4-4e66-91b9-77d28f8ff5e2";
            try {
                sql.query('select res.PatientID,res.ProcedureSysID,res.`Status`,res.ResultType,res.ResAlpha,res.ResNum,res.ResAnal,res.ResultedDtm,res.NormalRange,res.MeasuringUnit,res.Notes,res.CreatedWhenDtm,res.CreatedBy, p.Code,p.Name,p.IsActive from requisitions r right join requisitionresults res on r.SysID = res.RequisitionSysID right join procedures p on res.ProcedureSysID = p.SysID where r.UserReqID = ?', req.body.requisition_num, (err, rows, fields) => {
                    if (err) {
                        console.log(err);
                    }
                    else {
                        if (rows != null) {
                            console.log(res.json);
                            res.json(rows);
                        }
                    }
                });
            }
            catch (e) {
                console.log(e);
            }
        }
        else {
            res.json({
                success: false,
                error_code: response.error_code,
                error_description: response.error_description
            });
        }

    });


};

exports.addNotes = function (req, res) {
    utils.check_request_params(req.body, [{ name: 'requisition_num', type: 'string' }, { name: 'Note', type: 'string' }, { name: 'picture', type: 'string' }], function (response) {
        if (response.success) {
            sql.query('SELECT r.SysID FROM requisitions r where r.UserReqID = ' + req.body.requisition_num + '', (err, rows, fields) => {
                if (err) {
                    console.log(err);
                }
                else {
                    console.log(rows);
                    var test = JSON.stringify(rows);
                    var test2 = JSON.parse(test);
                    var sysid = test2[0].SysID
                    //console.log(sysid);

                    var grnote = "GRNNT";
                    var phleb = "PHLEB";
                    var createdtm = new Date().toISOString().replace(/T/, ' ').replace(/\..+/, '');
                    var updatedtm = new Date().toISOString().replace(/T/, ' ').replace(/\..+/, '');
                    sql.query('INSERT INTO comments (RecordType,NoteTypeCode, ID1Type,ID1, Reportable, CreatedBy,CreatedWhenDtm,UpdatedBy,UpdatedWhenDtm, Notes) VALUES (2,"' + grnote + '",2,' + sysid + ',0,"' + phleb + '","' + createdtm + '","' + phleb + '","' + updatedtm + '","' + req.body.Note + req.body.picture + '")', (err, rows, fields) => {
                        if (err) {
                            console.log(err);
                        }
                        else {
                            console.log(res.json);
                            res.status(200).send({ message: 'Success' });
                        }
                    });
                }

            });


        }
        else {
            res.json({
                success: false,
                error_code: response.error_code,
                error_description: response.error_description
            });
        }

    });
};

exports.getNotes = function (req, res) {
    //utils.check_request_params(req.body,[{name: 'requisition_num', type: 'string'}], function (response) {
    //  if (response.success) 
    //  {
    var x = req.body.requisition_num;
    console.log(x);
    try {
        sql1.query('select grpuser.GroupSysID, grp.IsActive from groupusers grpuser join groups grp on grpuser.GroupSysID = grp.SysID  where grpuser.SysID = 36', (err, rows, fields) => {
            if (err) { console.log(err); }
            else {
                //console.log(res.json);
                var test = JSON.stringify(rows);
                console.log("tset val= " + test);
                var test2 = JSON.parse(test);
                var sysId = test2[0].GroupSysID;
                console.log("sysId = " + "  " + sysId);

                //var params = [sysId,isactive,isactive];
                sql2.query('select * from notetypes nt join notetypeaccess na on nt.Code = na.NoteTypeCode where ((na.RoleType = 0 && na.RoleObjectID= 2) || (na.RoleType = 1 && na.RoleObjectID = 36)) && nt.IsActive = 1', (err, rows, fields) => {
                    if (err) { console.log(err); }
                    else {
                        console.log(rows);
                        res.json(rows);
                    }
                });
            }
        });
    }
    catch (e) {
        console.log(e);
    }//}
    /*else {
                res.json({
                    success: false,
                    error_code: response.error_code,
                    error_description: response.error_description
                });
            }
        });*/
};


exports.getRequisitionDetails = function (req, res) {
    utils.check_request_params(req.body, [{ name: 'requisition_num', type: 'string' }], function (response) {
        if (response.success) {

            try {

                sql.query('select r.UserReqID,r.Notes,r.OrderingClinicID,r.ReportingClinicID,r.STATTesting,r.Fasting,r.STATCollection,r.ScheduledDtm,r.CollectedDtm,r.ReceivedDtm,r.SpecimenStatus,r.CollectionCenter,r.PhlebotomistID,r.OwnerID AS LabName,c.Name,c.FaxNo,c.PhoneNumber,c.LabType,p.SysID AS PatientID,p.FirstName,p.LastName,p.DOB,p.Gender,p.PatientPictureID,p.IsSpecialCondition,ph.Name AS physicianName,ph.PhoneNumber from requisitions r join clinics c on r.OrderingClinicID = c.SysID join patients p on r.PatientSysID = p.SysID join physicians ph on r.DoctorID = ph.SysID where r.UserReqID= ?', req.body.requisition_num, (err, rows, fields) => {
                    //var requ = new Requisition(res.body);
                    if (err) {
                        console.log(err);
                    }
                    else {
                        var resarray = [];
                        var jsondata = JSON.stringify(rows);
                        console.log("tset val= " + jsondata);
                        var data = JSON.parse(jsondata);

                        for (var i = 0; i < rows.length; i++) {
                            resarray.push({
                                Requisition: {
                                    UserReqId: data[i].UserReqID,
                                    Notes: data[i].Notes,
                                    OrderingClinicID: data[i].OrderingClinicID,
                                    ReportingClinicID: data[i].ReportingClinicID,
                                    STATTesting: data[i].STATTesting,
                                    Fasting: data[i].Fasting,
                                    STATCollection: data[i].STATCollection,
                                    ScheduledDtm: data[i].ScheduledDtm,
                                    CollectedDtm: data[i].CollectedDtm,
                                    ReceivedDtm: data[i].ReceivedDtm,
                                    SpecimenStatus: data[i].SpecimenStatus,
                                    CollectionCenter: data[i].CollectionCenter,
                                    PhlebotomistID: data[i].PhlebotomistID
                                },
                                Lab: { LabName: data[i].LabName },
                                Clinic: {
                                    Name: data[i].Name,
                                    FaxNo: data[i].FaxNo,
                                    PhoneNumber: data[i].PhoneNumber,
                                    LabType: data[i].LabType
                                },
                                Patient: {
                                    PatientID: data[i].PatientID,
                                    FirstName: data[i].FirstName,
                                    LastName: data[i].LastName,
                                    DOB: data[i].DOB,
                                    Gender: data[i].Gender,
                                    PatientPictureID: data[i].PatientPictureID,
                                    IsSpecialCondition: data[i].IsSpecialCondition
                                },
                                Physician: {
                                    PhysicianName: data[i].physicianName,
                                    PhoneNumber: data[i].PhoneNumber,
                                     /* ResultTyp: data[i].ResultType
                                      Units: data[i].Units,
                                      DefaultSpecimenCode: data[i].DefaultSpecimenCode,
                                      Abbreviation: data[i].Abbreviation*/}
                            });

                        }
                        console.log(resarray);
                        res.json(resarray);
                    }
                });
            }
            catch (e) {
                console.log(e);
            }
        }
        else {
            res.json({
                success: false,
                error_code: response.error_code,
                error_description: response.error_description
            });
        }
    });
};

exports.provider_get_trip_schedule = function (req, res) {
    utils.check_request_params(req.body, [{ name: 'provider_id', type: 'string' }], function (response) {
        if (response.success) {
            Provider.findOne({ _id: req.body.provider_id }).then((provider) => {
                if (provider) {
                    if (req.body.token != null && provider.token != req.body.token) {
                        res.json({ success: false, error_code: error_message.ERROR_CODE_INVALID_TOKEN });
                    } else {
                        if (provider && provider.is_trip.length > 0) {
                            var lookup1 = {
                                $lookup:
                                {
                                    from: "users",
                                    localField: "user_id",
                                    foreignField: "_id",
                                    as: "user_detail"
                                }
                            };
                            var unwind1 = { $unwind: "$user_detail" };

                            var mongoose = require('mongoose');
                            var Schema = new mongoose.Types.ObjectId;

                            var isTrip = [];
                            for (var x of provider.is_trip) {
                                isTrip.push(Schema(x));
                            }
                            var condition = { $match: { $and: [{ '_id': { $in: isTrip } }, { is_trip_cancelled: { $eq: 0 } }, { is_provider_accepted: { $eq: 1 } }, { is_provider_invoice_show: { $eq: 0 } }, { is_trip_completed: { $eq: 0 } }] } };
                            var group = {
                                $project: {
                                    message: success_messages.MESSAGE_CODE_YOU_GET_TRIP,
                                    trip_id: '$_id',
                                    source_address: 1,
                                    destination_address: 1,
                                    sourceLocation: 1,
                                    destinationLocation: 1,
                                    distance: "2 miles",
                                    duration: "12 minutes",
                                    requisition_num: 1,
                                    STAT: 1,
                                    start_time: 1,
                                    drop_location: 1,
                                    drop_address: 1,
                                    drop_account_no: 1,
                                    lab_name: 1,
                                    specimen: 1,
                                    is_trip_end: 1,
                                    user: "$user_detail"
                                }
                            };

                            Trip.aggregate([condition, lookup1, unwind1, group]).then((array) => {
                                res.json({ success: true, trips: array });
                            }, (err) => {
                                console.log(err);
                                res.json({
                                    success: false,
                                    error_code: error_message.ERROR_CODE_SOMETHING_WENT_WRONG
                                });
                            });
                        } else {
                            res.json({ success: false, error_code: error_message.ERROR_CODE_NO_TRIP_FOUND });
                        }
                    }
                } else {
                    res.json({ success: false, error_code: error_message.ERROR_CODE_PROVIDER_DETAIL_NOT_FOUND });
                }
            }, (err) => {
                console.log(err);
                res.json({
                    success: false,
                    error_code: error_message.ERROR_CODE_SOMETHING_WENT_WRONG
                });
            });
        } else {
            res.json({
                success: false,
                error_code: response.error_code,
                error_description: response.error_description
            });
        }
    });
};


exports.provider_get_summary = function (req, res) {
    utils.check_request_params(req.body, [{ name: 'provider_id', type: 'string' }], function (response) {
        if (response.success) {
            Provider.findOne({ _id: req.body.provider_id }).then((provider) => {
                if (provider) {
                    if (req.body.token != null && provider.token != req.body.token) {
                        res.json({ success: false, error_code: error_message.ERROR_CODE_INVALID_TOKEN });
                    } else {
                        if (provider && provider.is_trip.length > 0) {
                            var lookup1 = {
                                $lookup:
                                {
                                    from: "trips",
                                    localField: "user_id",
                                    foreignField: "_id",
                                    as: "user_detail"
                                }
                            };
                            var unwind1 = { $unwind: "$user_detail" };
                            var mongoose = require('mongoose');
                            var Schema = new mongoose.Types.ObjectId;
                            var isTrip = [];
                            for (var x of provider.is_trip) {
                                isTrip.push(Schema(x));
                            }
                            var condition = { $match: { $and: [{ '_id': { $in: isTrip } }, { is_trip_cancelled: { $eq: 0 } }, { is_provider_invoice_show: { $eq: 0 } }, { is_trip_completed: { $eq: 0 } }] } };
                            var group = {
                                $project: {
                                    message: success_messages.MESSAGE_CODE_YOU_GET_TRIP,
                                    trip_id: '$_id',
                                    source_address: 1,
                                    destination_address: 1,
                                    sourceLocation: 1,
                                    destinationLocation: 1,
                                }
                            };
                            Trip.aggregate([condition, group]).then((array) => {
                                res.json({ success: true, trips: array });
                            }, (err) => {
                                console.log(err);
                                res.json({
                                    success: false,
                                    error_code: error_message.ERROR_CODE_SOMETHING_WENT_WRONG
                                });
                            });
                        } else {
                            res.json({ success: false, error_code: error_message.ERROR_CODE_NO_TRIP_FOUND });
                        }
                    }
                } else {
                    res.json({ success: false, error_code: error_message.ERROR_CODE_PROVIDER_DETAIL_NOT_FOUND });
                }
            }, (err) => {
                console.log(err);
                res.json({
                    success: false,
                    error_code: error_message.ERROR_CODE_SOMETHING_WENT_WRONG
                });
            });
        } else {
            res.json({
                success: false,
                error_code: response.error_code,
                error_description: response.error_description
            });
        }
    });
};




exports.provider_get_trip_array = function (req, res) {
    utils.check_request_params(req.body, [{ name: 'provider_id', type: 'string' }], function (response) {
        if (response.success) {
            Provider.findOne({ _id: req.body.provider_id }).then((provider) => {
                if (provider) {
                    if (req.body.token != null && provider.token != req.body.token) {
                        res.json({ success: false, error_code: error_message.ERROR_CODE_INVALID_TOKEN });
                    } else {
                        if (provider && provider.is_trip.length > 0) {
                            var lookup1 = {
                                $lookup:
                                {
                                    from: "users",
                                    localField: "user_id",
                                    foreignField: "_id",
                                    as: "user_detail"
                                }
                            };
                            var unwind1 = { $unwind: "$user_detail" };

                            var mongoose = require('mongoose');
                            var Schema = new mongoose.Types.ObjectId;
                            var dest = 0;
                            var dura = 0;

                            Trip.findOne({
                                provider_id: req.body.provider_id,
                                is_trip_cancelled: 0,
                                is_trip_cancelled_by_provider: 0,
                                is_trip_cancelled_by_user: 0


                            }).then((trip) => {
                                if (trip) {



                                    var origins = [trip.source_address, trip.sourceLocation];
                                    var destinations = [trip.destination_address, trip.destinationLocation];
                                    distance.key(config.GoogleMapKey);
                                    distance.units('imperial');
                                    distance.matrix(origins, destinations, function (err, distances) {
                                        if (err) {
                                            console.log(err);
                                        }
                                        else {
                                            if (!distances) {
                                                return console.log('no distances');
                                            }
                                            if (distances.status == 'OK') {
                                                for (var i = 0; i < origins.length; i++) {
                                                    for (var j = 0; j < destinations.length; j++) {
                                                        var origin = distances.origin_addresses[i];
                                                        var destination = distances.destination_addresses[j];
                                                        if (distances.rows[0].elements[j].status == 'OK') {
                                                            var distance = distances.rows[i].elements[j].distance.text;
                                                            var duration = distances.rows[i].elements[j].duration.text;

                                                            // console.log('Distance from ' + origin + ' to ' + destination + ' is ' + distance);
                                                            // console.log('Duration to travel from ' + origin + ' to ' + destination + ' is ' + duration);

                                                            // console.log(parseFloat(distance,10));
                                                            var dist = parseFloat(distance, 10);
                                                            if (dest == 0 || dest > dist) {
                                                                dest = parseFloat(distance, 10);
                                                                dura = parseFloat(duration, 10);
                                                                console.log(dest + " " + dura);
                                                            }

                                                        }
                                                        else {
                                                            console.log(destination + ' is not reachable by land from ' + origin);
                                                        }
                                                    }
                                                    console.log(dest.toString() + " And " + dura.toString());
                                                }
                                            }
                                        }
                                    });
                                }
                            });

                            var isTrip = [];
                            for (var x of provider.is_trip) {
                                isTrip.push(Schema(x));
                            }
                            var condition = { $match: { $and: [{ '_id': { $in: isTrip } }, { is_trip_cancelled: { $eq: 0 } }, { is_provider_invoice_show: { $eq: 0 } }, { is_provider_accepted: { $eq: 0 } }, { is_trip_completed: { $eq: 0 } }] } };
                            var group = {
                                $project: {
                                    message: success_messages.MESSAGE_CODE_YOU_GET_TRIP,
                                    trip_id: '$_id',
                                    source_address: 1,
                                    start_time: 1,
                                    destination_address: 1,
                                    sourceLocation: 1,
                                    destinationLocation: 1,
                                    distance: "2 miles",
                                    duration: "12 minutes",
                                    requisition_num: 1,
                                    STAT: 1,
                                    drop_location: 1,
                                    drop_address: 1,
                                    drop_account_no: 1,
                                    lab_name: 1,
                                    specimen: 1,


                                    is_trip_end: 1,
                                    user: "$user_detail"
                                }
                            };

                            Trip.aggregate([condition, lookup1, unwind1, group]).then((array) => {

                                res.json({ success: true, trips: array });
                            }, (err) => {
                                console.log(err);
                                res.json({
                                    success: false,
                                    error_code: error_message.ERROR_CODE_SOMETHING_WENT_WRONG
                                });
                            });
                        } else {
                            res.json({ success: false, error_code: error_message.ERROR_CODE_NO_TRIP_FOUND });
                        }
                    }
                } else {
                    res.json({ success: false, error_code: error_message.ERROR_CODE_PROVIDER_DETAIL_NOT_FOUND });
                }
            }, (err) => {
                console.log(err);
                res.json({
                    success: false,
                    error_code: error_message.ERROR_CODE_SOMETHING_WENT_WRONG
                });
            });
        } else {
            res.json({
                success: false,
                error_code: response.error_code,
                error_description: response.error_description
            });
        }
    });
};


exports.provider_get_trips = function (req, res) {
    utils.check_request_params(req.body, [{ name: 'provider_id', type: 'string' }], function (response) {
        if (response.success) {
            Provider.findOne({ _id: req.body.provider_id }).then((provider) => {
                if (provider) {
                    if (req.body.token != null && provider.token != req.body.token) {
                        res.json({ success: false, error_code: error_message.ERROR_CODE_INVALID_TOKEN });
                    } else {

                        if (provider && provider.is_trip.length > 0) {
                            Trip.findOne({ _id: provider.is_trip[0] }).then((trip) => {

                                if (trip && trip.is_trip_cancelled == 0 && trip.is_provider_invoice_show == 0 && trip.is_trip_completed == 0) {


                                    var start_time = trip.updated_at;
                                    var end_time = new Date();
                                    var res_sec = utils.getTimeDifferenceInSecond(end_time, start_time);

                                    var provider_timeout = setting_detail.provider_timeout;
                                    var time_left_to_responds_trip = provider_timeout - res_sec;
                                    var trip_id = trip._id;
                                    var source_address = trip.source_address;
                                    var destination_address = trip.destination_address;
                                    var sourceLocation = trip.sourceLocation;
                                    var destinationLocation = trip.destinationLocation;
                                    var is_trip_end = trip.is_trip_end;
                                    var dest = 0;
                                    var dura = 0;
                                    var origins = [source_address, sourceLocation];
                                    var destinations = [destination_address, destinationLocation];
                                    distance.key(config.GoogleMapKey);
                                    distance.units('imperial');
                                    distance.matrix(origins, destinations, function (err, distances) {
                                        if (err) {
                                            console.log(err);
                                        }
                                        else {
                                            if (!distances) {
                                                return console.log('no distances');
                                            }
                                            if (distances.status == 'OK') {
                                                for (var i = 0; i < origins.length; i++) {
                                                    for (var j = 0; j < destinations.length; j++) {
                                                        var origin = distances.origin_addresses[i];
                                                        var destination = distances.destination_addresses[j];
                                                        if (distances.rows[0].elements[j].status == 'OK') {
                                                            var distance = distances.rows[i].elements[j].distance.text;
                                                            var duration = distances.rows[i].elements[j].duration.text;

                                                            // console.log('Distance from ' + origin + ' to ' + destination + ' is ' + distance);
                                                            // console.log('Duration to travel from ' + origin + ' to ' + destination + ' is ' + duration);

                                                            // console.log(parseFloat(distance,10));
                                                            var dist = 0.0;
                                                            dist = parseFloat(distance, 10);
                                                            if (dest == 0 || dest > dist) {
                                                                dest = parseFloat(distance, 10);
                                                                dura = parseFloat(duration, 10);
                                                                console.log(dest + " " + dura);
                                                            }

                                                        }
                                                        else {
                                                            console.log(destination + ' is not reachable by land from ' + origin);
                                                        }
                                                    }
                                                    console.log(dest.toString() + " " + dura.toString());
                                                }
                                            }
                                        }
                                    });

                                    User.findOne({ _id: trip.user_id }).then((user) => {
                                        res.json({
                                            success: true,
                                            message: success_messages.MESSAGE_CODE_YOU_GET_TRIP,
                                            trip_id: trip_id,
                                            source_address: source_address,
                                            destination_address: destination_address,
                                            sourceLocation: sourceLocation,
                                            destinationLocation: destinationLocation,
                                            distance: dest.toString(),
                                            duration: dura.toString(),
                                            is_trip_end: is_trip_end,
                                            time_left_to_responds_trip: time_left_to_responds_trip,
                                            user: user
                                        });

                                    });
                                } else {

                                    provider.is_trip = [];
                                    provider.is_available = 1;
                                    provider.save();
                                    res.json({ success: false, error_code: error_message.ERROR_CODE_NO_TRIP_FOUND });
                                }
                            }, (err) => {
                                console.log(err);
                                res.json({
                                    success: false,
                                    error_code: error_message.ERROR_CODE_SOMETHING_WENT_WRONG
                                });
                            });
                        } else {
                            res.json({ success: false, error_code: error_message.ERROR_CODE_NO_TRIP_FOUND });
                        }
                    }
                } else {
                    res.json({ success: false, error_code: error_message.ERROR_CODE_PROVIDER_DETAIL_NOT_FOUND });

                }
            }, (err) => {
                console.log(err);
                res.json({
                    success: false,
                    error_code: error_message.ERROR_CODE_SOMETHING_WENT_WRONG
                });
            });
        } else {
            res.json({
                success: false,
                error_code: response.error_code,
                error_description: response.error_description
            });
        }
    });
};

exports.getPreAndPostChecklist = function (req, res) {
    var prechecklist = ["Check any form of ID of the patient",
        "Take a picture and upload on patient profile",
        "Review the Order in the system",
        "Review any additional attachments with the order",
        "Read the specimen handling notes",
        "The label applies to the tube",
        "Ensure that all supplies available for the draw",
        "Start the services"];

    var postchecklist = ["Re-check the specimen collection for the ordered tests",
        "If require, centrifuge the tubes",
        "The specimen is packed in a specimen bag",
        "Attache the Requisition with the specimen bag",
        "Check the drop off location",
        "Update the 'Collected' status for requisition",
        "Collect the feedback from the patient for the services"];

    res.json({ PreDrawChecklist: prechecklist, PostDrawChecklist: postchecklist });
};



exports.rescheduleTrip = function (req, res) {
    utils.check_request_params(req.body, [{ name: 'trip_id', type: 'string' }, { name: 'provider_id', type: 'string' }, { name: 'start_time', type: 'string' }], function (response) {
        conssole.log("Error while rescheduleTrip ");
        if (response.success) {
            conssole.log("Error while rescheduleTrip 1 ");
            Trip.findOne({ _id: req.body.trip_id }).then((trip) => {
                if (trip) {
                    conssole.log("Error while rescheduleTrip 2 ");
                    if (trip.provider_id != req.body.provider_id) {
                        res.json({ success: false, error_code: error_message.ERROR_CODE_MISMATCH_PROVIDER_ID_OR_TRIP_ID });
                    } else {
                        conssole.log("Error while rescheduleTrip 2.1 ");
                        trip.start_time = req.body.start_time;
                        trip.status = 4 // added status
                        trip.save().then(() => {
                            res.json({
                                success: true,
                                message: success_messages.MESSAGE_CODE_USER_APPOINTMENT_RESCHEDULED_SUCCESSFULLY_BY_PROVIDER
                            });
                        }, (err) => {
                            conssole.log("Error while rescheduleTrip 3 ")
                            console.log(err);
                            res.json({
                                success: false,
                                error_code: error_message.ERROR_CODE_SOMETHING_WENT_WRONG
                            });
                        });
                    }
                } else {
                    res.json({ success: false, error_code: error_message.ERROR_CODE_YOUR_TRIP_DETAIL_NOT_FOUND });
                }
            }, (err) => {
                console.log(err);
                res.json({
                    success: false,
                    error_code: error_message.ERROR_CODE_SOMETHING_WENT_WRONG
                });
            });
        } else {
            res.json({
                success: false,
                error_code: response.error_code,
                error_description: response.error_description
            });
        }
    });
};

exports.getUserDetails = function (req, res) {
    utils.check_request_params(req.body, [{ name: 'user_id', type: 'string' }], function (response) {
        if (response.success) {
            User.findOne({ _id: req.body.user_id }).then((user) => {
                if (user) {
                    res.json({ succes: true, user: user });
                }
                else {
                    res.json({ succes: false });

                }
            });

        }
        else {
            res.json({
                success: false,
                error_code: response.error_code,
                error_description: response.error_description
            });
        }

    });
};


exports.get_PatientTest_Details = function (req, res) {
    utils.check_request_params(req.body, [{ name: 'requisition_num', type: 'string' }], function (response) {
        if (response.success) {
            try {
                sql.query('select req.SysID, res.PatientID, proc.Code, proc.Name,proc.DefaultSpecimenCode,req.ScheduledDtm, proc.ResultType ,res.`Status`, res.ResAlpha, res.ResNum , res.ResAnal from  requisitionresults res join requisitions req on res.RequisitionSysID = req.SysID join procedures proc on res.ProcedureSysID = proc.SysID where req.UserReqID = ?', req.body.requisition_num, (err, rows, fields) => {
                    if (err) {
                        console.log(err);
                    }
                    else {
                        console.log(res.json);
                        res.json(rows);
                    }
                });
            }
            catch (e) {
                console.log(e);
            }
        }
        else {
            res.json({
                success: false,
                error_code: response.error_code,
                error_description: response.error_description
            });
        }

    });
};


exports.add_PatientTest_Details = function (req, res) {
    utils.check_request_params(req.body, [{ name: 'requisition_num', type: 'string' }, { name: 'ResultType', type: 'string' }, { name: 'Status', type: 'string' }, { name: 'Note', type: 'string' }, { name: 'Result', type: 'string' }, { name: 'ProcedureID', type: 'string' }], function (response) {
        if (response.success) {

            var procedure_id = req.body.ProcedureID;
            var status = req.body.Status;
            var note = req.body.Note;
            var phleb = "PHLEB";
            var createdtm = new Date().toISOString().replace(/T/, ' ').replace(/\..+/, '');
            var resultA = "";
            var resultN = 0.0;
            var resultD = "";
            switch (req.body.ResultType) {
                case "A":
                    resultA = req.body.Result;
                    break;
                case "N":
                    resultN = parseFloat(req.body.Result);
                    break;
                case "D":
                    resultD = req.body.Result
                    break;
            }

            try {
                sql.query('SELECT r.SysID,r.PatientSysID FROM requisitions r where r.UserReqID = ?', req.body.requisition_num, (err, rows, fields) => {
                    if (err) {
                        console.log(err);
                    }
                    else {
                        if (rows != null) {
                            console.log(rows);
                            var test = JSON.stringify(rows);
                            console.log("tset val= " + test);
                            var test2 = JSON.parse(test);

                            var sysid = test2[0].SysID;
                            var PatientID = test2[0].PatientSysID;
                            console.log("sysid = " + "  " + sysid);
                            var param = [sysid, PatientID, procedure_id, status, req.body.ResultType, resultD, resultN, resultA, note, createdtm, phleb, createdtm, phleb];
                            sql.query('insert into requisitionresults (RequisitionSysID,PatientID,ProcedureSysID,Status,ResultType,ResAlpha,ResNum,ResAnal,Notes,CreatedWhenDtm,CreatedBy,UpdateWhenDtm,UpdatedBy) values (?,?,?,?,?,?,?,?,?,?,?,?,?)', param, (err, rows, fields) => {
                                if (err) {
                                    console.log(err);
                                }
                                else {
                                    console.log(res.json);
                                    res.status(200).send({ message: 'Success' });
                                }
                            });
                        }
                        else {
                            console.log("dydid not found");
                        }
                    }
                });
            }
            catch (e) {
                console.log(e);
            }

        }
        else {
            res.json({
                success: false,
                error_code: response.error_code,
                error_description: response.error_description
            });
        }

    });
};



////////////USER  GET TRIPSTATUS//////////// ///
exports.user_get_trip_status = function (req, res) {

    utils.check_request_params(req.body, [{ name: 'user_id', type: 'string' }], function (response) {
        if (response.success) {
            User.findOne({ _id: req.body.user_id }).then((user) => {
                if (user) {

                    if (user.is_approved == 0) {
                        res.json({ success: false, error_code: error_message.ERROR_CODE_USER_NOT_APPROVED })
                    } else {
                        if (user.token != req.body.token) {
                            res.json({ success: false, error_code: error_message.ERROR_CODE_INVALID_TOKEN });
                        } else {
                            var json;


                            if (req.body.type == "web") {
                                json = { user_id: req.body.user_id, _id: user.current_trip_id }
                            } else {

                                json = { user_id: req.body.user_id, _id: user.current_trip_id };
                            }
                            Trip.findOne(json).then((trip) => {

                                if (trip) {
                                    if (trip.is_trip_cancelled == 1 || trip.is_trip_cancelled_by_user == 1) {
                                        res.json({
                                            success: false,
                                            error_code: error_message.ERROR_CODE_TRIP_IS_ALREADY_CANCELLED
                                        });

                                    } else if (trip.is_trip_cancelled_by_provider == 1 || trip.is_user_invoice_show == 1) {
                                        res.json({ success: false, error_code: error_message.ERROR_CODE_TRIP_CANCELLED_BY_PROVIDER });
                                    } else {
                                        Trip_Service.findOne({ _id: trip.trip_service_city_type_id }).then((tripservice) => {
                                            if (tripservice) {

                                                Citytype.findById(trip.service_type_id).then((citytype_detail) => {
                                                    Type.findById(citytype_detail.typeid).then((type_detail) => {

                                                        var cancellation_fee = tripservice.cancellation_fee;
                                                        var waiting_time_start_after_minute = tripservice.waiting_time_start_after_minute;
                                                        var price_for_waiting_time = tripservice.price_for_waiting_time;
                                                        var total_wait_time = 0;
                                                        var provider_arrived_time = trip.provider_arrived_time;
                                                        if (provider_arrived_time != null) {
                                                            var end_time = new Date();
                                                            total_wait_time = utils.getTimeDifferenceInSecond(end_time, provider_arrived_time);
                                                            total_wait_time = total_wait_time - waiting_time_start_after_minute * 60;
                                                        }

                                                        City.findOne({ _id: citytype_detail.cityid }).then((cityDetail) => {
                                                            if (!cityDetail) {
                                                                res.json({
                                                                    success: false,
                                                                    error_code: error_message.ERROR_CODE_NO_CITY_LIST_FOUND
                                                                });

                                                            } else {
                                                                User_promo_use.findOne({ trip_id: trip._id }).then((user_promo_use) => {
                                                                    var isPromoUsed = 0;
                                                                    var PAYMENT_TYPES = utils.PAYMENT_TYPES();
                                                                    if (user_promo_use) {
                                                                        isPromoUsed = 1;
                                                                    }
                                                                    if (trip.is_provider_status == 6) {
                                                                        var now = new Date();
                                                                        var minutes = utils.getTimeDifferenceInMinute(now, trip.provider_trip_start_time);
                                                                        trip.total_time = minutes;
                                                                        trip.save();
                                                                    }


                                                                    res.json({
                                                                        success: true,
                                                                        map_pin_image_url: type_detail.map_pin_image_url,
                                                                        message: success_messages.MESSAGE_CODE_YOU_GET_TRIP_STATUS,
                                                                        city_detail: cityDetail,
                                                                        trip: trip,
                                                                        waiting_time_start_after_minute: waiting_time_start_after_minute,
                                                                        price_for_waiting_time: price_for_waiting_time,
                                                                        total_wait_time: total_wait_time,
                                                                        isPromoUsed: isPromoUsed,
                                                                        cancellation_fee: cancellation_fee,
                                                                        payment_gateway: PAYMENT_TYPES
                                                                    });
                                                                });
                                                            }
                                                        });
                                                    })
                                                })
                                            } else {
                                                res.json({ success: false, error_code: error_message.ERROR_CODE_NO_TRIP });

                                            }
                                        });
                                    }
                                } else {

                                    res.json({ success: false, error_code: error_message.ERROR_CODE_NO_TRIP });
                                }
                            }, (err) => {
                                console.log(err);
                                res.json({
                                    success: false,
                                    error_code: error_message.ERROR_CODE_SOMETHING_WENT_WRONG
                                });
                            });
                        }
                    }
                } else {
                    res.json({ success: false, error_code: error_message.ERROR_CODE_USER_DETAIL_NOT_FOUND });

                }
            }, (err) => {
                console.log(err);
                res.json({
                    success: false,
                    error_code: error_message.ERROR_CODE_SOMETHING_WENT_WRONG
                });
            });
        } else {
            res.json({
                success: false,
                error_code: response.error_code,
                error_description: response.error_description
            });
        }
    });
};

/////////////RESPOND TRIP///////////////////

exports.responds_trip = function (req, res) {
    utils.check_request_params(req.body, [{ name: 'provider_id', type: 'string' }], function (response) {
        if (response.success) {
            Provider.findOne({ _id: req.body.provider_id }).then((provider) => {
                if (provider) {
                    // if (req.body.token != null && !utils.validate_token(req.body.token)) {
                    //     res.json({ success: false, error_code: error_message.ERROR_CODE_INVALID_TOKEN });
                    // } else {
                    // Trip.findOne({_id: req.body.trip_id, current_provider: provider._id}).then((trip) => {
                    Trip.findOne({ _id: req.body.trip_id }).then((trip) => {
                        if (trip) {
                            var is_provider_accepted = req.body.is_provider_accepted;

                            if (trip.is_trip_cancelled == 1) {
                                if (is_provider_accepted == 1) {
                                    res.json({
                                        success: false,
                                        error_code: error_message.ERROR_CODE_TRIP_IS_ALREADY_CANCELLED
                                    });
                                } else {
                                    res.json({
                                        success: true,
                                        message: success_messages.MESSAGE_CODE_FOR_PROVIDER_YOU_REJECTED_TRIP
                                    });
                                }

                            } else if (trip.is_provider_accepted == 1) {
                                if (is_provider_accepted == 1) {
                                    res.json({ success: false, error_code: error_message.ERROR_CODE_TRIP_IS_ALREADY_ACCEPTED });
                                } else {
                                    res.json({
                                        success: true,
                                        message: success_messages.MESSAGE_CODE_FOR_PROVIDER_YOU_REJECTED_TRIP
                                    });
                                }

                            } else {
                                if (is_provider_accepted == 1) {
                                    // call function 

                                    var reqdata = {
                                        reqSysId: trip.requsitionSysID,
                                        userEmail: provider.email
                                    };
                                    exports.phleb_assignment(reqdata, function (phleb_assignment_response) {
                                        if (phleb_assignment_response.response.success) {
                                            exports.accept_trip(provider, trip, function (accepte_trip_response) {
                                                res.json(accepte_trip_response);
                                            });
                                            //updtate triporders
                                            TripOrder.find({ trip_id: req.body.trip_id }).then((tripOrders) => {
                                                tripOrders.forEach(function (trip_order) {
                                                    trip_order.phlebotomistid = req.body.provider_id;
                                                    trip_order.save();
                                                });
                                            });


                                        }
                                        else {
                                            res.json({ success: false, error_code: error_message.ERROR_CODE_SOMETHING_WENT_WRONG });
                                        }
                                    })


                                } else {
                                    exports.reject_trip(trip, req.body.provider_id, req.body.is_request_timeout, function (reject_trip_response) {
                                        res.json(reject_trip_response);
                                    });
                                }
                            }
                        } else {
                            res.json({ success: false, error_code: error_message.ERROR_CODE_TRIP_IS_ALREADY_ACCEPTED });
                        }
                    }, (err) => {
                        console.log(err);
                        res.json({
                            success: false,
                            error_code: error_message.ERROR_CODE_SOMETHING_WENT_WRONG
                        });
                    });
                    //}
                } else {
                    res.json({ success: false, error_code: error_message.ERROR_CODE_PROVIDER_DETAIL_NOT_FOUND });
                }
            }, (err) => {
                console.log(err);
                res.json({
                    success: false,
                    error_code: error_message.ERROR_CODE_SOMETHING_WENT_WRONG
                });
            });
        } else {
            res.json({
                success: false,
                error_code: response.error_code,
                error_description: response.error_description
            });
        }
    });
};

exports.accept_trip = function (provider, trip, response) {

    var now = new Date();
    trip.current_provider = provider._id;
    trip.confirmed_provider = provider._id;
    trip.is_provider_accepted = 1;
    trip.is_provider_status = 1;
    trip.accepted_time = now;
    trip.is_schedule_trip = false;
    trip.provider_first_name = provider.first_name;
    trip.provider_last_name = provider.last_name;

    var unique_id = pad(trip.unique_id, 7, '0');
    var invoice_number = constant_json.INVOICE_APP_NAME_CODE + " " + constant_json.INVOICE_PROVIDER_TRIP_EARNING_CODE + " " + (moment(now)).format(constant_json.DATE_FORMAT_MMDDYYYY) + " " + unique_id;
    trip.invoice_number = invoice_number;
    trip.provider_id = provider._id;
    trip.providerLocation = provider.providerLocation;
    trip.bearing = provider.bearing;

    var airport_queue_id = provider.airport_queue_id
    if (provider.in_airport_queue) {
        Citytype.findOne({ _id: trip.service_type_id }, function (error, city_type) {
            if (city_type) {
                var index = city_type.total_provider_in_zone_queue.findIndex((x) => (x.zone_queue_id).toString() == (zone_queue_id).toString())

                if (index == -1) {
                    city_type.total_provider_in_zone_queue.push({ zone_queue_id: zone_queue_data._id, total_provider_in_zone_queue: 0 })
                } else {
                    city_type.total_provider_in_zone_queue[index].total_provider_in_zone_queue--;
                }
                city_type.markModified('total_provider_in_zone_queue');
                city_type.save();
            }
        });
        Provider.update({ zone_queue_id: provider.zone_queue_id, _id: { $ne: provider._id } }, { '$inc': { executive_type_queue_no: -1 } }, { multi: true }, function (error, providers) {
            console.log(error)
        });

        provider.in_zone_queue = false;
        provider.zone_queue_id = null;
        provider.eco_type_queue_no = 0;

    }

    var current_providers = trip.current_providers;
    trip.current_providers = [];

    User.findOne({ _id: trip.user_id }, function (error, user_detail) {

        var is_favourite_provider = false;
        if (user_detail) {
            var index = user_detail.favourite_providers.findIndex((x) => (x).toString() == (provider._id).toString());
            if (index !== -1) {
                is_favourite_provider = true;
            }
        }
        trip.is_favourite_provider = is_favourite_provider

        trip.save().then(() => {



            Provider.find({ $and: [{ _id: { $in: current_providers } }, { _id: { $ne: trip.confirmed_provider } }] }).then((providers_list) => {
                providers_list.forEach(function (provider) {
                    utils.sendPushNotification(constant_json.PROVIDER_UNIQUE_NUMBER, provider.device_type, provider.device_token, push_messages.PUSH_CODE_FOR_TRIP_ACCEPTED_BY_ANOTHER_PROVIDER, constant_json.PUSH_NOTIFICATION_SOUND_FILE_IN_IOS);
                });
            });

            Provider.update({ $and: [{ _id: { $in: current_providers } }, { _id: { $ne: trip.confirmed_provider } }] }, { is_available: 1, is_trip: [] }, { multi: true }).then((providers) => {

            });
            User.findOne({ _id: trip.user_id }).then((user) => {
                if (user) {
                    if (setting_detail.sms_notification) {
                        utils.sendOtherSMS(user.country_phone_code + user.phone, 5, "");
                    }
                    utils.sendPushNotification(constant_json.USER_UNIQUE_NUMBER, user.device_type, user.device_token, push_messages.PUSH_CODE_FOR_ACCEPT_TRIP, constant_json.PUSH_NOTIFICATION_SOUND_FILE_IN_IOS);
                }
            });

            myAnalytics.insert_daily_provider_analytics(trip.timezone, provider._id, TRIP_STATUS.PROVIDER_ACCEPTED, null);

            provider.accepted_request = provider.accepted_request + 1;
            provider.is_available = 0;
            // provider.is_trip.push(trip._id);
            provider.save();
            response({
                success: true,
                message: success_messages.MESSAGE_CODE_FOR_PROVIDER_YOU_ACCEPTED_TRIP_SUCCESSFULLY,
                is_provider_accepted: trip.is_provider_accepted
            });

        }, (err) => {
            response({
                success: false,
                error_code: error_message.ERROR_CODE_SOMETHING_WENT_WRONG
            });
        });
    });

};

exports.reject_trip = function (trip, provider_id, is_request_timeout, response) {

    var now = new Date();
    var unique_id = pad(trip.unique_id, 7, '0');
    var invoice_number = constant_json.INVOICE_APP_NAME_CODE + " " + constant_json.INVOICE_PROVIDER_TRIP_EARNING_CODE + " " + (moment(now)).format(constant_json.DATE_FORMAT_MMDDYYYY) + " " + unique_id;
    trip.invoice_number = invoice_number;
    if (!is_request_timeout || setting_detail.find_nearest_driver_type == Number(constant_json.NEAREST_PROVIDER_TYPE_SINGLE)) {
        var providers_id_that_rejected_trip = trip.providers_id_that_rejected_trip;
        providers_id_that_rejected_trip.push(provider_id);
        trip.providers_id_that_rejected_trip = providers_id_that_rejected_trip;
    }

    Provider.findOne({ _id: provider_id }).then((current_provider) => {
        if (current_provider) {

            if (current_provider.in_zone_queue) {
                Citytype.findOne({ _id: trip.service_type_id }, function (error, city_type) {
                    if (city_type) {
                        var index = city_type.total_provider_in_zone_queue.findIndex((x) => (x.zone_queue_id).toString() == (current_provider.zone_queue_id).toString())
                        if (index == -1) {
                            current_provider.zone_queue_no = 1;
                        } else {
                            current_provider.zone_queue_no = city_type.total_provider_in_zone_queue[index].total_provider_in_zone_queue;
                        }
                    }
                    myAnalytics.insert_daily_provider_analytics(trip.timezone, current_provider._id, TRIP_STATUS.PROVIDER_REJECTED, null);
                    current_provider.rejected_request = current_provider.rejected_request + 1;
                    current_provider.is_available = 1;
                    var indexTrip = current_provider.is_trip.indexOf(trip._id); // removing trip from trip array on rejecting trip id 
                    if (indexTrip > -1) {
                        current_provider.is_trip.splice(indexTrip, 1);
                    }

                    //current_provider.is_trip = [];
                    current_provider.save();

                    Provider.update({ zone_queue_id: provider.zone_queue_id, _id: { $ne: provider._id } }, { '$inc': { executive_type_queue_no: -1 } }, { multi: true }, function (error, providers) {
                        console.log(error)
                    });

                });
            } else {
                myAnalytics.insert_daily_provider_analytics(trip.timezone, current_provider._id, TRIP_STATUS.PROVIDER_REJECTED, null);
                current_provider.rejected_request = current_provider.rejected_request + 1;
                current_provider.is_available = 1;
                var indexTrip = current_provider.is_trip.indexOf(trip._id); // removing trip from trip array on rejecting trip id 
                if (indexTrip > -1) {
                    current_provider.is_trip.splice(indexTrip, 1);
                }

                //current_provider.is_trip = [];
                current_provider.save();
            }

        }
    });

    if (setting_detail.find_nearest_driver_type == Number(constant_json.NEAREST_PROVIDER_TYPE_MULTIPLE)) {
        var index = trip.current_providers.findIndex((x) => (x).toString() == (provider_id).toString());
        if (index !== -1) {
            trip.current_providers.splice(index, 1);
            trip.markModified('current_providers');
        }
    }

    trip.save().then(() => {
        response({
            success: true,
            message: success_messages.MESSAGE_CODE_FOR_PROVIDER_YOU_REJECTED_TRIP,
            is_provider_accepted: trip.is_provider_accepted
        });
        if (setting_detail.find_nearest_driver_type == Number(constant_json.NEAREST_PROVIDER_TYPE_SINGLE)) {
            exports.nearest_provider(trip, null, [], function (nearest_provider_response) {

            });
        }
    }, (err) => {
        console.log(err);
        response({
            success: false,
            error_code: error_message.ERROR_CODE_SOMETHING_WENT_WRONG
        });
    });

};

exports.trip_cancel_by_user = function (req, res) {

    utils.check_request_params(req.body, [{ name: 'user_id', type: 'string' }, {
        name: 'trip_id',
        type: 'string'
    }], function (response) {
        if (response.success) {
            User.findOne({ _id: req.body.user_id }).then((user) => {
                if (user) {
                    if (req.body.type != constant_json.TRIP_TYPE_DISPATCHER && req.body.type != constant_json.TRIP_TYPE_CORPORATE && user.token != req.body.token) {

                        if (req.body.type !== "Admin") {
                            res.json({ success: false, error_code: error_message.ERROR_CODE_INVALID_TOKEN });
                        }
                    } else {

                        Trip.findOne({ _id: req.body.trip_id }).then((trip) => {

                            var cancel_reason = req.body.cancel_reason;
                            if (trip) {
                                if (trip.is_trip_completed == 0 && trip.is_trip_end == 0) {

                                    if (trip.is_trip_cancelled == 0 && trip.is_trip_cancelled_by_user == 0 && trip.is_trip_cancelled_by_provider == 0) {

                                        var trip_type = trip.trip_type;
                                        var providerID = trip.confirmed_provider;


                                        var status = trip.is_provider_status;

                                        var complete_date_in_city_timezone = utils.get_date_now_at_city(new Date(), trip.timezone);
                                        var complete_date_tag = moment(moment(complete_date_in_city_timezone).startOf('day')).format(constant_json.DATE_FORMAT_MMM_D_YYYY);
                                        trip.complete_date_in_city_timezone = complete_date_in_city_timezone;
                                        trip.complete_date_tag = complete_date_tag;

                                        trip.provider_trip_end_time = new Date();
                                        Provider.update({ _id: { $in: trip.current_providers } }, { is_available: 1, $pull: { is_trip: trip._id } }, { multi: true }, function (error, providers_list) {

                                        });

                                        if (status == 0) {
                                            trip.cancel_reason = cancel_reason;
                                            trip.is_trip_cancelled = 1;
                                            trip.is_trip_cancelled_by_user = 1;

                                            trip.save().then(() => {
                                                user.current_trip_id = null;
                                                user.cancelled_request = user.cancelled_request + 1;
                                                user.save();
                                                exports.trip_detail_notify(res, trip._id);
                                                res.json({
                                                    success: true,
                                                    message: success_messages.MESSAGE_CODE_YOUR_TRIP_CANCELLED_SUCCESSFULLY
                                                });
                                            }, (err) => {
                                                res.json({
                                                    success: false,
                                                    error_code: error_message.ERROR_CODE_SOMETHING_WENT_WRONG
                                                });
                                            });

                                        } else {

                                            trip.cancel_reason = cancel_reason;
                                            trip.is_trip_cancelled = 1;
                                            if (trip.is_provider_accepted == constant_json.YES) {
                                                trip.is_trip_cancelled_by_user = 1;
                                            }


                                            trip.save().then(() => {
                                                Provider.findOne({ _id: providerID }).then((provider) => {

                                                    if (provider) {
                                                        utils.sendPushNotification(constant_json.PROVIDER_UNIQUE_NUMBER, provider.device_type, provider.device_token, push_messages.PUSH_CODE_FOR_TRIP_CANCELLED_BY_USER, constant_json.PUSH_NOTIFICATION_SOUND_FILE_IN_IOS);

                                                        provider.is_available = 1;
                                                        provider.is_trip = [];
                                                        provider.save();
                                                    }
                                                });


                                                user.cancelled_request = user.cancelled_request + 1;
                                                user.current_trip_id = null;
                                                user.save();

                                                User_promo_use.findOne({ trip_id: trip._id }).then((userpromouse) => {
                                                    if (userpromouse) {
                                                        userpromouse.remove();
                                                    }

                                                });
                                                Promo_Code.findOne({ _id: trip.promo_id }).then((promo_code) => {
                                                    if (promo_code) {
                                                        promo_code.user_used_promo = promo_code.user_used_promo - 1;
                                                        promo_code.save();
                                                    }
                                                });

                                                if (status == 4) {
                                                    Trip_Service.findOne({ _id: trip.trip_service_city_type_id }).then((tripservice_data) => {

                                                        var cancellationCharges = tripservice_data.cancellation_fee;
                                                        var provider_profit = tripservice_data.provider_profit;
                                                        trip.is_cancellation_fee = 1;
                                                        var current_rate = 1;

                                                        if (cancellationCharges > 0) {

                                                            var admin_currencycode = setting_detail.adminCurrencyCode;
                                                            var admin_currency = setting_detail.adminCurrency;

                                                            var countryCurrencyCode = trip.currencycode;

                                                            City.findOne({ _id: trip.city_id }).then((city) => {

                                                                var is_provider_earning_set_in_wallet_on_other_payment = false;
                                                                var is_provider_earning_set_in_wallet_on_cash_payment = false;
                                                                if (city) {
                                                                    is_provider_earning_set_in_wallet_on_other_payment = city.is_provider_earning_set_in_wallet_on_other_payment;
                                                                    is_provider_earning_set_in_wallet_on_cash_payment = city.is_provider_earning_set_in_wallet_on_cash_payment;
                                                                }

                                                                utils.getCurrencyConvertRate(1, countryCurrencyCode, admin_currencycode, function (response) {

                                                                    if (response.success) {
                                                                        current_rate = response.current_rate;
                                                                    } else {
                                                                        current_rate = 1;
                                                                    }

                                                                    var provider_service_fees = 0;
                                                                    var total_in_admin_currency = 0;
                                                                    var service_total_in_admin_currency = 0;
                                                                    var provider_service_fees_in_admin_currency = 0;

                                                                    provider_service_fees = cancellationCharges * provider_profit * 0.01;
                                                                    provider_service_fees_in_admin_currency = provider_service_fees * current_rate;

                                                                    total_in_admin_currency = cancellationCharges * current_rate;
                                                                    service_total_in_admin_currency = cancellationCharges * current_rate;

                                                                    trip.total_service_fees = cancellationCharges;
                                                                    trip.total = cancellationCharges;
                                                                    trip.provider_service_fees = (provider_service_fees).toFixed(2);
                                                                    trip.pay_to_provider = trip.provider_service_fees
                                                                    trip.total_in_admin_currency = total_in_admin_currency;
                                                                    trip.service_total_in_admin_currency = service_total_in_admin_currency;
                                                                    trip.provider_service_fees_in_admin_currency = provider_service_fees_in_admin_currency;
                                                                    trip.current_rate = current_rate;

                                                                    trip.admin_currency = admin_currency;
                                                                    trip.admin_currencycode = admin_currencycode;
                                                                    trip.payment_mode = constant_json.PAYMENT_MODE_CARD;

                                                                    var user_id = req.body.user_id;
                                                                    if (trip_type == constant_json.TRIP_TYPE_CORPORATE) {
                                                                        user_id = trip.user_type_id;
                                                                    }

                                                                    myPayments.pay_payment_on_selected_payment_gateway(Number(constant_json.PAYMENT_BY_STRIPE), user_id, cancellationCharges, countryCurrencyCode, function (response) {
                                                                        if (response.success) {
                                                                            trip.is_pending_payments = 0;
                                                                            trip.is_paid = 1;
                                                                            trip.card_payment = cancellationCharges;
                                                                            trip.payment_transaction.push(response.payment_transaction);

                                                                            trip.save().then(() => {

                                                                                if ((trip.payment_mode == Number(constant_json.PAYMENT_MODE_CASH) && is_provider_earning_set_in_wallet_on_cash_payment) || (trip.payment_mode == Number(constant_json.PAYMENT_MODE_CARD) && is_provider_earning_set_in_wallet_on_other_payment)) {
                                                                                    Provider.findOne({ _id: providerID }).then((provider) => {
                                                                                        if (provider) {
                                                                                            if (provider.provider_type == Number(constant_json.PROVIDER_TYPE_NORMAL)) {

                                                                                                var total_wallet_amount = utils.addWalletHistory(constant_json.PROVIDER_UNIQUE_NUMBER, provider.unique_id, provider._id, provider.country_id,
                                                                                                    provider.wallet_currency_code, trip.currencycode,
                                                                                                    1, trip.pay_to_provider, provider.wallet, constant_json.ADD_WALLET_AMOUNT, constant_json.SET_TRIP_PROFIT, "Profit Of This Trip : " + trip.unique_id);

                                                                                                provider.wallet = total_wallet_amount;
                                                                                                provider.save();
                                                                                            } else {
                                                                                                Partner.findOne({ _id: trip.provider_type_id }).then((partner) => {

                                                                                                    var total_wallet_amount = utils.addWalletHistory(constant_json.PARTNER_UNIQUE_NUMBER, partner.unique_id, partner._id, partner.country_id,
                                                                                                        partner.wallet_currency_code, trip.currencycode,
                                                                                                        1, trip.pay_to_provider, partner.wallet, constant_json.ADD_WALLET_AMOUNT, constant_json.SET_TRIP_PROFIT, "Profit Of This Trip : " + trip.unique_id);

                                                                                                    partner.wallet = total_wallet_amount;
                                                                                                    partner.save();
                                                                                                });
                                                                                            }

                                                                                            trip.is_provider_earning_set_in_wallet = true;
                                                                                            trip.provider_income_set_in_wallet = Math.abs(trip.pay_to_provider);
                                                                                        }
                                                                                    });
                                                                                }
                                                                                if (req.body.type !== "Admin") {
                                                                                    exports.trip_detail_notify(res, trip._id);
                                                                                    res.json({
                                                                                        success: true,
                                                                                        message: success_messages.MESSAGE_CODE_YOUR_TRIP_CANCELLED_SUCCESSFULLY,
                                                                                        is_pending_payments: trip.is_pending_payments,
                                                                                        is_trip_cancelled: trip.is_trip_cancelled,
                                                                                        cancellationCharges: cancellationCharges

                                                                                    });
                                                                                }
                                                                            }, (err) => {
                                                                                console.log(err);
                                                                                res.json({
                                                                                    success: false,
                                                                                    error_code: error_message.ERROR_CODE_SOMETHING_WENT_WRONG
                                                                                });
                                                                            });
                                                                        } else {
                                                                            utils.getCurrencyConvertRate(1, user.wallet_currency_code, countryCurrencyCode, function (response) {
                                                                                var wallet_current_rate = 1;
                                                                                if (response.success) {
                                                                                    wallet_current_rate = response.current_rate;
                                                                                }

                                                                                if (trip_type == constant_json.TRIP_TYPE_CORPORATE) {
                                                                                    Corporate.findOne({ _id: trip.user_type_id }, function (error, corporate) {
                                                                                        if (corporate) {
                                                                                            user = corporate;
                                                                                        }
                                                                                        var total_wallet_amount = utils.addWalletHistory(constant_json.USER_UNIQUE_NUMBER, user.unique_id, user._id, null,
                                                                                            user.wallet_currency_code, trip.currencycode,
                                                                                            wallet_current_rate, cancellationCharges, user.wallet, constant_json.DEDUCT_WALLET_AMOUNT, constant_json.PAID_TRIP_AMOUNT, "Cancellation charge Of This Trip : " + trip.unique_id);
                                                                                        user.wallet = total_wallet_amount;
                                                                                        user.save();
                                                                                    });
                                                                                } else {
                                                                                    var total_wallet_amount = utils.addWalletHistory(constant_json.USER_UNIQUE_NUMBER, user.unique_id, user._id, null,
                                                                                        user.wallet_currency_code, trip.currencycode,
                                                                                        wallet_current_rate, cancellationCharges, user.wallet, constant_json.DEDUCT_WALLET_AMOUNT, constant_json.PAID_TRIP_AMOUNT, "Cancellation charge Of This Trip : " + trip.unique_id);
                                                                                    user.wallet = total_wallet_amount;
                                                                                    user.save();
                                                                                }

                                                                                trip.wallet_payment = Number((cancellationCharges).toFixed(2));
                                                                                trip.total_after_wallet_payment = 0;
                                                                                trip.remaining_payment = 0;
                                                                                trip.is_paid = 1;
                                                                                trip.is_pending_payments = 0;

                                                                                trip.save().then(() => {
                                                                                    if ((trip.payment_mode == Number(constant_json.PAYMENT_MODE_CASH) && is_provider_earning_set_in_wallet_on_cash_payment) || (trip.payment_mode == Number(constant_json.PAYMENT_MODE_CARD) && is_provider_earning_set_in_wallet_on_other_payment)) {

                                                                                        Provider.findOne({ _id: providerID }).then((provider) => {
                                                                                            if (provider) {
                                                                                                if (provider.provider_type == Number(constant_json.PROVIDER_TYPE_NORMAL)) {

                                                                                                    var total_wallet_amount = utils.addWalletHistory(constant_json.PROVIDER_UNIQUE_NUMBER, provider.unique_id, provider._id, provider.country_id,
                                                                                                        provider.wallet_currency_code, trip.currencycode,
                                                                                                        1, trip.pay_to_provider, provider.wallet, constant_json.ADD_WALLET_AMOUNT, constant_json.SET_TRIP_PROFIT, "Profit Of This Trip : " + trip.unique_id);

                                                                                                    provider.wallet = total_wallet_amount;
                                                                                                    provider.save();
                                                                                                } else {
                                                                                                    Partner.findOne({ _id: trip.provider_type_id }).then((partner) => {

                                                                                                        var total_wallet_amount = utils.addWalletHistory(constant_json.PARTNER_UNIQUE_NUMBER, partner.unique_id, partner._id, partner.country_id,
                                                                                                            partner.wallet_currency_code, trip.currencycode,
                                                                                                            1, trip.pay_to_provider, partner.wallet, constant_json.ADD_WALLET_AMOUNT, constant_json.SET_TRIP_PROFIT, "Profit Of This Trip : " + trip.unique_id);

                                                                                                        partner.wallet = total_wallet_amount;
                                                                                                        partner.save();
                                                                                                    });
                                                                                                }

                                                                                                trip.is_provider_earning_set_in_wallet = true;
                                                                                                trip.provider_income_set_in_wallet = Math.abs(trip.pay_to_provider);
                                                                                            }
                                                                                        });
                                                                                    }

                                                                                    if (req.body.type !== "Admin") {
                                                                                        exports.trip_detail_notify(res, trip._id);
                                                                                        res.json({
                                                                                            success: true,
                                                                                            message: success_messages.MESSAGE_CODE_YOUR_TRIP_CANCELLED_SUCCESSFULLY,
                                                                                            is_pending_payments: trip.is_pending_payments,
                                                                                            is_trip_cancelled: trip.is_trip_cancelled,
                                                                                            cancellationCharges: cancellationCharges

                                                                                        });
                                                                                    }
                                                                                }, (err) => {
                                                                                    console.log(err);
                                                                                    res.json({
                                                                                        success: false,
                                                                                        error_code: error_message.ERROR_CODE_SOMETHING_WENT_WRONG
                                                                                    });
                                                                                });
                                                                            });
                                                                        }
                                                                    });

                                                                });

                                                            });

                                                        } else {
                                                            if (req.body.type !== "Admin") {
                                                                exports.trip_detail_notify(res, trip._id);
                                                                res.json({
                                                                    success: true,
                                                                    message: success_messages.MESSAGE_CODE_YOUR_TRIP_CANCELLED_SUCCESSFULLY
                                                                });
                                                            }
                                                        }

                                                    });
                                                } else {
                                                    if (req.body.type !== "Admin") {
                                                        exports.trip_detail_notify(res, trip._id);
                                                        res.json({
                                                            success: true,
                                                            message: success_messages.MESSAGE_CODE_YOUR_TRIP_CANCELLED_SUCCESSFULLY
                                                        });
                                                    }
                                                }
                                            }, (err) => {
                                                console.log(err);
                                                res.json({
                                                    success: false,
                                                    error_code: error_message.ERROR_CODE_SOMETHING_WENT_WRONG
                                                });
                                            });
                                        }
                                    } else {
                                        if (req.body.type !== "Admin") {
                                            exports.trip_detail_notify(res, trip._id);
                                            res.json({
                                                success: true,
                                                message: success_messages.ERROR_CODE_TRIP_IS_ALREADY_CANCELLED
                                            });
                                        }
                                    }

                                } else {
                                    exports.trip_detail_notify(res, trip._id);
                                    res.json({
                                        success: true,
                                        message: success_messages.ERROR_CODE_TRIP_ALREADY_COMPLETED
                                    });

                                }


                            } else {
                                res.json({
                                    success: false,
                                    error_code: error_message.ERROR_CODE_NO_TRIP
                                });
                            }
                        }, (err) => {
                            console.log(err);
                            res.json({
                                success: false,
                                error_code: error_message.ERROR_CODE_SOMETHING_WENT_WRONG
                            });
                        });
                    }
                } else {
                    if (req.body.type !== "Admin") {
                        res.json({ success: false, error_code: error_message.ERROR_CODE_USER_DETAIL_NOT_FOUND });
                    }
                }
            }, (err) => {
                console.log(err);
                res.json({
                    success: false,
                    error_code: error_message.ERROR_CODE_SOMETHING_WENT_WRONG
                });
            });
        } else {
            res.json({
                success: false,
                error_code: response.error_code,
                error_description: response.error_description
            });
        }
    });
};

exports.trip_cancel_by_provider = function (req, res, next) {

    utils.check_request_params(req.body, [{ name: 'provider_id', type: 'string' }, {
        name: 'trip_id',
        type: 'string'
    }], function (response) {
        if (response.success) {
            Provider.findOne({ _id: req.body.provider_id }).then((provider) => {
                if (provider) {
                    if (req.body.token != null && provider.token != req.body.token) {
                        res.json({ success: false, error_code: error_message.ERROR_CODE_INVALID_TOKEN });
                    } else {

                        Trip.findOne({
                            _id: req.body.trip_id,
                            is_trip_cancelled: 0,
                            is_trip_cancelled_by_provider: 0,
                            is_trip_cancelled_by_user: 0
                        }).then((trip) => {
                            if (trip) {

                                var city_timezone = trip.timezone;
                                var cancel_reason = req.body.cancel_reason;

                                User.findOne({ _id: trip.user_id }).then((user) => {

                                    trip.cancel_reason = cancel_reason;
                                    trip.is_trip_cancelled = 1;
                                    trip.is_trip_cancelled_by_provider = 1;
                                    trip.provider_trip_end_time = new Date();
                                    var complete_date_in_city_timezone = utils.get_date_now_at_city(new Date(), trip.timezone);
                                    var complete_date_tag = moment(moment(complete_date_in_city_timezone).startOf('day')).format(constant_json.DATE_FORMAT_MMM_D_YYYY);
                                    trip.complete_date_in_city_timezone = complete_date_in_city_timezone;
                                    trip.complete_date_tag = complete_date_tag;

                                    trip.save().then(() => {
                                        provider.is_available = 1;
                                        provider.cancelled_request = provider.cancelled_request + 1;
                                        var trips = [];
                                        // remove trip_id from array when cancelled by provider
                                        trips = provider.is_trip;
                                        var indexTrip = trips.indexOf(trip._id);
                                        if (indexTrip > -1) {
                                            trips.splice(indexTrip, 1);
                                        }

                                        provider.is_trip = trips;

                                        //provider.is_trip = [];
                                        provider.save();

                                        myAnalytics.insert_daily_provider_analytics(city_timezone, provider._id, TRIP_STATUS.PROVIDER_CANCELLED, null);
                                        utils.sendPushNotification(constant_json.USER_UNIQUE_NUMBER, user.device_type, user.device_token, push_messages.PUSH_CODE_FOR_TRIP_CANCELLED_BY_PROVIDER, constant_json.PUSH_NOTIFICATION_SOUND_FILE_IN_IOS);

                                        User_promo_use.findOne({ trip_id: trip._id }).then((userpromouse) => {
                                            if (userpromouse) {
                                                userpromouse.remove();
                                            }

                                        });
                                        Promo_Code.findOne({ _id: trip.promo_id }).then((promo_code) => {
                                            if (promo_code) {
                                                promo_code.user_used_promo = promo_code.user_used_promo - 1;
                                                promo_code.save();
                                            }
                                        });

                                        user.current_trip_id = null;
                                        user.save();
                                        exports.trip_detail_notify(res, trip._id);
                                        res.json({
                                            success: true,
                                            message: success_messages.MESSAGE_CODE_FOR_PROVIDER_YOUR_TRIP_CANCELLED_SUCCESSFULLY,
                                            is_trip_cancelled_by_provider: trip.is_trip_cancelled_by_provider

                                        });
                                    }, (err) => {
                                        console.log(err);
                                        res.json({
                                            success: false,
                                            error_code: error_message.ERROR_CODE_SOMETHING_WENT_WRONG
                                        });
                                    });
                                });
                            } else {
                                res.json({
                                    success: false,
                                    error_code: error_message.ERROR_CODE_TRIP_IS_ALREADY_CANCELLED
                                });
                            }
                        });
                    }
                } else {
                    res.json({ success: false, error_code: error_message.ERROR_CODE_PROVIDER_DETAIL_NOT_FOUND });

                }
            });
        } else {
            res.json({
                success: false,
                error_code: response.error_code,
                error_description: response.error_description
            });
        }
    });
};

exports.trip_cancel_by_admin = function (req, res, next) {

    utils.check_request_params(req.body, [{
        name: 'trip_id',
        type: 'string'
    }], function (response) {
        if (response.success) {

            Trip.findOne({
                _id: req.body.trip_id,
                is_trip_cancelled: 0,
                is_trip_cancelled_by_provider: 0,
                is_trip_cancelled_by_user: 0
            }).then((trip) => {
                if (trip) {
                    Provider.findOne({ _id: trip.confirmed_provider }).then((provider) => {

                        var city_timezone = trip.timezone;

                        User.findOne({ _id: trip.user_id }).then((user) => {
                            var trips = [];
                            if (provider) {
                                provider.is_available = 1;
                                //provider.is_trip = [];
                                // remove trip_id from array when cancelled by provider

                                if (provider.is_trip.length > 0) {
                                    trips = provider.is_trip;
                                    var indexTrip = trips.indexOf(trip._id);
                                    if (indexTrip > -1) {
                                        trips.splice(indexTrip, 1);
                                    }
                                }
                                provider.is_trip = trips;


                                provider.save();
                                utils.sendPushNotification(constant_json.PROVIDER_UNIQUE_NUMBER, provider.device_type, provider.device_token, push_messages.PUSH_CODE_FOR_TRIP_CANCELLED_BY_USER, constant_json.PUSH_NOTIFICATION_SOUND_FILE_IN_IOS);
                            }

                            Provider.update({ _id: { $in: trip.current_providers } }, { is_available: 1, is_trip: [] }, { multi: true }, function (error, providers_list) {

                            });

                            trip.cancel_reason = '';
                            trip.is_trip_cancelled = 1;
                            trip.provider_trip_end_time = new Date();
                            var complete_date_in_city_timezone = utils.get_date_now_at_city(new Date(), trip.timezone);
                            var complete_date_tag = moment(moment(complete_date_in_city_timezone).startOf('day')).format(constant_json.DATE_FORMAT_MMM_D_YYYY);
                            trip.complete_date_in_city_timezone = complete_date_in_city_timezone;
                            trip.complete_date_tag = complete_date_tag;

                            trip.save().then(() => {

                                // utils.sendPushNotification(constant_json.USER_UNIQUE_NUMBER, user.device_type, user.device_token, push_messages.PUSH_CODE_FOR_TRIP_CANCELLED_BY_PROVIDER, constant_json.PUSH_NOTIFICATION_SOUND_FILE_IN_IOS);
                                User_promo_use.findOne({ trip_id: trip._id }).then((userpromouse) => {
                                    if (userpromouse) {
                                        userpromouse.remove();
                                    }
                                });
                                Promo_Code.findOne({ _id: trip.promo_id }).then((promo_code) => {
                                    if (promo_code) {
                                        promo_code.user_used_promo = promo_code.user_used_promo - 1;
                                        promo_code.save();
                                    }
                                });

                                user.current_trip_id = null;
                                user.save();
                                message = admin_messages.success_message_trip_cancelled;
                                exports.trip_detail_notify(res, trip._id);
                                res.json({ success: true });
                                // res.json({
                                //     success: true,
                                //     message: success_messages.MESSAGE_CODE_FOR_PROVIDER_YOUR_TRIP_CANCELLED_SUCCESSFULLY,
                                //     is_trip_cancelled_by_provider: trip.is_trip_cancelled_by_provider

                                // });
                            }, (err) => {
                                console.log(err);
                                res.json({ success: true });
                                // res.json({
                                //     success: false,
                                //     error_code: error_message.ERROR_CODE_SOMETHING_WENT_WRONG
                                // });
                            });
                        });

                    });
                } else {
                    res.json({ success: true });
                    // res.json({
                    //     success: false,
                    //     error_code: error_message.ERROR_CODE_TRIP_IS_ALREADY_CANCELLED
                    // });
                }
            });

        } else {
            // res.json({
            //     success: false,
            //     error_code: response.error_code,
            //     error_description: response.error_description
            // });
        }
    });
};

exports.provider_set_trip_status = function (req, res) {

    utils.check_request_params(req.body, [{ name: 'provider_id', type: 'string' }, {
        name: 'trip_id',
        type: 'string'
    }, { name: 'is_provider_status', type: 'string' },
    { name: 'latitude', type: 'string' }, { name: 'longitude', type: 'string' }, { name: 'ismobile', type: 'string' }], function (response) {
        if (response.success) {
            Provider.findOne({ _id: req.body.provider_id }).then((provider) => {
                if (provider) {
                    // if (req.body.token != null && provider.token != req.body.token) {
                    //     res.json({ success: false, error_code: error_message.ERROR_CODE_INVALID_TOKEN });
                    // } else {
                    if (req.body.ismobile == "0") {
                        Trip.findOne(
                            { requsitionSysID: Number(req.body.trip_id), current_provider: req.body.provider_id }
                        ).then((trip) => {

                            if (trip) {
                                console.log(trip._id);
                                req.body.trip_id = trip._id;
                                if (trip.is_trip_cancelled == 0 && trip.is_trip_cancelled_by_provider == 0) {
                                    var is_provider_status = Number(req.body.is_provider_status);

                                    var now = new Date();
                                    if (is_provider_status == 6) {
                                        trip.provider_trip_start_time = now;
                                    }

                                    if (is_provider_status == 4) {
                                        trip.provider_arrived_time = now;
                                    }

                                    trip.is_provider_status = is_provider_status;
                                    trip.save().then(() => {
                                        TripLocation.findOne({ tripID: trip._id }).then((tripLocation) => {
                                            console.log(tripLocation);

                                            var latlong = [0, 0];
                                            latlong = [Number(req.body.latitude), Number(req.body.longitude)];
                                            switch (is_provider_status) {

                                                case 2:
                                                    tripLocation.providerStartTime = now;
                                                    tripLocation.providerStartLocation = latlong;
                                                    tripLocation.providerStartToStartTripLocations.push(latlong);
                                                    break;
                                                case 6:
                                                    tripLocation.startTripTime = now;
                                                    tripLocation.startTripLocation = latlong;
                                                    tripLocation.startTripToEndTripLocations.push(latlong);
                                                    break;
                                            }
                                            tripLocation.save();
                                        }, (err) => {
                                            console.log(err)
                                        });


                                        User.findOne({ _id: trip.user_id }).then((user) => {

                                            var device_token = user.device_token;
                                            var device_type = user.device_type;
                                            if (is_provider_status == 6) {
                                                EmergencyContactDetail.find({
                                                    user_id: trip.user_id,
                                                    is_always_share_ride_detail: 1
                                                }).then((emergencyContactDetails) => {
                                                    emergencyContactDetails.forEach(function (emergencyContactDetail) {
                                                        var phoneWithCode = emergencyContactDetail.phone;
                                                        if (setting_detail.sms_notification) {
                                                            utils.sendSmsForOTPVerificationAndForgotPassword(phoneWithCode, 7, [user.first_name + " " + user.last_name, provider.first_name + " " + provider.last_name, trip.source_address, trip.destination_address]);
                                                        }
                                                    });
                                                });
                                            }

                                            var value;
                                            var providerStatusCase = trip.is_provider_status;
                                            switch (providerStatusCase) {

                                                case 2:
                                                    value = push_messages.PUSH_CODE_FOR_PROVIDER_COMMING_YOUR_LOCATION;
                                                    break;
                                                case 4:
                                                    value = push_messages.PUSH_CODE_FOR_PROVIDER_ARRIVED;
                                                    break;
                                                case 6:
                                                    value = push_messages.PUSH_CODE_FOR_YOUR_TRIP_STARTED;
                                                    break;
                                            }
                                            if (providerStatusCase == 2 || providerStatusCase == 4 || providerStatusCase == 6) {
                                                utils.sendPushNotification(constant_json.USER_UNIQUE_NUMBER, device_type, device_token, value, constant_json.PUSH_NOTIFICATION_SOUND_FILE_IN_IOS);
                                            }
                                        });
                                        exports.trip_detail_notify(res, trip._id);
                                        res.json({
                                            success: true,
                                            message: success_messages.MESSAGE_CODE_FOR_PROVIDER_YOU_SET_TRIP_STATUS_SUCCESSFULLY,
                                            trip: trip
                                        });
                                    }, (err) => {
                                        console.log(err);
                                        res.json({
                                            success: false,
                                            error_code: error_message.ERROR_CODE_SOMETHING_WENT_WRONG
                                        });
                                    });

                                } else {
                                    res.json({
                                        success: false,
                                        error_code: error_message.ERROR_CODE_MISMATCH_PROVIDER_ID_OR_TRIP_ID
                                    });
                                }
                            } else {
                                res.json({ success: false, error_code: error_message.ERROR_CODE_NO_TRIP_FOUND });

                            }
                        }, (err) => {
                            console.log(err);
                            res.json({
                                success: false,
                                error_code: error_message.ERROR_CODE_SOMETHING_WENT_WRONG
                            });
                        });
                    } else {
                        Trip.findOne(
                            { _id: req.body.trip_id, current_provider: req.body.provider_id }
                        ).then((trip) => {
                            console.log("provider_set_trip_status is_provider_status 3277")
                            console.log(req.body.is_provider_status)
                            console.log(trip);
                            if (trip) {

                                if (trip.is_trip_cancelled == 0 && trip.is_trip_cancelled_by_provider == 0) {
                                    var is_provider_status = Number(req.body.is_provider_status);

                                    var now = new Date();
                                    if (is_provider_status == 6) {
                                        trip.provider_trip_start_time = now;
                                    }

                                    if (is_provider_status == 4) {
                                        trip.provider_arrived_time = now;
                                    }

                                    trip.is_provider_status = is_provider_status;
                                    trip.save().then(() => {
                                        TripLocation.findOne({ tripID: trip._id }).then((tripLocation) => {
                                            console.log("provider_set_trip_status tripLocation 3297 ")
                                            console.log(tripLocation);

                                            var latlong = [0, 0];
                                            latlong = [Number(req.body.latitude), Number(req.body.longitude)];
                                            switch (is_provider_status) {

                                                case 2:
                                                    tripLocation.providerStartTime = now;
                                                    tripLocation.providerStartLocation = latlong;
                                                    tripLocation.providerStartToStartTripLocations.push(latlong);
                                                    break;
                                                case 6:
                                                    tripLocation.startTripTime = now;
                                                    tripLocation.startTripLocation = latlong;
                                                    tripLocation.startTripToEndTripLocations.push(latlong);
                                                    break;
                                                    // add below condition on 23-2-2022 by monika
                                                case 9:
                                                    tripLocation.endTripTime = now;
                                                    tripLocation.endTripLocation = latlong;
                                                    tripLocation.startTripToEndTripLocations.push(latlong);
                                                    break;
                                            }
                                            tripLocation.save();
                                        }, (err) => {
                                            console.log("provider_set_trip_status tripLocation error 3316")
                                            console.log(err)
                                        });


                                        User.findOne({ _id: trip.user_id }).then((user) => {

                                            var device_token = user.device_token;
                                            var device_type = user.device_type;
                                            if (is_provider_status == 6) {
                                                EmergencyContactDetail.find({
                                                    user_id: trip.user_id,
                                                    is_always_share_ride_detail: 1
                                                }).then((emergencyContactDetails) => {
                                                    emergencyContactDetails.forEach(function (emergencyContactDetail) {
                                                        var phoneWithCode = emergencyContactDetail.phone;
                                                        if (setting_detail.sms_notification) {
                                                            utils.sendSmsForOTPVerificationAndForgotPassword(phoneWithCode, 7, [user.first_name + " " + user.last_name, provider.first_name + " " + provider.last_name, trip.source_address, trip.destination_address]);
                                                        }
                                                    });
                                                });
                                            }

                                            var value;
                                            var providerStatusCase = trip.is_provider_status;
                                            switch (providerStatusCase) {

                                                case 2:
                                                    value = push_messages.PUSH_CODE_FOR_PROVIDER_COMMING_YOUR_LOCATION;
                                                    break;
                                                case 4:
                                                    value = push_messages.PUSH_CODE_FOR_PROVIDER_ARRIVED;
                                                    break;
                                                case 6:
                                                    value = push_messages.PUSH_CODE_FOR_YOUR_TRIP_STARTED;
                                                    break;
                                            }
                                            if (providerStatusCase == 2 || providerStatusCase == 4 || providerStatusCase == 6) {
                                                utils.sendPushNotification(constant_json.USER_UNIQUE_NUMBER, device_type, device_token, value, constant_json.PUSH_NOTIFICATION_SOUND_FILE_IN_IOS);
                                            }
                                        });
                                        console.log("provider_set_trip_status Before 3357 ")
                                        exports.trip_detail_notify(res, trip._id);
                                        console.log("provider_set_trip_status After 3359 ")
                                        res.json({
                                            success: true,
                                            message: success_messages.MESSAGE_CODE_FOR_PROVIDER_YOU_SET_TRIP_STATUS_SUCCESSFULLY,
                                            trip: trip
                                        });
                                    }, (err) => {
                                        console.log("provider_set_trip_status trip save error 3364")
                                        console.log(err);
                                        res.json({
                                            success: false,
                                            error_code: error_message.ERROR_CODE_SOMETHING_WENT_WRONG
                                        });
                                    });

                                } else {
                                    res.json({
                                        success: false,
                                        error_code: error_message.ERROR_CODE_MISMATCH_PROVIDER_ID_OR_TRIP_ID
                                    });
                                }
                            } else {
                                console.log("provider_set_trip_status trip find err 3382")
                                res.json({ success: false, error_code: error_message.ERROR_CODE_NO_TRIP_FOUND });

                            }
                        }, (err) => {
                            console.log("provider_set_trip_status trip find err 3386")
                            console.log(err);
                            res.json({
                                success: false,
                                error_code: error_message.ERROR_CODE_SOMETHING_WENT_WRONG
                            });
                        });
                    }
                    //}
                } else {
                    console.log("provider_set_trip_status is_provider_status 3395")
                    res.json({ success: false, error_code: error_message.ERROR_CODE_PROVIDER_DETAIL_NOT_FOUND });

                }
            }, (err) => {
                console.log("provider_set_trip_status something went wrong 3400")
                console.log(err);
                res.json({
                    success: false,
                    error_code: error_message.ERROR_CODE_SOMETHING_WENT_WRONG
                });
            });
        } else {
            console.log("provider_set_trip_status error_code 3408")
            res.json({
                success: false,
                error_code: response.error_code,
                error_description: response.error_description
            });
        }
    });
};


exports.check_destination = function (req, res, next) {

    utils.check_request_params(req.body, [{ name: 'provider_id', type: 'string' }, {
        name: 'trip_id',
        type: 'string'
    }], function (response) {
        if (response.success) {
            var geo = false;
            var geo2 = false
            var zone1, zone2, k = 0;
            Provider.findOne({ _id: req.body.provider_id }).then((provider) => {
                if (provider) {
                    if (req.body.token != null && provider.token != req.body.token) {
                        res.json({ success: false, error_code: error_message.ERROR_CODE_INVALID_TOKEN });
                    } else {
                        Trip.findOne({ _id: req.body.trip_id }).then((trip) => {
                            if (trip) {
                                Citytype.findOne({ _id: trip.service_type_id }).then((citytype) => {
                                    if (citytype) {
                                        City.findOne({ _id: citytype.cityid, zone_business: true }).then((city) => {

                                            if (city) {
                                                CityZone.find({ cityid: citytype.cityid }).then((cityzone) => {

                                                    if (citytype.is_zone == 1 && cityzone !== null && cityzone.length > 0) {

                                                        var zone_count = cityzone.length;
                                                        cityzone.forEach(function (cityzoneDetail) {

                                                            geo = geolib.isPointInside(
                                                                {
                                                                    latitude: trip.sourceLocation[0],
                                                                    longitude: trip.sourceLocation[1]
                                                                },
                                                                cityzoneDetail.kmlzone
                                                            );
                                                            geo2 = geolib.isPointInside(
                                                                {
                                                                    latitude: req.body.latitude,
                                                                    longitude: req.body.longitude
                                                                },
                                                                cityzoneDetail.kmlzone
                                                            );
                                                            if (geo) {
                                                                zone1 = cityzoneDetail.id;
                                                            }
                                                            if (geo2) {
                                                                zone2 = cityzoneDetail.id;
                                                            }
                                                            k++;
                                                            if (k == zone_count) {

                                                                ZoneValue.findOne({
                                                                    service_type_id: trip.service_type_id,
                                                                    $or: [{ from: zone1, to: zone2 }, {
                                                                        from: zone2,
                                                                        to: zone1
                                                                    }]
                                                                }).then((zonevalue) => {

                                                                    if (zonevalue) {
                                                                        trip.trip_type = constant_json.TRIP_TYPE_ZONE;
                                                                        trip.trip_type_amount = (zonevalue.amount).toFixed(2);
                                                                        trip.save(function (err) {
                                                                            res.json({ success: true, zone: '' });
                                                                        });
                                                                    } else {
                                                                        airport(citytype.cityid, citytype, trip, req.body, res);
                                                                    }
                                                                })
                                                            }
                                                        });
                                                    } else {
                                                        airport(citytype.cityid, citytype, trip, req.body, res);
                                                    }
                                                });
                                            } else {
                                                airport(citytype.cityid, citytype, trip, req.body, res);
                                            }
                                        }, (err) => {
                                            console.log(err);
                                            res.json({
                                                success: false,
                                                error_code: error_message.ERROR_CODE_SOMETHING_WENT_WRONG
                                            });
                                        });
                                    } else {
                                        res.json({
                                            success: false,
                                            error_code: error_message.ERROR_CODE_NO_CITY_LIST_FOUND
                                        });
                                    }
                                }, (err) => {
                                    console.log(err);
                                    res.json({
                                        success: false,
                                        error_code: error_message.ERROR_CODE_SOMETHING_WENT_WRONG
                                    });
                                });
                            } else {
                                res.json({ success: false, error_code: error_message.ERROR_CODE_TRIP_NOT_FOUND });
                            }
                        }, (err) => {
                            console.log(err);
                            res.json({
                                success: false,
                                error_code: error_message.ERROR_CODE_SOMETHING_WENT_WRONG
                            });
                        });
                    }
                } else {
                    res.json({ success: false, error_code: error_message.ERROR_CODE_PROVIDER_DETAIL_NOT_FOUND });
                }
            }, (err) => {
                console.log(err);
                res.json({
                    success: false,
                    error_code: error_message.ERROR_CODE_SOMETHING_WENT_WRONG
                });
            });
        } else {
            res.json({
                success: false,
                error_code: response.error_code,
                error_description: response.error_description
            });
        }
    });
}

function airport(cityid, citytype, trip, body, res) {
    var dest_airport, pickup_airport, airport;
    Airport.find({ city_id: cityid }).then((airport_data) => {

        if (airport_data != null && airport_data.length > 0) {
            var k = 0;
            City.findOne({ '_id': cityid, airport_business: true }).then((city) => {
                if (city) {
                    airport_data.forEach(function (airportDetail, airport_index) {

                        if (airport == undefined) {
                            // pickup_airport = utils.getDistanceFromTwoLocation(trip.sourceLocation, airportDetail.airportLatLong);
                            // dest_airport = utils.getDistanceFromTwoLocation([body.latitude, body.longitude], airportDetail.airportLatLong);

                            var pickup_airport = geolib.isPointInside(
                                {
                                    latitude: trip.sourceLocation[0],
                                    longitude: trip.sourceLocation[1]
                                },
                                airportDetail.kmlzone
                            );

                            var dest_airport = geolib.isPointInside(
                                {
                                    latitude: body.latitude,
                                    longitude: body.longitude
                                },
                                airportDetail.kmlzone
                            );

                            if (pickup_airport) {
                                city_distance = utils.getDistanceFromTwoLocation([body.latitude, body.longitude], city.cityLatLong);
                                if (city_distance < city.cityRadius) {

                                    AirportCity.findOne({
                                        airport_id: airportDetail._id,
                                        service_type_id: citytype._id
                                    }).then((airportcity) => {

                                        if (airportcity !== null && airportcity.price > 0) {
                                            airport = airportDetail._id;
                                            trip.trip_type = constant_json.TRIP_TYPE_AIRPORT;
                                            trip.trip_type_amount = (airportcity.price).toFixed(2);
                                            trip.save().then(() => {
                                                res.json({ success: true, airport: '' });
                                            });
                                        } else if (airport_data.length - 1 == k) {
                                            cityCheck(cityid, citytype, trip, body, res)
                                        } else {
                                            k++;
                                        }
                                    })
                                } else if (airport_data.length - 1 == k) {
                                    cityCheck(cityid, citytype, trip, body, res)
                                } else {
                                    k++;
                                }
                            } else if (dest_airport) {
                                city_distance = utils.getDistanceFromTwoLocation(trip.sourceLocation, city.cityLatLong);
                                if (city_distance < city.cityRadius) {


                                    AirportCity.findOne({
                                        airport_id: airportDetail._id,
                                        service_type_id: citytype._id
                                    }).then((airportcity) => {

                                        if (airportcity !== null && airportcity.price > 0) {
                                            airport = airportDetail._id;
                                            trip.trip_type = constant_json.TRIP_TYPE_AIRPORT;
                                            trip.trip_type_amount = (airportcity.price).toFixed(2);
                                            trip.save().then(() => {
                                                res.json({ success: true, airport: '' });
                                            });
                                        } else if (airport_data.length - 1 == k) {
                                            cityCheck(cityid, citytype, trip, body, res)
                                        } else {
                                            k++;
                                        }
                                    })
                                } else if (airport_data.length - 1 == k) {
                                    cityCheck(cityid, citytype, trip, body, res)
                                } else {
                                    k++;
                                }
                            } else if (airport_data.length - 1 == k && airport == undefined) {
                                cityCheck(cityid, citytype, trip, body, res)
                            } else {
                                k++;
                            }
                        }
                    });
                } else {
                    cityCheck(cityid, citytype, trip, body, res)
                }
            }, (err) => {
                cityCheck(cityid, citytype, trip, body, res)
            })
        } else {
            cityCheck(cityid, citytype, trip, body, res)
        }
    }, (err) => {
        cityCheck(cityid, citytype, trip, body, res)
    });

}

function cityCheck(cityid, citytype, trip, body, res) {

    var flag = 0;
    var k = 0;
    City.findOne({ '_id': cityid, city_business: true }).then((city) => {
        if (city) {
            CitytoCity.find({ city_id: cityid, service_type_id: citytype._id, destination_city_id: { $in: city.destination_city } }).then((citytocity) => {


                if (citytocity !== null && citytocity.length > 0) {

                    citytocity.forEach(function (citytocity_detail, citytocity_index) {

                        City.findById(citytocity_detail.destination_city_id).then((city_detail) => {
                            if (flag == 0) {
                                var city_radius = city_detail.cityRadius;
                                var destination_city_radius = utils.getDistanceFromTwoLocation([body.latitude, body.longitude], city_detail.cityLatLong);

                                var inside_city;
                                if (city_detail.city_locations && city_detail.city_locations.length > 2) {
                                    inside_city = geolib.isPointInside(
                                        {
                                            latitude: body.latitude,
                                            longitude: body.longitude
                                        },
                                        city_detail.city_locations
                                    );
                                }

                                if (citytocity_detail.price > 0 && ((!city_detail.is_use_city_boundary && city_radius > destination_city_radius) || (city_detail.is_use_city_boundary && inside_city))) {

                                    trip.trip_type = constant_json.TRIP_TYPE_CITY;
                                    trip.trip_type_amount = (citytocity_detail.price).toFixed(2);
                                    flag = 1;
                                    trip.save().then(() => {
                                        res.json({ success: true, city: '' })
                                    });
                                } else if (citytocity.length - 1 == k) {
                                    res.json({ success: true })
                                } else {
                                    k++;
                                }
                            }
                        });
                    });
                } else {
                    res.json({ success: true })
                }
            });
        } else {
            res.json({ success: true })
        }
    }, (err) => {
        console.log(err);
        res.json({
            success: false,
            error_code: error_message.ERROR_CODE_SOMETHING_WENT_WRONG
        });
    });
}

exports.provider_complete_trip = function (req, res) {

    utils.check_request_params(req.body, [{ name: 'trip_id', type: 'string' }, { name: 'provider_id', type: 'string' }], function (response) {
        if (response.success) {
            Provider.findOne({ _id: req.body.provider_id }).then((provider) => {
                if (provider) {
                    if (req.body.token != null && provider.token != req.body.token) {
                        res.json({ success: false, error_code: error_message.ERROR_CODE_INVALID_TOKEN });
                    } else {
                        Trip.findOne({
                            _id: req.body.trip_id,
                            confirmed_provider: req.body.provider_id,
                            is_trip_completed: 0,
                            is_trip_end: 0
                        }).then((trip) => {
                            if (trip) {
                                if (trip.is_trip_cancelled == 0 && trip.is_trip_cancelled_by_user == 0 && trip.is_trip_cancelled_by_provider == 0) {

                                    var city_timezone = trip.timezone;
                                    User.findOne({ _id: trip.user_id }).then((user) => {

                                        var device_token = user.device_token;
                                        var device_type = user.device_type;

                                        var total_distance = Number((trip.total_distance).toFixed(2));
                                        var total_time = Number((trip.total_time).toFixed(2));
                                        var total_waiting_time = 0;
                                        var distance_cost = 0;
                                        var time_cost = 0;
                                        var waiting_time_cost = 0;
                                        var total_service_fees = 0;
                                        var tax_fee = 0;
                                        var provider_tax_fee = 0;
                                        var total_after_tax_fees = 0;
                                        var surge_fee = 0;
                                        var total_after_surge_fees = 0;
                                        var promo_payment = 0;
                                        var total_after_promo_payment = 0;

                                        var promo_value = 0;

                                        var total = 0;
                                        var is_min_fare_used = 0;
                                        var user_tax_fee = 0;
                                        var payment_mode = trip.payment_mode;
                                        var is_surge_hours = trip.is_surge_hours;
                                        var total_time_end = 0;
                                        var now = new Date();
                                        var dateNow = new Date();
                                        total_time_end = utils.getTimeDifferenceInMinute(dateNow, trip.provider_trip_start_time);
                                        if (total_time_end > total_time) {
                                            total_time = total_time_end;
                                        }

                                        if (total_time < 0) {
                                            total_time = 0;
                                        }
                                        trip.total_time = total_time;

                                        total_waiting_time = utils.getTimeDifferenceInMinute(trip.provider_trip_start_time, trip.provider_arrived_time);
                                        if (total_waiting_time < 0) {
                                            total_waiting_time = 0;
                                        }

                                        TripLocation.findOne({ tripID: req.body.trip_id }).then((tripLocation) => {
                                            tripLocation.endTripTime = now;
                                            if (req.body.latitude && req.body.longitude) {
                                                tripLocation.startTripToEndTripLocations.push([tripLocation.startTripToEndTripLocations[tripLocation.startTripToEndTripLocations.length - 1][0], tripLocation.startTripToEndTripLocations[tripLocation.startTripToEndTripLocations.length - 1][1]]);
                                            } else {
                                                req.body.latitude = tripLocation.startTripToEndTripLocations[tripLocation.startTripToEndTripLocations.length - 1][0]
                                                req.body.longitude = tripLocation.startTripToEndTripLocations[tripLocation.startTripToEndTripLocations.length - 1][1]
                                            }
                                            tripLocation.endTripLocation = [req.body.latitude, req.body.longitude];

                                            var url = "https://maps.googleapis.com/maps/api/geocode/json?latlng=" + req.body.latitude + "," + req.body.longitude + "&key=" + setting_detail.web_app_google_key;
                                            var request_data = require('request');
                                            if (!req.body.destination_address) {
                                                request_data(url, function (error, response, body) {
                                                    if (body.status == 'OK') {
                                                        req.body.destination_address = body.results[0].formatted_address;
                                                    }
                                                });
                                            }
                                            tripLocation.googlePathStartLocationToPickUpLocation = "";
                                            tripLocation.googlePickUpLocationToDestinationLocation = "";
                                            tripLocation.actual_startTripToEndTripLocations = tripLocation.startTripToEndTripLocations;
                                            tripLocation.save().then(() => {

                                                var index = tripLocation.index_for_that_covered_path_in_google;
                                                var startTripToEndTripLocations = tripLocation.startTripToEndTripLocations;
                                                var size = startTripToEndTripLocations.length;
                                                var gap = 95;
                                                var start_index = index * gap;
                                                var end_index = size;
                                                start_index--;
                                                if (start_index < 0) {
                                                    start_index = 0;
                                                }
                                                var locations = [];

                                                for (; start_index < end_index; start_index++) {
                                                    locations.push(startTripToEndTripLocations[start_index]);
                                                }

                                                utils.getSmoothPath(locations, function (getSmoothPathresponse) {

                                                    utils.bendAndSnap(getSmoothPathresponse, locations.length, function (response) {

                                                        if (response) {
                                                            var index = tripLocation.index_for_that_covered_path_in_google;
                                                            var google_start_trip_to_end_trip_locations = tripLocation.google_start_trip_to_end_trip_locations;
                                                            google_start_trip_to_end_trip_locations = google_start_trip_to_end_trip_locations.concat(response.temp_array);
                                                            tripLocation.google_start_trip_to_end_trip_locations = google_start_trip_to_end_trip_locations;
                                                            var google_total_distance = +tripLocation.google_total_distance + +response.distance;
                                                            tripLocation.google_total_distance = google_total_distance;
                                                            index++;
                                                            tripLocation.index_for_that_covered_path_in_google = index;
                                                            tripLocation.startTripToEndTripLocations = tripLocation.google_start_trip_to_end_trip_locations;
                                                            tripLocation.save();

                                                            var distance_diff = total_distance - google_total_distance;
                                                            if (distance_diff > 0.5 || distance_diff < -0.5) {
                                                                total_distance = (google_total_distance).toFixed(2);

                                                                if (trip.unit == 0) { /// 0 = mile
                                                                    total_distance = total_distance * 0.621371;
                                                                }

                                                                trip.total_distance = total_distance;
                                                                // trip.save();
                                                            }
                                                        }

                                                        Provider.findOne({ _id: req.body.provider_id }).then((provider) => {
                                                            City.findOne({ _id: trip.city_id }).then((city) => {
                                                                provider.providerLocation = [req.body.latitude, req.body.longitude];
                                                                provider.bearing = req.body.bearing;
                                                                provider.save();

                                                                Trip_Service.findOne({ _id: trip.trip_service_city_type_id }).then((tripservice) => {

                                                                    var surge_multiplier = 0;
                                                                    var min_fare = 0;
                                                                    var base_price = 0;
                                                                    var base_price_distance = 0;
                                                                    var tax = 0;
                                                                    var user_miscellaneous_fee = 0;
                                                                    var provider_miscellaneous_fee = 0;
                                                                    var user_tax = 0;
                                                                    var provider_tax = 0;
                                                                    var min_fare = 0;
                                                                    var provider_profit = 0;
                                                                    var price_per_unit_distance = 0;
                                                                    var price_for_total_time = 0;
                                                                    var price_for_waiting_time = 0;
                                                                    var waiting_time_start_after_minute = 0;
                                                                    var base_price_time = 0;
                                                                    ///////////////// Distance cost and Time cost calculation /////
                                                                    trip.is_provider_status = 9;
                                                                    // DISTANCE CALCULATIONS
                                                                    trip.destination_address = req.body.destination_address;
                                                                    trip.destinationLocation = [req.body.latitude, req.body.longitude];
                                                                    trip.provider_trip_end_time = now;
                                                                    // trip.save();
                                                                    var toll_amount = req.body.toll_amount;

                                                                    if (toll_amount == undefined) {
                                                                        toll_amount = 0;
                                                                    }

                                                                    if (trip.unit == 0) {
                                                                        total_distance = total_distance * 0.621371;
                                                                    }

                                                                    // if (city && setting_detail.is_toll) {
                                                                    //     var path_points = tripLocation.actual_startTripToEndTripLocations;
                                                                    //     var location_size = path_points.length;

                                                                    //     if (city.city_tolls != undefined && city.city_tolls.length > 0 && location_size > 1) {
                                                                    //         var size = city.city_tolls.length;

                                                                    //         var pre_point = path_points[0];
                                                                    //         var point = [];
                                                                    //         for (i = 0; i < size; i++) {
                                                                    //             if (trip.tolls.indexOf(city.city_tolls[i]._id) < 0) {
                                                                    //                 for (var j = 0; j < location_size; j++) {
                                                                    //                     point = path_points[j];
                                                                    //                     var is_pass_though_toll = utils.is_pass_though_toll(city.city_tolls[i].locations, [pre_point, point]);
                                                                    //                     if (is_pass_though_toll && trip.tolls.indexOf(city.city_tolls[i]._id)) {
                                                                    //                         trip.tolls.push(city.city_tolls[i]._id);
                                                                    //                         toll_amount = +toll_amount + +city.city_tolls[i].price;
                                                                    //                     }
                                                                    //                     pre_point = point;
                                                                    //                 }
                                                                    //             }
                                                                    //         }
                                                                    //     }
                                                                    // }

                                                                    var trip_type_amount = trip.trip_type_amount;
                                                                    provider_miscellaneous_fee = tripservice.provider_miscellaneous_fee;

                                                                    provider_tax = tripservice.provider_tax;

                                                                    provider_profit = tripservice.provider_profit;

                                                                    if (trip.is_fixed_fare && trip.fixed_price > 0) {
                                                                        total_after_surge_fees = trip.fixed_price;
                                                                    } else if (trip.trip_type == constant_json.TRIP_TYPE_AIRPORT) {
                                                                        total_after_surge_fees = trip_type_amount;
                                                                    } else if (trip.trip_type == constant_json.TRIP_TYPE_ZONE) {
                                                                        total_after_surge_fees = trip_type_amount;
                                                                    } else if (trip.trip_type == constant_json.TRIP_TYPE_CITY) {
                                                                        total_after_surge_fees = trip_type_amount;
                                                                    } else if (trip.car_rental_id) {
                                                                        base_price = tripservice.base_price;
                                                                        base_price_distance = tripservice.base_price_distance;
                                                                        base_price_time = tripservice.base_price_time;
                                                                        price_per_unit_distance = tripservice.price_per_unit_distance;
                                                                        price_for_total_time = tripservice.price_for_total_time;
                                                                        if (total_distance <= base_price_distance) {
                                                                            distance_cost = 0;
                                                                        } else {
                                                                            distance_cost = Number(((total_distance - base_price_distance) * price_per_unit_distance).toFixed(2));
                                                                        }

                                                                        trip.distance_cost = distance_cost;
                                                                        // TIME CALCULATIONS
                                                                        if (time_cost < base_price_time) {
                                                                            time_cost = 0;
                                                                        } else {
                                                                            time_cost = (total_time - base_price_time) * price_for_total_time;
                                                                        }
                                                                        time_cost = Number((time_cost).toFixed(2));
                                                                        trip.time_cost = time_cost;

                                                                        total_waiting_time = total_waiting_time - waiting_time_start_after_minute;
                                                                        trip.waiting_time_cost = 0;

                                                                        trip.total_waiting_time = total_waiting_time;


                                                                        total_service_fees = +base_price + +distance_cost + +time_cost + +waiting_time_cost;
                                                                        trip.total_service_fees = total_service_fees;

                                                                        tax_fee = 0;
                                                                        user_tax_fee = 0;

                                                                        trip.tax_fee = tax_fee;
                                                                        trip.user_miscellaneous_fee = user_miscellaneous_fee;

                                                                        trip.user_tax_fee = user_tax_fee;
                                                                        total_after_tax_fees = +total_service_fees + +tax_fee;
                                                                        trip.total_after_tax_fees = total_after_tax_fees;
                                                                        total_after_surge_fees = total_after_tax_fees;

                                                                    } else {

                                                                        // surge_multiplier = tripservice.surge_multiplier;
                                                                        if (trip.surge_multiplier) {
                                                                            surge_multiplier = trip.surge_multiplier;
                                                                        }
                                                                        min_fare = tripservice.min_fare;
                                                                        base_price = tripservice.base_price;
                                                                        base_price_distance = tripservice.base_price_distance;
                                                                        tax = tripservice.tax;
                                                                        user_miscellaneous_fee = tripservice.user_miscellaneous_fee;
                                                                        user_tax = tripservice.user_tax;

                                                                        min_fare = tripservice.min_fare;

                                                                        price_per_unit_distance = tripservice.price_per_unit_distance;
                                                                        price_for_total_time = tripservice.price_for_total_time;
                                                                        price_for_waiting_time = tripservice.price_for_waiting_time;
                                                                        waiting_time_start_after_minute = tripservice.waiting_time_start_after_minute;

                                                                        if (total_distance <= base_price_distance) {
                                                                            distance_cost = 0;
                                                                        } else {
                                                                            distance_cost = Number(((total_distance - base_price_distance) * price_per_unit_distance).toFixed(2));
                                                                        }
                                                                        trip.distance_cost = distance_cost;
                                                                        // TIME CALCULATIONS
                                                                        if (time_cost < 0) {
                                                                            time_cost = 0;
                                                                        }
                                                                        time_cost = total_time * price_for_total_time;
                                                                        time_cost = Number((time_cost).toFixed(2));
                                                                        trip.time_cost = time_cost;
                                                                        //  WAITING TIME CALCULATIONS
                                                                        total_waiting_time = total_waiting_time - waiting_time_start_after_minute;
                                                                        if (total_waiting_time < 0) {
                                                                            total_waiting_time = 0;
                                                                        }

                                                                        if (total_waiting_time > 0) {

                                                                            waiting_time_cost = Number((total_waiting_time * price_for_waiting_time).toFixed(2));
                                                                        }


                                                                        trip.waiting_time_cost = waiting_time_cost;
                                                                        trip.total_waiting_time = total_waiting_time;


                                                                        total_service_fees = +base_price + +distance_cost + +time_cost + +waiting_time_cost;
                                                                        trip.total_service_fees = total_service_fees;

                                                                        tax_fee = Number((tax * 0.01 * total_service_fees).toFixed(2));
                                                                        user_tax_fee = Number((user_tax * 0.01 * total_service_fees).toFixed(2));

                                                                        trip.tax_fee = tax_fee;
                                                                        trip.user_miscellaneous_fee = user_miscellaneous_fee;

                                                                        trip.user_tax_fee = user_tax_fee;
                                                                        total_after_tax_fees = +total_service_fees + +tax_fee;
                                                                        trip.total_after_tax_fees = total_after_tax_fees;

                                                                        if (is_surge_hours == constant_json.YES) {
                                                                            surge_fee = Number((total_after_tax_fees * (surge_multiplier - 1)).toFixed(2));
                                                                            trip.surge_fee = surge_fee;
                                                                            total_after_surge_fees = total_after_tax_fees + surge_fee;
                                                                            total_after_surge_fees = Number((total_after_surge_fees).toFixed(2));
                                                                        } else {
                                                                            surge_fee = 0;
                                                                            trip.surge_fee = surge_fee;
                                                                            total_after_surge_fees = total_after_tax_fees;
                                                                            total_after_surge_fees = Number((total_after_surge_fees).toFixed(2));
                                                                        }


                                                                        if (total_after_surge_fees < min_fare) {
                                                                            total_after_surge_fees = min_fare;
                                                                            is_min_fare_used = 1;
                                                                        }
                                                                        trip.is_min_fare_used = is_min_fare_used;

                                                                    }

                                                                    trip.total_after_surge_fees = total_after_surge_fees;

                                                                    ///////////////////////// FOR INVOICE //////////////////////////
                                                                    var current_rate = 1;
                                                                    var countryCurrencyCode = trip.currencycode;
                                                                    var adminCurrencyCode = trip.currencycode;
                                                                    var adminCurrency = trip.currency;

                                                                    adminCurrencyCode = setting_detail.adminCurrencyCode;
                                                                    adminCurrency = setting_detail.adminCurrency;

                                                                    utils.getCurrencyConvertRate(1, countryCurrencyCode, adminCurrencyCode, function (response) {

                                                                        if (response.success) {
                                                                            current_rate = response.current_rate;
                                                                        } else {
                                                                            current_rate = 1;
                                                                        }

                                                                        trip.current_rate = current_rate;

                                                                        Promo_Code.findOne({ _id: trip.promo_id }).then((promocode) => {

                                                                            if (trip.promo_id != null && promocode) {
                                                                                var promo_type = promocode.code_type;
                                                                                promo_value = promocode.code_value;
                                                                                if (promo_type == 1) { ///abs
                                                                                    promo_payment = promo_value;
                                                                                } else { // perc
                                                                                    promo_payment = Number((promo_value * 0.01 * total_after_surge_fees).toFixed(2));
                                                                                }


                                                                                total_after_promo_payment = total_after_surge_fees - promo_payment;


                                                                                if (total_after_promo_payment < 0) {
                                                                                    total_after_promo_payment = 0;
                                                                                    promo_payment = total_after_surge_fees;
                                                                                }


                                                                                User_promo_use.findOne({ trip_id: trip._id }, function (err, userpromouse) {
                                                                                    userpromouse.user_used_amount = promo_payment;
                                                                                    userpromouse.user_used_amount_in_admin_currency = promo_payment * current_rate;
                                                                                    userpromouse.save();
                                                                                });
                                                                            } else {
                                                                                promo_payment = 0;
                                                                                total_after_promo_payment = total_after_surge_fees;
                                                                            }


                                                                            total_after_promo_payment = Number((total_after_promo_payment).toFixed(2));
                                                                            trip.promo_payment = promo_payment;
                                                                            trip.total_after_promo_payment = total_after_promo_payment;

                                                                            trip.total_after_referral_payment = total_after_promo_payment;
                                                                            ////////ENTRY IN PROVIDER EARNING TABLE ///////////
                                                                            var service_total_in_admin_currency = Number((total_after_surge_fees * current_rate).toFixed(3));

                                                                            var provider_service_fees = Number((total_after_surge_fees * provider_profit * 0.01).toFixed(2));


                                                                            provider_tax_fee = Number((provider_tax * 0.01 * provider_service_fees).toFixed(2));
                                                                            trip.provider_miscellaneous_fee = provider_miscellaneous_fee;
                                                                            trip.provider_tax_fee = provider_tax_fee;
                                                                            provider_service_fees = provider_service_fees + +toll_amount - provider_miscellaneous_fee - provider_tax_fee;

                                                                            var provider_service_fees_in_admin_currency = Number((provider_service_fees * current_rate).toFixed(3));

                                                                            var promo_referral_amount = promo_payment;
                                                                            total = total_after_promo_payment;

                                                                            total = +total + +toll_amount + +user_miscellaneous_fee + +user_tax_fee;
                                                                            total = Number((total).toFixed(2));
                                                                            var total_in_admin_currency = Number((total * current_rate).toFixed(3));
                                                                            trip.base_distance_cost = base_price;
                                                                            trip.admin_currency = adminCurrency;
                                                                            trip.admin_currencycode = adminCurrencyCode;
                                                                            trip.provider_service_fees = provider_service_fees;
                                                                            trip.total_in_admin_currency = total_in_admin_currency;
                                                                            trip.service_total_in_admin_currency = service_total_in_admin_currency;
                                                                            trip.provider_service_fees_in_admin_currency = provider_service_fees_in_admin_currency;
                                                                            trip.promo_referral_amount = promo_referral_amount;
                                                                            trip.toll_amount = toll_amount;
                                                                            trip.total = total;


                                                                            utils.getCurrencyConvertRate(1, user.wallet_currency_code, countryCurrencyCode, function (response) {
                                                                                var wallet_current_rate = 1;
                                                                                if (response.success) {
                                                                                    wallet_current_rate = response.current_rate;
                                                                                }

                                                                                trip.wallet_current_rate = wallet_current_rate;

                                                                                trip.save().then(() => {
                                                                                    if (trip.is_tip == true) {
                                                                                        utils.sendPushNotification(constant_json.USER_UNIQUE_NUMBER, device_type, device_token, push_messages.PUSH_CODE_FOR_WAITING_FOR_TIP, constant_json.PUSH_NOTIFICATION_SOUND_FILE_IN_IOS);
                                                                                    }
                                                                                    myAnalytics.insert_daily_provider_analytics(city_timezone, provider._id, TRIP_STATUS.TRIP_COMPLETED, null);
                                                                                    exports.trip_detail_notify(res, trip._id);
                                                                                    res.json({
                                                                                        success: true,
                                                                                        message: success_messages.MESSAGE_CODE_FOR_PROVIDER_YOUR_TRIP_COMPLETED_SUCCESSFULLY,
                                                                                        trip: trip,
                                                                                        tripservice: tripservice
                                                                                    });

                                                                                }, (err) => {
                                                                                    console.log(err);
                                                                                    res.json({
                                                                                        success: false,
                                                                                        error_code: error_message.ERROR_CODE_SOMETHING_WENT_WRONG
                                                                                    });
                                                                                });
                                                                            });

                                                                        });

                                                                    });
                                                                });
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                } else {
                                    exports.trip_detail_notify(res, trip._id);
                                    res.json({
                                        success: true,
                                        message: success_messages.ERROR_CODE_TRIP_IS_ALREADY_CANCELLED
                                    });
                                }

                            } else {
                                res.json({ success: false, error_code: error_message.ERROR_CODE_NO_TRIP_FOUND });
                            }
                        }, (err) => {
                            console.log(err);
                            res.json({
                                success: false,
                                error_code: error_message.ERROR_CODE_SOMETHING_WENT_WRONG
                            });
                        });
                    }
                } else {
                    res.json({ success: false, error_code: error_message.ERROR_CODE_PROVIDER_DETAIL_NOT_FOUND });
                }
            }, (err) => {
                console.log(err);
                res.json({
                    success: false,
                    error_code: error_message.ERROR_CODE_SOMETHING_WENT_WRONG
                });
            });
        } else {
            res.json({
                success: false,
                error_code: response.error_code,
                error_description: response.error_description
            });
        }
    });

};

exports.pay_payment = function (req, res, next) {

    utils.check_request_params(req.body, [{ name: 'trip_id', type: 'string' }], function (response) {
        if (response.success) {
            var trip_id = "";
            if (res == null) {
                trip_id = next;
            } else {
                trip_id = req.body.trip_id;
            }

            Trip.findOne({ _id: trip_id, is_trip_end: 0 }).then((trip) => {
                if (trip) {
                    City.findOne({ _id: trip.city_id }).then((city) => {
                        var is_provider_earning_set_in_wallet_on_other_payment = false;
                        var is_provider_earning_set_in_wallet_on_cash_payment = false;
                        if (city) {
                            is_provider_earning_set_in_wallet_on_other_payment = city.is_provider_earning_set_in_wallet_on_other_payment;
                            is_provider_earning_set_in_wallet_on_cash_payment = city.is_provider_earning_set_in_wallet_on_cash_payment;
                        }

                        var tip_amount;
                        var payment_id;

                        if (res == null) {
                            tip_amount = 0;
                            payment_id = trip.payment_id;
                        } else {
                            tip_amount = Number(req.body.tip_amount);
                            tip_amount = (tip_amount).toFixed(2);
                            payment_id = req.body.payment_id;
                        }

                        var payment_mode = trip.payment_mode;

                        Provider.findOne({ _id: trip.confirmed_provider }).then((provider) => {
                            var provider_device_token = provider.device_token;
                            var provider_device_type = provider.device_type;

                            User.findOne({ _id: trip.user_id }).then((user) => {
                                var device_token = user.device_token;
                                var device_type = user.device_type;

                                Corporate.findOne({ _id: trip.user_type_id }).then((corporate) => {

                                    var countryCurrencyCode = trip.currencycode;

                                    Trip_Service.findOne({ _id: trip.trip_service_city_type_id }).then((tripservice) => {

                                        trip.is_trip_end = 1;
                                        if (trip.user_type == Number(constant_json.USER_TYPE_DISPATCHER) || trip.user_type == Number(constant_json.USER_TYPE_HOTEL) || trip.user_type == Number(constant_json.USER_TYPE_PROVIDER)) {
                                            trip.is_user_invoice_show = 1;
                                            user.current_trip_id = null;
                                            user.save();
                                        }

                                        var total = +trip.total + +tip_amount;
                                        total = Number((total).toFixed(2));
                                        trip.total = total;


                                        var wallet_amount = Number((Math.max(user.wallet, 0)).toFixed(2) * trip.wallet_current_rate);
                                        var is_use_wallet = user.is_use_wallet;
                                        if (trip.trip_type == constant_json.TRIP_TYPE_CORPORATE && corporate) {
                                            wallet_amount = Number((Math.max(corporate.wallet, 0)).toFixed(2) * trip.wallet_current_rate);
                                            is_use_wallet = 1;
                                        }
                                        var wallet_payment = 0;
                                        var remaining_payment = 0;
                                        var total_after_wallet_payment = total;
                                        if (wallet_amount > 0 && total_after_wallet_payment > 0 && is_use_wallet == constant_json.YES) {

                                            if (wallet_amount > total_after_wallet_payment) {
                                                wallet_payment = total_after_wallet_payment;
                                            } else {
                                                wallet_payment = wallet_amount;
                                            }
                                            if (trip.trip_type == constant_json.TRIP_TYPE_CORPORATE && corporate) {
                                                var total_wallet_amount = utils.addWalletHistory(constant_json.USER_UNIQUE_NUMBER, corporate.unique_id, corporate._id, null,
                                                    corporate.wallet_currency_code, trip.currencycode,
                                                    trip.wallet_current_rate, wallet_payment, corporate.wallet, constant_json.DEDUCT_WALLET_AMOUNT, constant_json.PAID_TRIP_AMOUNT, "Charge Of This Trip : " + trip.unique_id);
                                                corporate.wallet = total_wallet_amount;
                                                corporate.save();
                                            } else {
                                                var total_wallet_amount = utils.addWalletHistory(constant_json.USER_UNIQUE_NUMBER, user.unique_id, user._id, null,
                                                    user.wallet_currency_code, trip.currencycode,
                                                    trip.wallet_current_rate, wallet_payment, user.wallet, constant_json.DEDUCT_WALLET_AMOUNT, constant_json.PAID_TRIP_AMOUNT, "Charge Of This Trip : " + trip.unique_id);
                                                user.wallet = total_wallet_amount;
                                                user.save();
                                            }

                                            total_after_wallet_payment = total_after_wallet_payment - wallet_payment;
                                        } else {
                                            wallet_payment = 0;
                                        }

                                        total_after_wallet_payment = Number((total_after_wallet_payment).toFixed(2));
                                        wallet_payment = Number((wallet_payment).toFixed(2));
                                        remaining_payment = total - wallet_payment;
                                        remaining_payment = Number((remaining_payment).toFixed(2));
                                        trip.wallet_payment = wallet_payment;
                                        trip.total_after_wallet_payment = total_after_wallet_payment;
                                        trip.remaining_payment = remaining_payment;

                                        trip.provider_service_fees = +trip.provider_service_fees + +tip_amount;
                                        trip.total_in_admin_currency = trip.total * trip.current_rate;
                                        trip.provider_service_fees_in_admin_currency = trip.provider_service_fees * trip.current_rate;
                                        trip.tip_amount = tip_amount;
                                        if (payment_mode == Number(constant_json.PAYMENT_MODE_CASH)) {
                                            trip.provider_have_cash = remaining_payment;
                                        }
                                        trip.pay_to_provider = trip.provider_service_fees - trip.provider_have_cash;


                                        var complete_date_in_city_timezone = utils.get_date_now_at_city(new Date(), trip.timezone);
                                        var complete_date_tag = moment(moment(complete_date_in_city_timezone).startOf('day')).format(constant_json.DATE_FORMAT_MMM_D_YYYY);
                                        trip.complete_date_in_city_timezone = complete_date_in_city_timezone;
                                        trip.complete_date_tag = complete_date_tag;

                                        var total_wallet_amount = 0;
                                        if ((payment_mode == Number(constant_json.PAYMENT_MODE_CASH) && is_provider_earning_set_in_wallet_on_cash_payment) || (payment_mode == Number(constant_json.PAYMENT_MODE_CARD) && is_provider_earning_set_in_wallet_on_other_payment)) {
                                            if (provider.provider_type == Number(constant_json.PROVIDER_TYPE_NORMAL)) {
                                                if (trip.pay_to_provider < 0) {
                                                    total_wallet_amount = utils.addWalletHistory(constant_json.PROVIDER_UNIQUE_NUMBER, provider.unique_id, provider._id, provider.country_id,
                                                        provider.wallet_currency_code, trip.currencycode,
                                                        1, Math.abs(trip.pay_to_provider), provider.wallet, constant_json.DEDUCT_WALLET_AMOUNT, constant_json.SET_TRIP_PROFIT, "Set Profit Of This Trip : " + trip.unique_id);
                                                } else {
                                                    total_wallet_amount = utils.addWalletHistory(constant_json.PROVIDER_UNIQUE_NUMBER, provider.unique_id, provider._id, provider.country_id,
                                                        provider.wallet_currency_code, trip.currencycode,
                                                        1, trip.pay_to_provider, provider.wallet, constant_json.ADD_WALLET_AMOUNT, constant_json.SET_TRIP_PROFIT, "Set Profit Of This Trip : " + trip.unique_id);
                                                }
                                                provider.wallet = total_wallet_amount;
                                                provider.save();
                                            } else {
                                                Partner.findOne({ _id: trip.provider_type_id }).then((partner) => {
                                                    if (trip.pay_to_provider < 0) {
                                                        total_wallet_amount = utils.addWalletHistory(constant_json.PARTNER_UNIQUE_NUMBER, partner.unique_id, partner._id, partner.country_id,
                                                            partner.wallet_currency_code, trip.currencycode,
                                                            1, Math.abs(trip.pay_to_provider), partner.wallet, constant_json.DEDUCT_WALLET_AMOUNT, constant_json.SET_TRIP_PROFIT, "Set Profit Of This Trip : " + trip.unique_id);
                                                    } else {
                                                        total_wallet_amount = utils.addWalletHistory(constant_json.PARTNER_UNIQUE_NUMBER, partner.unique_id, partner._id, partner.country_id,
                                                            partner.wallet_currency_code, trip.currencycode,
                                                            1, trip.pay_to_provider, partner.wallet, constant_json.ADD_WALLET_AMOUNT, constant_json.SET_TRIP_PROFIT, "Set Profit Of This Trip : " + trip.unique_id);

                                                    }
                                                    partner.wallet = total_wallet_amount;
                                                    partner.save();
                                                });
                                            }

                                            trip.is_provider_earning_set_in_wallet = true;
                                            trip.provider_income_set_in_wallet = Math.abs(trip.pay_to_provider);
                                        }


                                        // End 6 March //

                                        if (payment_mode == constant_json.PAYMENT_MODE_CASH) {
                                            cash_payment = remaining_payment;
                                            trip.is_paid = 1;
                                            trip.is_pending_payments = 0;
                                            trip.cash_payment = cash_payment;
                                            trip.remaining_payment = 0;
                                            trip.save().then(() => {
                                                exports.trip_detail_notify(res, trip._id);
                                                var email_notification = setting_detail.email_notification;
                                                if (email_notification == true) {
                                                    //allemails.sendProviderInvoiceEmail(req, provider, trip, tripservice);
                                                }

                                                if (trip.is_tip == true) {
                                                    if (res == null) {

                                                        utils.sendPushNotification(constant_json.PROVIDER_UNIQUE_NUMBER, provider_device_type, provider_device_token, push_messages.PUSH_CODE_FOR_PROVIDER_TRIP_END, constant_json.PUSH_NOTIFICATION_SOUND_FILE_IN_IOS);
                                                        utils.sendPushNotification(constant_json.USER_UNIQUE_NUMBER, device_type, device_token, push_messages.PUSH_CODE_FOR_YOUR_TRIP_END, constant_json.PUSH_NOTIFICATION_SOUND_FILE_IN_IOS);
                                                        //res.json({success: true, message: success_messages.MESSAGE_CODE_FOR_PROVIDER_YOUR_TRIP_COMPLETED_SUCCESSFULLY, trip: trip, tripservice: tripservice});

                                                    } else {

                                                        utils.sendPushNotification(constant_json.PROVIDER_UNIQUE_NUMBER, provider_device_type, provider_device_token, push_messages.PUSH_CODE_FOR_PROVIDER_TRIP_END, constant_json.PUSH_NOTIFICATION_SOUND_FILE_IN_IOS);
                                                        res.json({
                                                            success: true,
                                                            message: success_messages.MESSAGE_CODE_FOR_PROVIDER_YOUR_TRIP_COMPLETED_SUCCESSFULLY,
                                                            trip: trip,
                                                            tripservice: tripservice
                                                        });
                                                    }

                                                } else {
                                                    if (res != null) {
                                                        if (req.body.provider_id != undefined) {

                                                            res.json({
                                                                success: true,
                                                                message: success_messages.MESSAGE_CODE_FOR_PROVIDER_YOUR_TRIP_COMPLETED_SUCCESSFULLY,
                                                                trip: trip,
                                                                tripservice: tripservice
                                                            });
                                                            utils.sendPushNotification(constant_json.USER_UNIQUE_NUMBER, device_type, device_token, push_messages.PUSH_CODE_FOR_YOUR_TRIP_END, constant_json.PUSH_NOTIFICATION_SOUND_FILE_IN_IOS);
                                                        } else {
                                                            res.json({
                                                                success: false,
                                                                error_code: error_message.ERROR_CODE_PAY_PAYMENT_FAILED
                                                            });
                                                        }
                                                    }
                                                }

                                            });
                                        } else {

                                            if (remaining_payment > 0) {
                                                var user_id = trip.user_id;
                                                if (trip.trip_type == constant_json.TRIP_TYPE_CORPORATE && corporate) {
                                                    user_id = trip.user_type_id;
                                                }
                                                myPayments.pay_payment_on_selected_payment_gateway(Number(constant_json.PAYMENT_BY_STRIPE), user_id, remaining_payment, countryCurrencyCode, function (response) {
                                                    if (response.success) {
                                                        trip.is_pending_payments = 0;
                                                        trip.is_paid = 1;
                                                        trip.card_payment = remaining_payment;
                                                        trip.remaining_payment = 0;
                                                        trip.payment_transaction.push(response.payment_transaction);

                                                        trip.save().then(() => {
                                                            exports.trip_detail_notify(res, trip._id);
                                                            var email_notification = setting_detail.email_notification;
                                                            if (email_notification == true) {
                                                                allemails.sendProviderInvoiceEmail(req, provider, trip, tripservice);
                                                            }
                                                            if (trip.is_tip == true) {
                                                                if (req.body.user_id == undefined && req.body.token == undefined) {
                                                                    utils.sendPushNotification(constant_json.PROVIDER_UNIQUE_NUMBER, provider_device_type, provider_device_token, push_messages.PUSH_CODE_FOR_PROVIDER_TRIP_END, constant_json.PUSH_NOTIFICATION_SOUND_FILE_IN_IOS);
                                                                    utils.sendPushNotification(constant_json.USER_UNIQUE_NUMBER, device_type, device_token, push_messages.PUSH_CODE_FOR_YOUR_TRIP_END, constant_json.PUSH_NOTIFICATION_SOUND_FILE_IN_IOS);
                                                                    //res.json({success: true, message: success_messages.MESSAGE_CODE_FOR_PROVIDER_YOUR_TRIP_COMPLETED_SUCCESSFULLY, trip: trip, tripservice: tripservice});

                                                                } else {

                                                                    utils.sendPushNotification(constant_json.PROVIDER_UNIQUE_NUMBER, provider_device_type, provider_device_token, push_messages.PUSH_CODE_FOR_PROVIDER_TRIP_END, constant_json.PUSH_NOTIFICATION_SOUND_FILE_IN_IOS);
                                                                    res.json({
                                                                        success: true,
                                                                        message: success_messages.MESSAGE_CODE_FOR_PROVIDER_YOUR_TRIP_COMPLETED_SUCCESSFULLY,
                                                                        trip: trip,
                                                                        tripservice: tripservice
                                                                    });
                                                                }

                                                            } else {

                                                                if (req.body.provider_id != undefined) {

                                                                    res.json({
                                                                        success: true,
                                                                        message: success_messages.MESSAGE_CODE_FOR_PROVIDER_YOUR_TRIP_COMPLETED_SUCCESSFULLY,
                                                                        trip: trip,
                                                                        tripservice: tripservice
                                                                    });
                                                                    utils.sendPushNotification(constant_json.USER_UNIQUE_NUMBER, device_type, device_token, push_messages.PUSH_CODE_FOR_YOUR_TRIP_END, constant_json.PUSH_NOTIFICATION_SOUND_FILE_IN_IOS);
                                                                } else {
                                                                    res.json({
                                                                        success: false,
                                                                        error_code: error_message.ERROR_CODE_PAY_PAYMENT_FAILED
                                                                    });
                                                                }
                                                            }
                                                        });
                                                    } else {

                                                        utils.getCurrencyConvertRate(1, user.wallet_currency_code, countryCurrencyCode, function (response) {
                                                            var wallet_current_rate = 1;
                                                            if (response.success) {
                                                                wallet_current_rate = response.current_rate;
                                                            }

                                                            if (trip.trip_type == constant_json.TRIP_TYPE_CORPORATE) {
                                                                if (corporate) {
                                                                    user = corporate;
                                                                }
                                                            }
                                                            var total_wallet_amount = utils.addWalletHistory(constant_json.USER_UNIQUE_NUMBER, user.unique_id, user._id, null,
                                                                user.wallet_currency_code, trip.currencycode,
                                                                wallet_current_rate, remaining_payment, user.wallet, constant_json.DEDUCT_WALLET_AMOUNT, constant_json.PAID_TRIP_AMOUNT, "Charge Of This Trip : " + trip.unique_id);
                                                            user.wallet = total_wallet_amount;
                                                            user.save();

                                                            trip.wallet_payment = Number((remaining_payment).toFixed(2));
                                                            trip.total_after_wallet_payment = 0;
                                                            trip.remaining_payment = 0;
                                                            trip.is_paid = 1;
                                                            trip.is_pending_payments = 0;

                                                            trip.save().then(() => {
                                                                exports.trip_detail_notify(res, trip._id);
                                                                var email_notification = setting_detail.email_notification;
                                                                if (email_notification == true) {
                                                                    allemails.sendProviderInvoiceEmail(req, provider, trip, tripservice);
                                                                }
                                                                if (trip.is_tip == true) {
                                                                    if (req.body.user_id == undefined && req.body.token == undefined) {
                                                                        utils.sendPushNotification(constant_json.PROVIDER_UNIQUE_NUMBER, provider_device_type, provider_device_token, push_messages.PUSH_CODE_FOR_PROVIDER_TRIP_END, constant_json.PUSH_NOTIFICATION_SOUND_FILE_IN_IOS);
                                                                        utils.sendPushNotification(constant_json.USER_UNIQUE_NUMBER, device_type, device_token, push_messages.PUSH_CODE_FOR_YOUR_TRIP_END, constant_json.PUSH_NOTIFICATION_SOUND_FILE_IN_IOS);
                                                                    } else {
                                                                        utils.sendPushNotification(constant_json.PROVIDER_UNIQUE_NUMBER, provider_device_type, provider_device_token, push_messages.PUSH_CODE_FOR_PROVIDER_TRIP_END, constant_json.PUSH_NOTIFICATION_SOUND_FILE_IN_IOS);
                                                                        res.json({
                                                                            success: true,
                                                                            message: success_messages.MESSAGE_CODE_FOR_PROVIDER_YOUR_TRIP_COMPLETED_SUCCESSFULLY,
                                                                            trip: trip,
                                                                            tripservice: tripservice
                                                                        });
                                                                    }
                                                                } else {
                                                                    if (req.body.provider_id != undefined) {
                                                                        res.json({
                                                                            success: true,
                                                                            message: success_messages.MESSAGE_CODE_FOR_PROVIDER_YOUR_TRIP_COMPLETED_SUCCESSFULLY,
                                                                            trip: trip,
                                                                            tripservice: tripservice
                                                                        });
                                                                        utils.sendPushNotification(constant_json.USER_UNIQUE_NUMBER, device_type, device_token, push_messages.PUSH_CODE_FOR_YOUR_TRIP_END, constant_json.PUSH_NOTIFICATION_SOUND_FILE_IN_IOS);
                                                                    } else {
                                                                        res.json({
                                                                            success: false,
                                                                            error_code: error_message.ERROR_CODE_PAY_PAYMENT_FAILED
                                                                        });
                                                                    }
                                                                }
                                                            }, (err) => {
                                                                console.log(err);
                                                                res.json({
                                                                    success: false,
                                                                    error_code: error_message.ERROR_CODE_SOMETHING_WENT_WRONG
                                                                });
                                                            });

                                                        });
                                                    }
                                                });

                                            } else {
                                                trip.is_paid = 1;
                                                trip.is_pending_payments = 0;
                                                trip.card_payment = 0;
                                                trip.save().then(() => {
                                                    exports.trip_detail_notify(res, trip._id);
                                                    var email_notification = setting_detail.email_notification;
                                                    if (email_notification == true) {
                                                        allemails.sendProviderInvoiceEmail(req, provider, trip, tripservice);
                                                    }
                                                    if (trip.is_tip == true) {
                                                        if (req.body.user_id == undefined && req.body.token == undefined) {
                                                            utils.sendPushNotification(constant_json.PROVIDER_UNIQUE_NUMBER, provider_device_type, provider_device_token, push_messages.PUSH_CODE_FOR_PROVIDER_TRIP_END, constant_json.PUSH_NOTIFICATION_SOUND_FILE_IN_IOS);
                                                            utils.sendPushNotification(constant_json.USER_UNIQUE_NUMBER, device_type, device_token, push_messages.PUSH_CODE_FOR_YOUR_TRIP_END, constant_json.PUSH_NOTIFICATION_SOUND_FILE_IN_IOS);
                                                            //res.json({success: true, message: success_messages.MESSAGE_CODE_FOR_PROVIDER_YOUR_TRIP_COMPLETED_SUCCESSFULLY, trip: trip, tripservice: tripservice});

                                                        } else {
                                                            utils.sendPushNotification(constant_json.PROVIDER_UNIQUE_NUMBER, provider_device_type, provider_device_token, push_messages.PUSH_CODE_FOR_PROVIDER_TRIP_END, constant_json.PUSH_NOTIFICATION_SOUND_FILE_IN_IOS);
                                                            res.json({
                                                                success: true,
                                                                message: success_messages.MESSAGE_CODE_FOR_PROVIDER_YOUR_TRIP_COMPLETED_SUCCESSFULLY,
                                                                trip: trip,
                                                                tripservice: tripservice
                                                            });
                                                        }

                                                    } else {
                                                        if (req.body.provider_id != undefined) {
                                                            res.json({
                                                                success: true,
                                                                message: success_messages.MESSAGE_CODE_FOR_PROVIDER_YOUR_TRIP_COMPLETED_SUCCESSFULLY,
                                                                trip: trip,
                                                                tripservice: tripservice
                                                            });
                                                            utils.sendPushNotification(constant_json.USER_UNIQUE_NUMBER, device_type, device_token, push_messages.PUSH_CODE_FOR_YOUR_TRIP_END, constant_json.PUSH_NOTIFICATION_SOUND_FILE_IN_IOS);
                                                        } else {
                                                            res.json({
                                                                success: false,
                                                                error_code: error_message.ERROR_CODE_PAY_PAYMENT_FAILED
                                                            });
                                                        }
                                                    }
                                                }, (err) => {
                                                    console.log(err);
                                                    res.json({
                                                        success: false,
                                                        error_code: error_message.ERROR_CODE_SOMETHING_WENT_WRONG
                                                    });
                                                });
                                            }
                                        }
                                    });
                                });
                            });
                        });

                    });

                } else {
                    res.json({ success: false, error_code: error_message.ERROR_CODE_TRIP_NOT_FOUND });
                }
            }, (err) => {
                console.log(err);
                res.json({
                    success: false,
                    error_code: error_message.ERROR_CODE_SOMETHING_WENT_WRONG
                });
            }); ///////// end TRIP
        } else {
            res.json({
                success: false,
                error_code: response.error_code,
                error_description: response.error_description
            });
        }
    });
};

///////////////////GETTRIP STATUS PROVIDER SIDE //////
exports.providergettripstatus = function (req, res, next) {

    utils.check_request_params(req.body, [{ name: 'trip_id', type: 'string' }], function (response) {
        if (response.success) {
            var provider_id = req.body.provider_id;
            var token = req.body.token;
            var country_phone_code = "";
            var phone = "";
            if (provider_id != undefined && token != undefined) {
                Provider.findOne({ _id: req.body.provider_id }).then((provider) => {
                    if (req.body.token != null && provider.token != req.body.token) {
                        res.json({ success: false, error_code: error_message.ERROR_CODE_INVALID_TOKEN });
                    } else {

                        if (provider.is_trip.length > 0) {

                            /* Trip.findOne({
                                 _id: {$in: provider.is_trip},
                                 $or: [{current_providers: provider._id},
                                 {confirmed_provider: provider._id}],
 
                                 is_trip_cancelled: 0,
                                 is_trip_cancelled_by_provider: 0
                             })*/
                            Trip.findone({ _id: req.body.trip_id }).then((trip) => {
                                // console.log(trip)
                                if (trip) {
                                    Trip_Service.findOne({ _id: trip.trip_service_city_type_id }).then((tripservice) => {

                                        if (tripservice) {
                                            User.findOne({ _id: trip.user_id }).then((user) => {

                                                if (user) {
                                                    country_phone_code = user.country_phone_code;
                                                    phone = user.phone;
                                                }

                                                Citytype.findById(trip.service_type_id).then((citytype_detail) => {
                                                    Type.findById(citytype_detail.typeid).then((type_detail) => {
                                                        var waiting_time_start_after_minute = 0;
                                                        var price_for_waiting_time = 0;
                                                        var total_wait_time = 0;
                                                        var provider_arrived_time = trip.provider_arrived_time;
                                                        if (provider_arrived_time != null) {
                                                            var end_time = new Date();
                                                            waiting_time_start_after_minute = tripservice.waiting_time_start_after_minute;
                                                            price_for_waiting_time = tripservice.price_for_waiting_time;
                                                            total_wait_time = utils.getTimeDifferenceInSecond(end_time, provider_arrived_time);
                                                            total_wait_time = total_wait_time - waiting_time_start_after_minute * 60;
                                                        }
                                                        if (trip.is_provider_status == 6) {
                                                            var now = new Date();
                                                            var minutes = utils.getTimeDifferenceInMinute(now, trip.provider_trip_start_time);
                                                            trip.total_time = minutes;
                                                            trip.save();
                                                        }

                                                        var index = user.favourite_providers.findIndex((x) => (x).toString() == (req.body.provider_id).toString())

                                                        if (index !== -1) {
                                                            trip.is_favourite_provider = true;
                                                        }

                                                        res.json({
                                                            success: true,
                                                            map_pin_image_url: type_detail.map_pin_image_url,
                                                            message: success_messages.MESSAGE_CODE_FOR_PROVIDER_YOU_GET_TRIP_STATUS_SUCCESSFULLY,
                                                            country_phone_code: country_phone_code,
                                                            phone: phone,
                                                            trip: trip,
                                                            tripservice: tripservice,
                                                            waiting_time_start_after_minute: waiting_time_start_after_minute,
                                                            price_for_waiting_time: price_for_waiting_time,
                                                            total_wait_time: total_wait_time
                                                        });
                                                    });
                                                });
                                            });
                                        } else {
                                            res.json({
                                                success: false,
                                                error_code: error_message.ERROR_CODE_NOT_GET_TRIP_STATUS
                                            });
                                        }
                                    });
                                } else {
                                    Trip.findOne({
                                        _id: req.body.trip_id,
                                        is_trip_cancelled_by_user: 1,
                                        is_trip_cancelled: 1
                                    }).then((cancel_trip) => {

                                        if (cancel_trip) {
                                            res.json({
                                                success: false,
                                                error_code: error_message.ERROR_CODE_TRIP_CANCELLED_BY_USER
                                            });
                                        } else {

                                            res.json({
                                                success: false,
                                                error_code: error_message.ERROR_CODE_NOT_GET_TRIP_STATUS
                                            });
                                        }

                                    });
                                }
                            }, (err) => {
                                console.log(err);
                                res.json({
                                    success: false,
                                    error_code: error_message.ERROR_CODE_SOMETHING_WENT_WRONG
                                });
                            });

                        } else {
                            res.json({ success: false, error_code: error_message.ERROR_CODE_NOT_GET_TRIP_STATUS });

                        }

                    }
                }, (err) => {
                    console.log(err);
                    res.json({
                        success: false,
                        error_code: error_message.ERROR_CODE_SOMETHING_WENT_WRONG
                    });
                });


            } else {

                Trip.findOne({
                    _id: req.body.trip_id,
                    is_trip_cancelled: 0,
                    is_trip_cancelled_by_provider: 0
                }).then((trip) => {

                    if (trip) {

                        Trip_Service.findOne({ _id: trip.trip_service_city_type_id }).then((tripservice) => {

                            if (tripservice) {
                                User.findOne({ _id: trip.user_id }).then((user) => {

                                    if (user) {
                                        country_phone_code = user.country_phone_code;
                                        phone = user.phone;
                                    }
                                    Citytype.findById(trip.service_type_id).then((citytype_detail) => {
                                        Type.findById(citytype_detail.typeid).then((type_detail) => {
                                            var waiting_time_start_after_minute = 0;
                                            var price_for_waiting_time = 0;
                                            var total_wait_time = 0;
                                            var provider_arrived_time = trip.provider_arrived_time;
                                            if (provider_arrived_time != null) {
                                                var end_time = new Date();
                                                waiting_time_start_after_minute = tripservice.waiting_time_start_after_minute;
                                                price_for_waiting_time = tripservice.price_for_waiting_time;
                                                total_wait_time = utils.getTimeDifferenceInSecond(end_time, provider_arrived_time);
                                                total_wait_time = total_wait_time - waiting_time_start_after_minute * 60;
                                            }

                                            res.json({
                                                success: true,
                                                country_phone_code: country_phone_code,
                                                phone: phone,
                                                map_pin_image_url: type_detail.map_pin_image_url,
                                                message: success_messages.MESSAGE_CODE_FOR_PROVIDER_YOU_GET_TRIP_STATUS_SUCCESSFULLY,
                                                trip: trip,
                                                waiting_time_start_after_minute: waiting_time_start_after_minute,
                                                price_for_waiting_time: price_for_waiting_time,
                                                total_wait_time: total_wait_time
                                            });
                                        });
                                    });

                                });

                            } else {
                                res.json({ success: false, error_code: error_message.ERROR_CODE_NOT_GET_TRIP_STATUS });
                            }
                        });
                    } else {

                        Trip.findOne({ _id: req.body.trip_id, is_trip_cancelled_by_user: 1 }).then((cancel_trip) => {

                            if (cancel_trip) {
                                res.json({ success: false, error_code: error_message.ERROR_CODE_TRIP_CANCELLED_BY_USER });
                            } else {
                                res.json({ success: false, error_code: error_message.ERROR_CODE_NOT_GET_TRIP_STATUS });
                            }

                        });
                    }
                }, (err) => {
                    console.log(err);
                    res.json({
                        success: false,
                        error_code: error_message.ERROR_CODE_SOMETHING_WENT_WRONG
                    });
                });
            }
        } else {
            res.json({
                success: false,
                error_code: response.error_code,
                error_description: response.error_description
            });
        }
    });
};

//////////////////// user_history //////////////////////
exports.user_history = function (req, res, next) {

    utils.check_request_params(req.body, [{ name: 'user_id', type: 'string' }], function (response) {
        if (response.success) {
            User.findOne({ _id: req.body.user_id }).then((user) => {
                if (user.token != req.body.token) {
                    res.json({ success: false, error_code: error_message.ERROR_CODE_INVALID_TOKEN });
                } else {
                    var lookup1 = {
                        $lookup:
                        {
                            from: "providers",
                            localField: "confirmed_provider",
                            foreignField: "_id",
                            as: "provider_detail"
                        }
                    };
                    var unwind1 = { $unwind: "$provider_detail" };

                    var mongoose = require('mongoose');
                    var Schema = new mongoose.Types.ObjectId;
                    var condition = { $match: { 'user_id': { $eq: Schema(req.body.user_id) } } };
                    var condition1 = { $match: { $or: [{ $and: [{ is_trip_cancelled: { $eq: 0 } }, { is_trip_end: { $eq: 1 } }, { is_trip_completed: { $eq: 1 } }] }, { is_trip_cancelled_by_user: { $eq: 1 } }, { is_trip_cancelled_by_provider: { $eq: 1 } }] } };

                    var group = {
                        $project: {
                            trip_id: '$_id', unique_id: 1, invoice_number: 1,
                            current_provider: 1, provider_service_fees: 1,
                            is_trip_cancelled_by_user: 1,
                            is_trip_completed: 1,
                            is_user_rated: 1,
                            is_provider_rated: 1,
                            is_trip_cancelled_by_provider: 1,
                            first_name: '$provider_detail.first_name',
                            last_name: '$provider_detail.last_name',
                            picture: '$provider_detail.picture',
                            total: 1,
                            unit: 1,
                            currency: 1,
                            currencycode: 1,
                            total_time: 1,
                            user_create_time: 1,
                            total_distance: 1,
                            source_address: 1,
                            destination_address: 1,
                            provider_trip_end_time: 1,
                            timezone: 1
                        }
                    };

                    var start_date = req.body.start_date;
                    var end_date = req.body.end_date;
                    if (end_date == '' || end_date == undefined) {
                        end_date = new Date();
                    } else {
                        end_date = new Date(end_date);
                        end_date = end_date.setHours(23, 59, 59, 999);
                        end_date = new Date(end_date);
                    }

                    if (start_date == '' || start_date == undefined) {
                        start_date = new Date(end_date.getTime() - (6 * 24 * 60 * 60 * 1000));
                        start_date = start_date.setHours(0, 0, 0, 0);
                        start_date = new Date(start_date);
                    } else {
                        start_date = new Date(start_date);
                        start_date = start_date.setHours(0, 0, 0, 0);
                        start_date = new Date(start_date);
                    }
                    var query1 = {};
                    query1['created_at'] = { $gte: start_date, $lt: end_date };
                    var filter = { "$match": query1 };

                    Trip.aggregate([condition, condition1, lookup1, unwind1, filter, group]).then((array) => {

                        res.json({ success: true, trips: array });
                    }, (err) => {
                        console.log(err);
                        res.json({
                            success: false,
                            error_code: error_message.ERROR_CODE_SOMETHING_WENT_WRONG
                        });
                    });
                }
            }, (err) => {
                console.log(err);
                res.json({
                    success: false,
                    error_code: error_message.ERROR_CODE_SOMETHING_WENT_WRONG
                });
            });
        } else {
            res.json({
                success: false,
                error_code: response.error_code,
                error_description: response.error_description
            });
        }
    });
}


/////////////////////// provider_history ///////////////////////////////////
exports.provider_history = function (req, res, next) {

    utils.check_request_params(req.body, [{ name: 'provider_id', type: 'string' }], function (response) {
        if (response.success) {
            Provider.findOne({ _id: req.body.provider_id }).then((provider) => {
                if (provider.token != req.body.token) {
                    res.json({ success: false, error_code: error_message.ERROR_CODE_INVALID_TOKEN });
                } else {
                    var lookup1 = {
                        $lookup:
                        {
                            from: "users",
                            localField: "user_id",
                            foreignField: "_id",
                            as: "user_detail"
                        }
                    };
                    var unwind1 = { $unwind: "$user_detail" };

                    var mongoose = require('mongoose');
                    var Schema = new mongoose.Types.ObjectId;

                    var condition = { $match: { 'confirmed_provider': { $eq: Schema(req.body.provider_id) } } };
                    var condition1 = { $match: { $or: [{ $and: [{ is_trip_cancelled: { $eq: 0 } }, { is_trip_end: { $eq: 1 } }] }, { is_cancellation_fee: { $eq: 1 } }, { is_trip_cancelled_by_provider: { $eq: 1 } }, { is_trip_cancelled_by_user: { $eq: 1 } }] } };

                    var group = {
                        $project: {
                            trip_id: '$_id', unique_id: 1, invoice_number: 1,
                            current_provider: 1, provider_service_fees: 1,
                            is_trip_cancelled_by_user: 1,
                            is_user_rated: 1,
                            is_trip_completed: 1,
                            is_provider_rated: 1,
                            is_trip_cancelled_by_provider: 1,
                            first_name: '$user_detail.first_name',
                            last_name: '$user_detail.last_name',
                            picture: '$user_detail.picture',
                            total: 1,
                            unit: 1,
                            currency: 1,
                            currencycode: 1,
                            total_time: 1,
                            user_create_time: 1,
                            total_distance: 1,
                            source_address: 1,
                            destination_address: 1,
                            provider_trip_end_time: 1,
                            timezone: 1
                        }
                    };

                    var start_date = req.body.start_date;
                    var end_date = req.body.end_date;
                    if (end_date == '' || end_date == undefined) {
                        end_date = new Date();
                    } else {
                        end_date = new Date(end_date);
                        end_date = end_date.setHours(23, 59, 59, 999);
                        end_date = new Date(end_date);
                    }

                    if (start_date == '' || start_date == undefined) {
                        start_date = new Date(end_date.getTime() - (6 * 24 * 60 * 60 * 1000));
                        start_date = start_date.setHours(0, 0, 0, 0);
                        start_date = new Date(start_date);
                    } else {
                        start_date = new Date(start_date);
                        start_date = start_date.setHours(0, 0, 0, 0);
                        start_date = new Date(start_date);
                    }
                    var query1 = {};
                    query1['created_at'] = { $gte: start_date, $lt: end_date };
                    var filter = { "$match": query1 };

                    Trip.aggregate([condition, condition1, lookup1, unwind1, filter, group]).then((array) => {
                        res.json({ success: true, trips: array });
                    }, (err) => {
                        console.log(err);
                        res.json({
                            success: false,
                            error_code: error_message.ERROR_CODE_SOMETHING_WENT_WRONG
                        });
                    });
                }
            }, (err) => {
                console.log(err);
                res.json({
                    success: false,
                    error_code: error_message.ERROR_CODE_SOMETHING_WENT_WRONG
                });
            });
        } else {
            res.json({
                success: false,
                error_code: response.error_code,
                error_description: response.error_description
            });
        }
    });
};


exports.provider_submit_invoice = function (req, res) {

    utils.check_request_params(req.body, [{ name: 'provider_id', type: 'string' }, {
        name: 'trip_id',
        type: 'string'
    }], function (response) {
        if (response.success) {
            Provider.findOne({ _id: req.body.provider_id }).then((provider) => {
                if (provider) {
                    if (req.body.token != null && provider.token != req.body.token) {
                        res.json({ success: false, error_code: error_message.ERROR_CODE_INVALID_TOKEN });
                    } else {
                        Trip.findOne({ _id: req.body.trip_id, is_trip_end: 1 }).then((trip) => {

                            if (trip) {
                                User.findOne({ _id: trip.user_id }).then((user) => {


                                    trip.is_trip_completed = 1;
                                    trip.is_provider_invoice_show = 1;
                                    trip.save();
                                    provider.completed_request = provider.completed_request + 1;
                                    provider.is_available = 1;
                                    provider.is_trip = [];
                                    provider.save();

                                    if (trip.trip_type == Number(constant_json.TRIP_TYPE_DISPATCHER) || trip.trip_type == Number(constant_json.TRIP_TYPE_HOTEL) || trip.trip_type == Number(constant_json.TRIP_TYPE_PROVIDER)) {
                                        user.current_trip_id = null;
                                        user.save();

                                    }
                                    res.json({ success: true });
                                });
                            } else {
                                res.json({ success: false, error_code: error_message.ERROR_CODE_YOUR_TRIP_IS_NOT_END });
                            }
                        }, (err) => {
                            console.log(err);
                            res.json({
                                success: false,
                                error_code: error_message.ERROR_CODE_SOMETHING_WENT_WRONG
                            });
                        });
                    }
                } else {
                    res.json({ success: false, error_code: error_message.ERROR_CODE_PROVIDER_DETAIL_NOT_FOUND });
                }
            }, (err) => {
                console.log(err);
                res.json({
                    success: false,
                    error_code: error_message.ERROR_CODE_SOMETHING_WENT_WRONG
                });
            });
        } else {
            res.json({
                success: false,
                error_code: response.error_code,
                error_description: response.error_description
            });
        }
    });
};

exports.user_submit_invoice = function (req, res) {

    utils.check_request_params(req.body, [{ name: 'user_id', type: 'string' }, {
        name: 'trip_id',
        type: 'string'
    }], function (response) {
        if (response.success) {
            User.findOne({ _id: req.body.user_id }).then((user) => {
                if (user) {
                    if (req.body.token != null && user.token != req.body.token) {
                        res.json({ success: false, error_code: error_message.ERROR_CODE_INVALID_TOKEN });
                    } else {
                        Trip.findOne({ _id: req.body.trip_id, is_trip_end: 1 }).then((trip) => {

                            if (trip) {
                                trip.is_user_invoice_show = 1;
                                trip.save();
                                user.completed_request = user.completed_request + 1;
                                user.current_trip_id = null;
                                user.save();
                                res.json({ success: true });
                            } else {
                                res.json({ success: false, error_code: error_message.ERROR_CODE_YOUR_TRIP_IS_NOT_END });
                            }
                        });
                    }

                } else {
                    res.json({ success: false, error_code: error_message.ERROR_CODE_USER_DETAIL_NOT_FOUND });
                }
            }, (err) => {
                console.log(err);
                res.json({
                    success: false,
                    error_code: error_message.ERROR_CODE_SOMETHING_WENT_WRONG
                });
            });
        } else {
            res.json({
                success: false,
                error_code: response.error_code,
                error_description: response.error_description
            });
        }
    });
};


exports.currentAppointmentData = function (req, res) {
    utils.check_request_params(req.body, [{ name: 'provider_id', type: 'string' }, { name: 'trip_id', type: 'string' }], function (response) {
        if (response.success) {
            Trip.findOne({ _id: req.body.trip_id }).then((trip) => {
                if (trip) {
                    res.json({ success: true, Trip: trip });
                }
                else {
                    res.json({ success: false });

                }
            });
        }
        else {
            res.json({
                success: false,
                error_code: response.error_code,
                error_description: response.error_description
            });

        }
    });
};

///////// START APPOINTMENT  ///////////

exports.startAppointment = function (req, res) {
    utils.check_request_params(req.body, [{ name: 'provider_id', type: 'string' }, { name: 'trip_id', type: 'string' }], function (response) {
        if (response.success) {
            var x = req.body.is_current_appointment;
            console.log('current' + x);
            Trip.findOne({ _id: req.body.trip_id }).then((trip) => {
                if (trip) {
                    if (trip.is_current_appointment == x) {
                        if (trip.is_current_appointment == 1) {
                            var startdtm = new Date().toISOString().replace(/T/, ' ').replace(/\..+/, '');
                            if (trip.provider_id == res.body.provide_id) {

                                trip.provider_trip_start_time = startdtm;
                                trip.is_current_appointment = 1;
                            }
                            else {
                                trip.provider_id = res.body.provider_id;
                                trip.provider_trip_start_time = startdtm;
                                trip.is_current_appointment = 1;

                            }
                            res.json({ success: true, message: "trip started!", is_current_appointment: 1 });
                        }
                        else {
                            res.json({ success: true, message: "trip not started yet!", is_current_appointment: 0 });
                        }
                    }
                }
                else {
                    res.json({ success: false });
                }
            });
        }
        else {
            res.json({
                success: false,
                error_code: response.error_code,
                error_description: response.error_description
            });
        }
    });
}

////////////// PROVIDER RATING SERVICE  //////////////////////////

exports.getProviderReview = function (req, res) {
    utils.check_request_params(req.body, [{ name: 'provider_id', type: 'string' }], function (response) {
        if (response.success) {
            Reviews.find({ provider_id: req.body.provider_id }).then((review) => {
                if (review) {

                    var userid = review.user_id;
                    console.log(review);
                    for (var i; i < review.length; i++) {
                        var user = review[i].user_id;
                        console.log('hello' + user);
                    }
                    var userdata = {
                        $lookup:
                        {
                            from: "users",
                            localField: "_id",
                            foreignField: "user_id",
                            as: "user_info"
                        }
                    };
                    var unwinduser = { $unwind: "$user_info" };
                    Reviews.aggregate([userdata, unwinduser]).then((array) => {

                        res.json({ success: true, Review: review, user: unwinduser });
                    }, (err) => {
                        console.log(err);
                        res.json({
                            success: false,
                            error_code: error_message.ERROR_CODE_SOMETHING_WENT_WRONG
                        });
                    });

                    //User.find()

                    // res.json({success: true, review: review});
                }
                else {
                    res.json({ success: false });
                }
            });
        } else {
            res.json({
                success: false,
                error_code: response.error_code,
                error_description: response.error_description
            });
        }
    });
};


exports.provider_rating = function (req, res) {
    utils.check_request_params(req.body, [{ name: 'provider_id', type: 'string' }, {
        name: 'trip_id',
        type: 'string'
    }], function (response) {
        if (response.success) {
            Provider.findOne({ _id: req.body.provider_id }).then((provider) => {
                if (provider) {
                    if (req.body.token != null && provider.token != req.body.token) {
                        res.json({ success: false, error_code: error_message.ERROR_CODE_INVALID_TOKEN });
                    } else {
                        Trip.findOne({ _id: req.body.trip_id, is_trip_end: 1 }).then((trip) => {
                            var is_trip_end = trip.is_trip_end;
                            if (is_trip_end == 1) {

                                User.findOne({ _id: trip.user_id }).then((user) => {
                                    var rating = req.body.rating;
                                    var old_rate = user.rate;
                                    var old_rate_count = user.rate_count;
                                    var new_rate_counter = (old_rate_count + 1);
                                    var new_rate = ((old_rate * old_rate_count) + rating) / new_rate_counter;
                                    user.rate = new_rate;
                                    user.rate_count++;
                                    user.save();
                                    Reviews.findOne({ trip_id: trip._id }).then((review) => {

                                        if (!review) {

                                            var review = new Reviews({
                                                trip_id: trip._id,
                                                trip_unique_id: trip.unique_id,
                                                userRating: 0,
                                                userReview: "",
                                                providerRating: rating,
                                                providerReview: req.body.review,
                                                provider_id: trip.confirmed_provider,
                                                user_id: trip.user_id
                                            });
                                            review.save();
                                        } else {
                                            review.providerRating = rating;
                                            review.providerReview = req.body.review;
                                            review.save();
                                        }
                                    });
                                    trip.is_user_rated = 1;

                                    trip.save().then(() => {
                                        res.json({
                                            success: true,
                                            message: success_messages.MESSAGE_CODE_FOR_PROVIDER_GIVE_RATING_SUCCESSFULLY
                                        });

                                    });
                                });
                            } else {
                                res.json({ success: false, error_code: error_message.ERROR_CODE_YOUR_TRIP_IS_NOT_END });
                            }
                        });
                    }
                } else {
                    res.json({ success: false, error_code: error_message.ERROR_CODE_PROVIDER_DETAIL_NOT_FOUND });

                }
            }, (err) => {
                console.log(err);
                res.json({
                    success: false,
                    error_code: error_message.ERROR_CODE_SOMETHING_WENT_WRONG
                });
            });
        } else {
            res.json({
                success: false,
                error_code: response.error_code,
                error_description: response.error_description
            });
        }
    });
};
////////////////////// USER  RATING  SERVICE/////////////

exports.user_rating = function (req, res) {
    utils.check_request_params(req.body, [{ name: 'user_id', type: 'string' }, {
        name: 'trip_id',
        type: 'string'
    }], function (response) {
        if (response.success) {
            User.findOne({ _id: req.body.user_id }).then((user) => {
                if (user) {
                    if (req.body.token != null && user.token != req.body.token) {
                        res.json({ success: false, error_code: error_message.ERROR_CODE_INVALID_TOKEN });
                    } else {

                        Trip.findOneAndUpdate({
                            _id: req.body.trip_id,
                            is_trip_end: 1
                        }, req.body, { new: true }).then((trip) => {
                            if (trip) {
                                var is_trip_end = trip.is_trip_end;
                                if (is_trip_end == 1) {
                                    Provider.findOne({ _id: trip.confirmed_provider }).then((provider) => {
                                        var rating = req.body.rating;
                                        var old_rate = provider.rate;
                                        var old_rate_count = provider.rate_count;
                                        var new_rate_counter = (old_rate_count + 1);
                                        var new_rate = ((old_rate * old_rate_count) + rating) / new_rate_counter;
                                        provider.rate = new_rate;
                                        provider.rate_count++;
                                        provider.save();
                                        Reviews.findOne({ trip_id: trip._id }).then((review) => {

                                            if (!review) {
                                                var reviews = new Reviews({
                                                    trip_id: trip._id,
                                                    trip_unique_id: trip.unique_id,
                                                    userRating: rating,
                                                    userReview: req.body.review,
                                                    providerRating: 0,
                                                    providerReview: "",
                                                    provider_id: trip.confirmed_provider,
                                                    user_id: trip.user_id
                                                });
                                                reviews.save();
                                            } else {
                                                review.userRating = rating;
                                                review.userReview = req.body.review;
                                                review.save();
                                            }
                                        });

                                        trip.is_provider_rated = 1;


                                        trip.save().then(() => {

                                            res.json({
                                                success: true,
                                                message: success_messages.MESSAGE_CODE_USER_GIVE_RATING_SUCCESSFULLY
                                            });

                                        });
                                    });
                                } else {
                                    res.json({ success: false, error_code: error_message.ERROR_CODE_YOUR_TRIP_IS_NOT_END });
                                }
                            }
                        }, (err) => {
                            console.log(err);
                            res.json({
                                success: false,
                                error_code: error_message.ERROR_CODE_SOMETHING_WENT_WRONG
                            });
                        });
                    }
                } else {
                    res.json({ success: false, error_code: error_message.ERROR_CODE_USER_DETAIL_NOT_FOUND });

                }
            }, (err) => {
                console.log(err);
                res.json({
                    success: false,
                    error_code: error_message.ERROR_CODE_SOMETHING_WENT_WRONG
                });
            });
        } else {
            res.json({
                success: false,
                error_code: response.error_code,
                error_description: response.error_description
            });
        }
    });
};

/////////// USER TRIP DETAIL ///////////////////
exports.user_tripdetail = function (req, res, next) {
    utils.check_request_params(req.body, [{ name: 'user_id', type: 'string' }, {
        name: 'trip_id',
        type: 'string'
    }], function (response) {
        if (response.success) {
            User.findOne({ _id: req.body.user_id }).then((users) => {
                if (users.token != req.body.token) {
                    res.json({ success: false, error_code: error_message.ERROR_CODE_INVALID_TOKEN });
                } else {
                    Trip.findOne({ _id: req.body.trip_id }).then((trip) => {
                        if (trip) {
                            if (trip.is_trip_cancelled == 0 && trip.is_trip_cancelled_by_user == 0 && trip.is_trip_cancelled_by_provider == 0 && trip.is_trip_end == 1) {

                                Trip_Service.findOne({ _id: trip.trip_service_city_type_id }).then((tripservice) => {
                                    if (tripservice) {
                                        TripLocation.findOne({ tripID: trip._id }).then((tripLocation) => {

                                            Provider.findOne({ _id: trip.confirmed_provider }).then((provider) => {

                                                res.json({
                                                    success: true,
                                                    message: success_messages.MESSAGE_CODE_HISTORY_DETAIL_GET_SUCCESSFULLY,
                                                    trip: trip,
                                                    tripservice: tripservice,
                                                    provider: provider,
                                                    startTripToEndTripLocations: tripLocation.startTripToEndTripLocations
                                                });
                                            });
                                        });

                                    } else {
                                        res.json({
                                            success: false,
                                            error_code: error_message.ERROR_CODE_TRIP_SERVICE_NOT_FOUND
                                        });

                                    }
                                });

                            } else {
                                res.json({
                                    success: false,
                                    error_code: error_message.ERROR_CODE_TRIP_IS_ALREADY_CANCELLED
                                });

                            }
                        } else {

                            res.json({ success: false, error_code: error_message.ERROR_CODE_YOUR_TRIP_DETAIL_NOT_FOUND });


                        }
                    }, (err) => {
                        console.log(err);
                        res.json({
                            success: false,
                            error_code: error_message.ERROR_CODE_SOMETHING_WENT_WRONG
                        });

                    });
                }
            }, (err) => {
                console.log(err);
                res.json({
                    success: false,
                    error_code: error_message.ERROR_CODE_SOMETHING_WENT_WRONG
                });
            });
        } else {
            res.json({
                success: false,
                error_code: response.error_code,
                error_description: response.error_description
            });
        }
    });
};

///////// PROVIDER TRIP DETAIL  //////////////
exports.provider_tripdetail = function (req, res, next) {
    utils.check_request_params(req.body, [{ name: 'provider_id', type: 'string' }, {
        name: 'trip_id',
        type: 'string'
    }], function (response) {
        if (response.success) {
            Provider.findOne({ _id: req.body.provider_id }).then((provider) => {
                if (provider.token != req.body.token) {
                    res.json({ success: false, error_code: error_message.ERROR_CODE_INVALID_TOKEN });
                } else {
                    Trip.findOne({ _id: req.body.trip_id }).then((trip) => {
                        if (trip) {
                            if (trip.is_trip_cancelled == 0 && trip.is_trip_cancelled_by_user == 0 && trip.is_trip_cancelled_by_provider == 0 && trip.is_trip_end == 1) {

                                Trip_Service.findOne({ _id: trip.trip_service_city_type_id }).then((tripservice) => {
                                    if (tripservice) {

                                        TripLocation.findOne({ tripID: trip._id }).then((tripLocation) => {


                                            User.findOne({ _id: trip.user_id }).then((user) => {

                                                res.json({
                                                    success: true,
                                                    message: success_messages.MESSAGE_CODE_FOR_PROVIDER_YOUR_TRIP_DETAIL_GET_SUCCESSFULLY,
                                                    trip: trip,
                                                    tripservice: tripservice,
                                                    user: user,
                                                    startTripToEndTripLocations: tripLocation.startTripToEndTripLocations
                                                });
                                            });
                                        });

                                    } else {
                                        res.json({
                                            success: false,
                                            error_code: error_message.ERROR_CODE_TRIP_SERVICE_NOT_FOUND
                                        });

                                    }
                                });

                            } else {
                                res.json({
                                    success: false,
                                    error_code: error_message.ERROR_CODE_TRIP_IS_ALREADY_CANCELLED
                                });

                            }
                        } else {
                            res.json({ success: false, error_code: error_message.ERROR_CODE_YOUR_TRIP_DETAIL_NOT_FOUND });

                        }
                    }, (err) => {
                        console.log(err);
                        res.json({
                            success: false,
                            error_code: error_message.ERROR_CODE_SOMETHING_WENT_WRONG
                        });
                    });
                }
            }, (err) => {
                console.log(err);
                res.json({
                    success: false,
                    error_code: error_message.ERROR_CODE_SOMETHING_WENT_WRONG
                });
            });
        } else {
            res.json({
                success: false,
                error_code: response.error_code,
                error_description: response.error_description
            });
        }
    });
};

// user_invoice //
exports.user_invoice = function (req, res) {
    utils.check_request_params(req.body, [{ name: 'user_id', type: 'string' }, {
        name: 'trip_id',
        type: 'string'
    }], function (response) {
        if (response.success) {
            User.findOne({ _id: req.body.user_id }).then((user) => {
                if (user) {
                    if (req.body.token != null && user.token != req.body.token) {
                        res.json({ success: false, error_code: error_message.ERROR_CODE_INVALID_TOKEN });
                    } else {
                        Trip.findOne({ _id: req.body.trip_id }).then((trip) => {

                            if (trip) {
                                if (trip.is_trip_cancelled == 0 && trip.is_trip_cancelled_by_provider == 0 && trip.is_trip_end == 1) {

                                    Provider.findOne({ _id: trip.provider_id }).then((provider) => {

                                        Trip_Service.findOne({ _id: trip.trip_service_city_type_id }).then((tripservice) => {

                                            if (!tripservice) {
                                                res.json({
                                                    success: false,
                                                    error_code: error_message.ERROR_CODE_TRIP_SERVICE_NOT_FOUND
                                                });
                                            } else {
                                                var email_notification = setting_detail.email_notification;
                                                if (email_notification == true) {
                                                    console.log("mail sent user invoice");
                                                    allemails.sendUserInvoiceEmail(req, user, provider, trip, tripservice);
                                                }

                                                res.json({
                                                    success: true,
                                                    message: success_messages.MESSAGE_CODE_GET_YOUR_INVOICE_SUCCESSFULLY,
                                                    trip: trip,
                                                    tripservice: tripservice,
                                                    provider_detail: {
                                                        first_name: provider.first_name,
                                                        last_name: provider.last_name,
                                                        picture: provider.picture
                                                    }
                                                });
                                            }
                                        });
                                    });

                                } else {
                                    res.json({
                                        success: false,
                                        error_code: error_message.ERROR_CODE_TRIP_IS_ALREADY_CANCELLED
                                    });
                                }
                            } else {

                                res.json({
                                    success: false,
                                    error_code: error_message.ERROR_CODE_TRIP_NOT_FOUND
                                });

                            }
                        }, (err) => {
                            console.log(err);
                            res.json({
                                success: false,
                                error_code: error_message.ERROR_CODE_SOMETHING_WENT_WRONG
                            });
                        });
                    }
                } else {
                    res.json({ success: false, error_code: error_message.ERROR_CODE_USER_DETAIL_NOT_FOUND });
                }
            }, (err) => {
                console.log(err);
                res.json({
                    success: false,
                    error_code: error_message.ERROR_CODE_SOMETHING_WENT_WRONG
                });
            });
        } else {
            res.json({
                success: false,
                error_code: response.error_code,
                error_description: response.error_description
            });
        }
    });
};

// provider_invoice // 
exports.provider_invoice = function (req, res) {
    utils.check_request_params(req.body, [{ name: 'provider_id', type: 'string' }, {
        name: 'trip_id',
        type: 'string'
    }], function (response) {
        if (response.success) {
            Provider.findOne({ _id: req.body.provider_id }).then((provider) => {
                if (provider) {
                    if (req.body.token != null && provider.token != req.body.token) {
                        res.json({ success: false, error_code: error_message.ERROR_CODE_INVALID_TOKEN });
                    } else {
                        Trip.findOne({ _id: req.body.trip_id }).then((trip) => {
                            if (trip) {
                                if (trip.is_trip_cancelled == 0 && trip.is_trip_cancelled_by_provider == 0 && trip.is_trip_end == 1) {

                                    Trip_Service.findOne({ _id: trip.trip_service_city_type_id }).then((tripservice) => {
                                        if (!tripservice) {
                                            res.json({
                                                success: false,
                                                error_code: error_message.ERROR_CODE_TRIP_SERVICE_NOT_FOUND
                                            });
                                        } else {
                                            var email_notification = setting_detail.email_notification;
                                            if (email_notification == true) {
                                                allemails.sendProviderInvoiceEmail(req, provider, trip, tripservice);
                                            }

                                            res.json({
                                                success: true,
                                                message: success_messages.MESSAGE_CODE_GET_INVOICE_SUCCESSFULLY,
                                                trip: trip,
                                                tripservice: tripservice
                                            });

                                        }
                                    });
                                } else {
                                    res.json({
                                        success: false,
                                        error_code: error_message.ERROR_CODE_TRIP_IS_ALREADY_CANCELLED
                                    });
                                }

                            } else {

                                res.json({ success: false, error_code: error_message.ERROR_CODE_TRIP_NOT_FOUND });
                            }
                        }, (err) => {
                            console.log(err);
                            res.json({
                                success: false,
                                error_code: error_message.ERROR_CODE_SOMETHING_WENT_WRONG
                            });
                        });
                    }
                } else {
                    res.json({ success: false, error_code: error_message.ERROR_CODE_PROVIDER_DETAIL_NOT_FOUND });
                }
            }, (err) => {
                console.log(err);
                res.json({
                    success: false,
                    error_code: error_message.ERROR_CODE_SOMETHING_WENT_WRONG
                });
            });
        } else {
            res.json({
                success: false,
                error_code: response.error_code,
                error_description: response.error_description
            });
        }
    });
};
////////////////////////////////////

////////////////////////// USER SET DESTINATION ///////////////////////////////////////
exports.user_setdestination = function (req, res) {
    utils.check_request_params(req.body, [{ name: 'user_id', type: 'string' }, {
        name: 'trip_id',
        type: 'string'
    }], function (response) {
        if (response.success) {
            User.findOne({ _id: req.body.user_id }).then((user) => {
                if (user) {
                    if (user.token != req.body.token) {
                        res.json({ success: false, error_code: error_message.ERROR_CODE_INVALID_TOKEN });
                    } else {
                        Trip.findOne({
                            _id: req.body.trip_id,
                            is_trip_cancelled: 0,
                            is_trip_cancelled_by_provider: 0,
                            user_id: req.body.user_id,
                            is_trip_end: 0
                        }).then((trip) => {
                            if (trip) {

                                Provider.findOne({ _id: trip.confirmed_provider }).then((providers) => {
                                    var device_token = providers.device_token;
                                    var device_type = providers.device_type;
                                    //////////////////////  PUSH NOTIFICATION ///////////
                                    utils.sendPushNotification(constant_json.PROVIDER_UNIQUE_NUMBER, device_type, device_token, push_messages.PUSH_CODE_FOR_SET_DESTINATION, constant_json.PUSH_NOTIFICATION_SOUND_FILE_IN_IOS);
                                });
                                var destination_address = "";
                                trip.destination_address = req.body.destination_address;
                                trip.destinationLocation = [req.body.d_latitude, req.body.d_longitude];
                                trip.save().then(() => {
                                    exports.trip_detail_notify(res, trip._id);
                                    res.json({
                                        success: true,
                                        message: success_messages.MESSAGE_CODE_SET_DESTINATION_SUCCESSFULLY,
                                        destinationLocation: trip.destinationLocation
                                    });
                                });
                            } else {
                                res.json({ success: false, error_code: error_message.ERROR_CODE_DESTINATION_NOT_SET });
                            }
                        }, (err) => {
                            console.log(err);
                            res.json({
                                success: false,
                                error_code: error_message.ERROR_CODE_SOMETHING_WENT_WRONG
                            });
                        });
                    }
                } else {
                    res.json({ success: false, error_code: error_message.ERROR_CODE_USER_DETAIL_NOT_FOUND });
                }
            }, (err) => {
                console.log(err);
                res.json({
                    success: false,
                    error_code: error_message.ERROR_CODE_SOMETHING_WENT_WRONG
                });
            });
        } else {
            res.json({
                success: false,
                error_code: response.error_code,
                error_description: response.error_description
            });
        }
    });
};
// getgooglemappath

exports.getgooglemappath = function (req, res) {
    utils.check_request_params(req.body, [{ name: 'trip_id', type: 'string' }], function (response) {
        if (response.success) {
            TripLocation.findOne({ tripID: req.body.trip_id }).then((tripLocation) => {

                if (tripLocation) {
                    res.json({ success: true, triplocation: tripLocation });
                } else {
                    res.json({ success: false });
                }

            });
        } else {
            res.json({
                success: false,
                error_code: response.error_code,
                error_description: response.error_description
            });
        }
    });
};
//setgooglemappath  
exports.setgooglemappath = function (req, res) {
    utils.check_request_params(req.body, [{ name: 'trip_id', type: 'string' }], function (response) {
        if (response.success) {
            TripLocation.findOne({ tripID: req.body.trip_id }).then((tripLocation) => {

                tripLocation.googlePickUpLocationToDestinationLocation = req.body.googlePickUpLocationToDestinationLocation;
                tripLocation.googlePathStartLocationToPickUpLocation = req.body.googlePathStartLocationToPickUpLocation;
                tripLocation.save().then(() => {
                    res.json({ success: true });

                });
            });
        } else {
            res.json({
                success: false,
                error_code: response.error_code,
                error_description: response.error_description
            });
        }
    });
};

exports.pay_pending_payment = function (req, res) {
    User.findOne({ _id: req.body.user_id }, function (err, user) {
        if (user) {
            // if (user.token != req.body.token) {
            //     res.json({success: false, error_code: error_message.ERROR_CODE_INVALID_TOKEN});
            // } else {

            Trip.findOne({ _id: req.body.trip_id, user_id: req.body.user_id }, function (err, trip) {

                if (trip) {
                    Card.findOne({ user_id: trip.user_id, is_default: 1 }, function (err, card) {

                        if (card) {
                            var stripe_secret_key = setting_detail.stripe_secret_key;
                            var cut_amount_from_card = Math.round(trip.remaining_payment * 100);
                            var countryCurrencyCode = trip.currencycode;
                            var customer_id = card.customer_id;
                            var stripe = require("stripe")(stripe_secret_key);

                            var charge = stripe.charges.create({
                                amount: cut_amount_from_card, // amount in cents, again
                                currency: countryCurrencyCode,
                                customer: customer_id

                            }, function (err, charge) {
                                if (charge) {
                                    trip.is_paid = 1;
                                    trip.is_pending_payments = 0;
                                    trip.remaining_payment = 0;
                                    var payment_transaction = {
                                        transaction_type: "stripe",
                                        transaction_info: {
                                            id: charge.id,
                                            balance_transaction: charge.balance_transaction,
                                            source: {
                                                id: charge.source.id
                                            }
                                        }
                                    }
                                    trip.payment_transaction.push(payment_transaction);
                                    trip.save();
                                    res.json({
                                        success: true,
                                        message: success_messages.MESSAGE_CODE_PAYMENT_SUCCESSFULLY
                                    })
                                } else {
                                    trip.is_paid = 0;
                                    trip.is_pending_payments = 1;
                                    trip.card_payment = 0;
                                    trip.paymentError = err.type;
                                    trip.paymentErrorMessage = utils.paymentError(err);
                                    trip.save();
                                    res.json({
                                        success: false,
                                        error_code: error_message.ERROR_CODE_YOUR_TRIP_PAYMENT_IS_PENDING
                                    })
                                }


                            });
                        } else {
                            res.json({ success: false, error_code: error_message.ERROR_CODE_CARD_NOT_FOUND });
                        }
                    });
                } else {
                    res.json({ success: false, error_code: error_message.ERROR_CODE_TRIP_NOT_FOUND });
                }

            });

            // }

        } else {
            res.json({ success: false, error_code: error_message.ERROR_CODE_USER_DETAIL_NOT_FOUND });

        }
    });
}


exports.check_trip_inside_zone_queue = function (city_id, latitude, longitude, res_data) {
    CityZone.find({ cityid: city_id }, function (error, zone_queue_list) {
        if (zone_queue_list.length > 0) {
            var is_trip_inside_zone_queue = false;
            zone_queue_list.forEach(function (zone_queue_data, index) {
                var geo = geolib.isPointInside(
                    { latitude: latitude, longitude: longitude },
                    zone_queue_data.kmlzone
                );
                if (geo) {
                    is_trip_inside_zone_queue = true;
                }

                if (index == zone_queue_list.length - 1) {
                    res_data({ is_trip_inside_zone_queue: is_trip_inside_zone_queue })
                }
            });


        } else {
            res_data({ is_trip_inside_zone_queue: false });
        }
    });
};



exports.twilio_voice_call = function (req, res) {
    var trip_id = req.body.trip_id;
    console.log("twilio_voice_call")
    console.log(req.body)
    Trip.findOne({ _id: trip_id }, function (err, trip) {
        if (trip) {

            var user_id = trip.user_id;
            var provider_id = trip.confirmed_provider;

            var twilio_account_sid = setting_detail.twilio_account_sid;
            var twilio_auth_token = setting_detail.twilio_auth_token;
            var twilio_number = setting_detail.twilio_number;
            var client = require('twilio')(twilio_account_sid, twilio_auth_token);
            var twiml_url = setting_detail.twiml_url;

            if (req.body.type == 1) {
                Provider.findOne({ _id: provider_id }, function (err, provider) {
                    User.findOne({ _id: user_id }, function (err, user) {

                        if (provider) {
                            var provider_number = provider.country_phone_code + provider.phone;
                            var user_number = user.country_phone_code + user.phone;

                            twiml_url = twiml_url + "?to=" + provider_number;
                            client.calls.create({
                                url: twiml_url,
                                to: user_number,
                                from: twilio_number
                            }, function (err, call) {
                                if (err) {
                                    console.log(err)
                                    res.json({ "success": false });

                                } else {
                                    res.json({ "success": true });
                                }
                            });
                        }
                    });
                });
            } else {
                User.findOne({ _id: user_id }, function (err, user) {
                    Provider.findOne({ _id: provider_id }, function (err, provider) {
                        if (user) {
                            var provider_number = provider.country_phone_code + provider.phone;
                            var user_number = user.country_phone_code + user.phone;
                            twiml_url = twiml_url + "?to=" + user_number;

                            client.calls.create({
                                url: twiml_url,
                                to: provider_number,
                                from: twilio_number
                            }, function (err, call) {
                                if (err) {
                                    console.log(err)

                                    res.json({ "success": false });

                                } else {
                                    res.json({ "success": true });
                                }
                            });
                        }
                    });
                });
            }

        }
        else {
            res.json({ "success": false });
        }

    });
}

exports.getPhlebTrips = function (req, res) {

    utils.check_request_params(req.body, [{ name: 'email', type: 'string' }], function (response) {
        if (response.success) {
            Provider.findOne({ email: req.body.email }).then((provider) => {
                if (provider) {
                    if (req.body.token != null && provider.token != req.body.token) {
                        res.json({ success: false, error_code: error_message.ERROR_CODE_INVALID_TOKEN });
                    } else {
                        var dtm = "2020-12-25 00:00:00";//new Date().toISOString().replace(/T/, ' ').replace(/\..+/, '');
                        //	console.log('Htest dtm = ' + dtm);
                        try {
                            sql.query('CALL Gettrip("' + req.body.email + '","' + dtm + '" )'
                                , (err, rows, fields) => {
                                    if (err) {
                                        console.log(err);
                                    }
                                    else {
                                        if (rows != null) {
                                            var newRow = getData(rows[0]).then((data) => {
                                                res.json(data);
                                            });
                                        }
                                    }
                                });
                        }
                        catch (e) {
                            console.log(e);
                        }
                    }
                } else {
                    res.json({ success: false, error_code: error_message.ERROR_CODE_PROVIDER_DETAIL_NOT_FOUND });
                }
            }, (err) => {
                console.log(err);
                res.json({
                    success: false,
                    error_code: error_message.ERROR_CODE_SOMETHING_WENT_WRONG
                });
            });
        }
        else {
            res.json({
                success: false,
                error_code: response.error_code,
                error_description: response.error_description
            });
        }
    });

};

exports.getTripSummary = function (req, res) {

    utils.check_request_params(req.body, [{ name: 'email', type: 'string' }], function (response) {
        if (response.success) {
            Provider.findOne({ email: req.body.email }).then((provider) => {
                if (provider) {
                    if (req.body.token != null && provider.token != req.body.token) {
                        res.json({ success: false, error_code: error_message.ERROR_CODE_INVALID_TOKEN });
                    } else {
                        var dtm = "2020-12-28 00:00:00";//new Date().toISOString().replace(/T/, ' ').replace(/\..+/, '');
                        //	console.log('Htest dtm = ' + dtm);
                        const newDtm = new Date(dtm);
                        newDtm.setDate(newDtm.getDate() + 1);
                        var tomorrow = newDtm.toISOString().replace(/T/, ' ').replace(/\..+/, '');
                        //console.log('tomorrow = ' + tomorrow);      
                        try {
                            sql.query('SELECT CONCAT(a.Street, "' + ' ' + '",IFNULL(a.Street1, "' + '' + '"), "' + ' ' + '",IFNULL(city.Name, "' + '' + '"), "' + ' ' + '",IFNULL(a.State, "' + '' + '"), "' + ' ' + '",IFNULL(a.Zip, "' + '' + '")) AS PatientAddress,CONCAT(cl.Street, "' + ' ' + '",IFNULL(cl.Street1, "' + '' + '"), "' + ' ' + '",IFNULL(clct.Name, "' + '' + '"), "' + ' ' + '",IFNULL(cl.State, "' + '' + '"), "' + ' ' + '",IFNULL(cl.Zip, "' + '' + '")) AS LabAddress ' +
                                'FROM requisitions r ' +
                                'LEFT JOIN patients pt ON r.PatientSysID = pt.SysID ' +
                                'LEFT JOIN requisitionresults res ON r.SysID = res.RequisitionSysID ' +
                                'LEFT JOIN clinics cl ON cl.Code = res.ScheduledLab ' +
                                'LEFT JOIN cities clct ON cl.City = clct.SysID ' +
                                'LEFT JOIN patientaddresses pa ON pa.PatientSysID =pt.SysID AND pa.AddressID = (SELECT ad.ID from addresses ad WHERE ad.ID= pa.AddressID AND ad.Type = 0) ' +
                                'LEFT JOIN addresses a ON pa.AddressID = a.ID AND a.Type = 0 ' +
                                'LEFT JOIN cities city ON a.City = city.SysID ' +
                                'JOIN iss_indralok.users u ON u.UserID = r.PhlebotomistID ' +
                                'WHERE u.UserEmail = "' + req.body.email + '" && r.ScheduledDtm>="' + dtm + '" && r.ScheduledDtm<"' + tomorrow + '" ' +
                                'GROUP BY r.SysID'
                                , (err, rows, fields) => {
                                    if (err) {
                                        console.log(err);
                                    }
                                    else {
                                        if (rows != null) {
                                            console.log('Rows = ' + JSON.stringify(rows));
                                            var newRow = getData(rows).then((data) => {
                                                res.json(data);
                                            });
                                        }
                                    }
                                });
                        }
                        catch (e) {
                            console.log(e);
                        }
                    }
                } else {
                    res.json({ success: false, error_code: error_message.ERROR_CODE_PROVIDER_DETAIL_NOT_FOUND });
                }
            }, (err) => {
                console.log(err);
                res.json({
                    success: false,
                    error_code: error_message.ERROR_CODE_SOMETHING_WENT_WRONG
                });
            });
        }
        else {
            res.json({
                success: false,
                error_code: response.error_code,
                error_description: response.error_description
            });
        }
    });

};



//try this async await
const rowdata = (rows) => {
    return new Promise((resolve, reject) => {
        //your row loop logic implement here
        //var rowJson = rows;
        var dest = 0;
        var dura = 0;
        var origins = [rows.PatientAddress];
        var destinations = [rows.LabAddress];
        distance.key(config.GoogleMapKey);
        distance.units('imperial');
        distance.matrix(origins, destinations, function (err, distances) {
            if (err) {
                console.log(err);
            }
            else {
                if (!distances) {
                    return console.log('no distances');
                }
                if (distances.status == 'OK') {
                    for (var i = 0; i < origins.length; i++) {
                        for (var j = 0; j < destinations.length; j++) {
                            var origin = distances.origin_addresses[i];
                            var destination = distances.destination_addresses[j];
                            if (distances.rows[0].elements[j].status == 'OK') {
                                var distance = distances.rows[i].elements[j].distance.text;
                                var duration = distances.rows[i].elements[j].duration.text;

                                rows['distance'] = distance;
                                rows['duration'] = duration;
                                console.log('Distance  is ' + distance);
                                console.log('Duration is ' + duration);
                                resolve(rows);
                                //reject('error');


                            }
                            else {
                                console.log(destination + ' is not reachable by land from ' + origin);
                            }
                        }
                        //console.log(dest.toString()+"  "+dura.toString());
                        //console.log('element = '+JSON.stringify(rows));
                    }
                }
            }
        });


        // resolve(rowJson);
        //reject('error');
    });
}

async function getData(rows) {
    try {
        var jsonObj = [];
        for (var i = 0; i < rows.length; i++) {
            var rData = await rowdata(rows[i]);
            jsonObj.push(rData);

        }

        return jsonObj;
    }
    catch (err) {
        console.log(err);
    }
}


exports.getEquipments = function (req, res) {
    utils.check_request_params(req.body, [{ name: 'email', type: 'string' }], function (response) {
        if (response.success) {
            Provider.findOne({ email: req.body.email }).then((provider) => {
                if (provider) {
                    if (req.body.token != null && provider.token != req.body.token) {
                        res.json({ success: false, error_code: error_message.ERROR_CODE_INVALID_TOKEN });
                    } else {
                        var dtm = "2020-12-25 00:00:00";//new Date().toISOString().replace(/T/, ' ').replace(/\..+/, '');
                        //	console.log('Htest dtm = ' + dtm);
                        try {
                            sql.query('SELECT GROUP_CONCAT(sp.Name) as Specimens,COUNT(sp.Code) as SpecimenCount ' +
                                'FROM requisitions r ' +
                                'JOIN requisitionspecimens rs ON r.SysID = rs.RequisitionSysID ' +
                                'LEFT JOIN specimentypes sp ON rs.specimenypeCode = sp.Code ' +
                                'JOIN iss_indralok.users u ON u.UserID = r.PhlebotomistID ' +
                                'WHERE u.UserEmail = "' + req.body.email + '" && r.ScheduledDtm>="' + dtm + '" ' +
                                'GROUP BY r.SysID;'
                                , (err, rows, fields) => {
                                    if (err) {
                                        console.log(err);
                                    }
                                    else {
                                        res.json(rows);
                                    }
                                });
                        }
                        catch (e) {
                            console.log(e);
                        }
                    }
                } else {
                    res.json({ success: false, error_code: error_message.ERROR_CODE_PROVIDER_DETAIL_NOT_FOUND });
                }
            }, (err) => {
                console.log(err);
                res.json({
                    success: false,
                    error_code: error_message.ERROR_CODE_SOMETHING_WENT_WRONG
                });
            });
        }
        else {
            res.json({
                success: false,
                error_code: response.error_code,
                error_description: response.error_description
            });
        }
    });

};

/*** 
 * Import Trip (Input as XML data) 
 * Crated By: Ketan Prajapati
 * Created Date: 11-May-2021
 * ***/
exports.import_trip = function (req, res) {
    if (req.header('Content-Type').endsWith("xml")) {
        var order = req.body.hl7outboundmessagedto.orderinfo[0];
        console.log("Order Import Trip :: "+order.labrequisitionid[0]);
        // console.log("Order Import Trip Status :: "+order.status[0]);
        TripOrder.findOne({ requisitionsysid: order.requisitionsysid[0] }).then(req_data => {

            var tripOrder = parse_import_trip_xml(req.body, req_data);
          
            var requisitionsysid = Number(order.requisitionsysid[0]);
            let promise;
            //Save Trip
            User.findOne({ userSysID: tripOrder.order.patient.user_patient_id }).then((user_data) => {
                //User.findOne({id: ObjectId('5d0c614295bbc03595c1212f')}).then((user_data) => {
                if (!user_data) {
                    //userController.user_register();
                    //tripOrder.order.patient.address.country
                    var patient = tripOrder.order.patient;
                    var req_data = {
                        first_name: patient.firstname,
                        last_name: patient.lastname,
                        email: patient.email,
                        phone: patient.phone,
                        gender: patient.gender,
                        address: patient.address,
                        city: patient.address.city,//changes by Mayursinh 30-12-2021 for adding city 
                        country: patient.address.country,//changes by Mayursinh 30-12-2021 for adding country
                        userSysId: patient.user_patient_id
                    };
                    // console.log("req_data 1");
                    // console.log(req_data);
                    exports.save_user(req_data, function (response) {
                        User.findOne({ userSysID: tripOrder.order.patient.user_patient_id }).then((user_data) => {
                            
                            if (!user_data) {
                                res.json({ success: false, error_code: error_message.ERROR_CODE_USER_DETAIL_NOT_FOUND });
                            } else {
                                // console.log("req_data 2");
                                tripOrder.order.patient.patientprofilepicture = user_data.picture;
                                tripOrder.order.patient.email = user_data.email;
                                tripOrder.user_id = user_data.id;
                                tripOrder.order.patient.user_id = user_data.id;

                                
                                //commented by Mayursinh Zala for the auto updation of orders from LIS to Mongo Sync guided by Ajay and Milan.
                                // if (user_data.current_trip_id) {
                                    // res.json({ success: false, error_code: error_message.ERROR_CODE_TRIP_ALREADY_RUNNING });
                                // } else {
                                    Provider.findOne({ userSysID: tripOrder.phlebotomistid }).then((provider) => {
                                        // console.log("req_data 3");
                                        var provider_id = null
                                        if (provider) {
                                            tripOrder.provider_id = provider._id;
                                            
                                            provider_id = provider._id;
                                            tripOrder.service_type_id = provider.service_type;
                                           
                                        }
                                        //TODO: Create provider if not exists on Mongo
                                        //Added by Mayursinh Zala on 30-12-2021 for setting default service type
                                        if(tripOrder.service_type_id=="" || tripOrder.service_type_id==null){
                                            tripOrder.service_type_id = "5d11e2d795bbc03595c12136";//added static 
                                        }
                                        Citytype.findOne({ _id: tripOrder.service_type_id }).then((citytype) => {   //TODO: Require Service Type Id
                                            exports.check_trip_inside_zone_queue(citytype.city_id, tripOrder.order.patient.address.latitude, tripOrder.order.patient.address.longitude, function (data) {
                                                tripOrder.is_trip_inside_zone_queue = data.is_trip_inside_zone_queue;
                                                 
                                                var trip_type = constant_json.TRIP_TYPE_NORMAL;

                                                //_id: tripOrder.trip_id 
                                                Trip.findOne({ requsitionSysID: requisitionsysid, triptype: 'Draw' }).then((response) => {
                                                    if (tripOrder.trip_id != null && response != null) {
                                                        var trip = response;
                                                        console.log("Trip Order status update ")
                                                        console.log(tripOrder.status)
                                                        trip.requsitionSysID = tripOrder.requisitionsysid;
                                                        trip.provider_id = tripOrder.provider_id;
                                                        trip.labRequisitionID = tripOrder.labRequisitionID;
                                                        trip.status=tripOrder.status;
                                                       
                                                        var dateNow = new Date();
                                                        var schedule_start_time = null;
                                                        var server_start_time_for_schedule = null;
                                                        var is_schedule_trip = false;
                                                        //change below condition on 29-03-2022 by Monika Patel
                                                        // if(tripOrder.status==4){
                                                        if(tripOrder.status >= 3 && tripOrder.status != 101){
                                                            trip.current_provider = tripOrder.provider_id;
                                                            trip.confirmed_provider = tripOrder.provider_id;
                                                        }

                                                        //add below condition on 29-03-2022 by monika as not update is_trip_cancelled flag while cancelled from LIS
                                                        if(tripOrder.status==101){
                                                            trip.is_trip_cancelled = 1;
                                                        }
                                                        //end 10-03-2022

                                                        //if (tripData.order.orderlist[0].status=='Pending') {
                                                            if (tripOrder.start_time) {
                                                                is_schedule_trip = true; 
                                                                schedule_start_time = Number(tripOrder.start_time);
                                                                // var addMiliSec = dateNow.getTime() + schedule_start_time;
                                                                // server_start_time_for_schedule = new Date(addMiliSec);
                                                                server_start_time_for_schedule = tripOrder.start_time
                                                            }
                                                            
                                                            trip.is_schedule_trip = is_schedule_trip;
                                                            trip.schedule_start_time = schedule_start_time;                                                            
                                                            trip.server_start_time_for_schedule = server_start_time_for_schedule;                                    
                                                            trip.lis_created_time = tripOrder.lis_created_time;//added by Mayursinh Zala to add created Date time of LIS in Mongo panel on 29-12-2021
                                                            
                                                            // console.log("req_data 4");
                                                        trip.save().then(() => {
                                                            tripOrder.save().then(() => {
                                                                if (provider) {
                                                                     
                                                                    var trips = provider.is_trip;
                                                                    trips.push(trip._id);
                                                                    const unique = (value, index, self) => {
                                                                        return self.indexOf(value) === index
                                                                    }
                                                                    const uniquetrips = trips.filter(unique);
                                                                    provider.is_trip = uniquetrips;
                                                                    //console.log(uniquetrips);
                                                                    provider.total_request = provider.total_request + 1;
                                                                    myAnalytics.insert_daily_provider_analytics(trip.timezone, provider._id, TRIP_STATUS.INITIATE_TRIP, null);
                                                                    provider.accepted_request = provider.accepted_request + 1;
                                                                    // myAnalytics.insert_daily_provider_analytics(trip.timezone, provider_detail._id, TRIP_STATUS.PROVIDER_ACCEPTED, null);
                                                                    provider.save(function (err) {
                                                                        // console.log(err);
                                                                    });

                                                                }
                                                                res.json({
                                                                    success: true,
                                                                    trip: trip,
                                                                    tripOrder: tripOrder,
                                                                    message: success_messages.MESSAGE_CODE_YOUR_FUTURE_TRIP_CREATE_SUCCESSFULLY
                                                                });
                                                            },
                                                                (err) => {
                                                                    // console.log("err 0")
                                                                    // console.log(err)
                                                                    res.json({
                                                                        success: false,
                                                                        message: err,
                                                                        error_code: error_message.ERROR_CODE_TRIP_ORDER_NOT_SAVE
                                                                    });
                                                                });
                                                        });
                                                    }
                                                    else {

                                                        exports.create_trip_new(user_data, trip_type, tripOrder.service_type_id, tripOrder, 'Draw', function (response) {

                                                            if (response.success) {
                                                                var trip = response.trip;
                                                                tripOrder.trip_id = trip.id;

                                                                tripOrder.save().then(() => {
                                                                    //if (trip.is_schedule_trip) {
                                                                    if (trip.status != 2) {
                                                                        if (provider) {

                                                                            var trips = provider.is_trip;

                                                                            trips.push(trip._id);
                                                                            const unique = (value, index, self) => {
                                                                                return self.indexOf(value) === index
                                                                            }
                                                                            const uniquetrips = trips.filter(unique);
                                                                            provider.is_trip = uniquetrips;
                                                                            // console.log(uniquetrips);

                                                                            provider.total_request = provider.total_request + 1;
                                                                            myAnalytics.insert_daily_provider_analytics(trip.timezone, provider._id, TRIP_STATUS.INITIATE_TRIP, null);
                                                                            provider.accepted_request = provider.accepted_request + 1;
                                                                            // myAnalytics.insert_daily_provider_analytics(trip.timezone, provider_detail._id, TRIP_STATUS.PROVIDER_ACCEPTED, null);
                                                                            provider.save(function (err) {
                                                                                // console.log("err 2")
                                                                                // console.log(err);
                                                                            });


                                                                            utils.sendPushNotification(constant_json.PROVIDER_UNIQUE_NUMBER, provider.device_type, provider.device_token, push_messages.PUSH_CODE_FOR_SCHEDULE_TRIP, constant_json.PUSH_NOTIFICATION_SOUND_FILE_IN_IOS);
                                                                        }

                                                                        res.json({
                                                                            success: true,
                                                                            trip: trip,
                                                                            tripOrder: tripOrder,
                                                                            message: success_messages.MESSAGE_CODE_YOUR_FUTURE_TRIP_CREATE_SUCCESSFULLY
                                                                        });
                                                                    } else {
                                                                        exports.nearest_provider(trip, provider_id, user_data.favourite_providers, function (nearest_provider_response) {
                                                                            if (nearest_provider_response.success) {
                                                                                user_data.current_trip_id = trip._id;
                                                                                user_data.save();
                                                                              //  return nearest_provider_response;
                                                                              return res.json({
                                                                                success: true,
                                                                                message: success_messages.MESSAGE_CODE_YOUR_TRIP_CREATED_SUCCESSFULLY,
                                                                                trip_id: trip._id
                                                                               });
                                                                            } else {
                                                                                console.log("error trip 6467")
                                                                                res.json({
                                                                                    success: false,
                                                                                    error_code: error_message.ERROR_CODE_CREATE_TRIP_FAILED+" Could not find Neareast Provider for Satus 2. "
                                                                                });
                                                                            }
                                                                        });
                                                                    }
                                                                });


                                                            } else {
                                                                res.json(response);
                                                            }
                                                        });
                                                    }
                                                },
                                                    (err) => {
                                                        // console.log("err 3")
                                                                    // console.log(err)
                                                        res.json({
                                                            success: false,
                                                            message: err,
                                                            error_code: error_message.ERROR_CODE_TRIP_NOT_FOUND
                                                        });
                                                    });                                              

                                            });
                                        },
                                            (err) => {
                                                // console.log("err 4")
                                                                    // console.log(err)
                                                res.json({
                                                    success: false,
                                                    message: err,
                                                    error_code: error_message.ERROR_CODE_CITY_TYPE_NOT_FOUND
                                                });
                                            });
                                    },
                                        (err) => {
                                            // console.log("err 6")
                                                                    // console.log(err)
                                            res.json({
                                                success: false,
                                                message: err,
                                                error_code: error_message.ERROR_CODE_PROVIDER_NOT_FOUND
                                            });
                                        });
                                // }
                            }
                        },
                            (err) => {
                                // console.log("err 7")
                                                                    // console.log(err)
                                res.json({
                                    success: false,
                                    message: err,
                                    error_code: error_message.ERROR_CODE_USER_DETAIL_NOT_FOUND
                                });
                            });
                    });
                }
            });

            //Save Trip
            User.findOne({ userSysID: tripOrder.order.patient.user_patient_id }).then((user_data) => {
                
                if (user_data) {
                    tripOrder.order.patient.patientprofilepicture = user_data.picture;
                    tripOrder.order.patient.email = user_data.email;
                    tripOrder.user_id = user_data.id;
                    tripOrder.order.patient.user_id = user_data.id;
                    
                    //commented by Mayursinh Zala for the auto updation of orders from LIS to Mongo Sync guided by Ajay and Milan.
                    // if (user_data.current_trip_id) {
                        // res.json({ success: false, error_code: error_message.ERROR_CODE_TRIP_ALREADY_RUNNING });
                    // } else {
                        Provider.findOne({ userSysID: tripOrder.phlebotomistid }).then((provider) => {
                            var provider_id = null
                            if (provider) {
                                tripOrder.provider_id = provider._id;
                              
                                provider_id = provider._id;
                                tripOrder.service_type_id = provider.service_type;
                               
                            }

                            if(tripOrder.service_type_id=="" || tripOrder.service_type_id==null){
                                tripOrder.service_type_id = "5d11e2d795bbc03595c12136";//added static 
                            }
                            //5d11e2d795bbc03595c12136
                            console.log("tripOrder.service_type_id ::: "+tripOrder.service_type_id)
                            Citytype.findOne({ _id: tripOrder.service_type_id }).then((citytype) => {   //TODO: Require Service Type Id
                                exports.check_trip_inside_zone_queue(citytype.city_id, tripOrder.order.patient.address.latitude, tripOrder.order.patient.address.longitude, function (data) {
                                    tripOrder.is_trip_inside_zone_queue = data.is_trip_inside_zone_queue;
                                    var trip_type = constant_json.TRIP_TYPE_NORMAL;
                                    //_id: tripOrder.trip_id 
                                    console.log("tripOrder.status while updating ")
                                    console.log(tripOrder.status)
                                    Trip.findOne({ requsitionSysID: requisitionsysid, triptype: 'Draw' }).then((response) => {
                                        console.log("tripOrder ----6644------")
                                        console.log(tripOrder)
                                        console.log("response ----6644------")
                                        console.log(response)
                                        if (tripOrder.trip_id != null && response != null) {
                                            console.log('update trip data ------6649----')
                                            var trip = response;

                                            trip.requsitionSysID = tripOrder.requisitionsysid;
                                            trip.provider_id = tripOrder.provider_id;
                                            trip.labRequisitionID = tripOrder.labRequisitionID;
                                            trip.status=tripOrder.status;
                                            trip.lis_created_time = tripOrder.lis_created_time;//added by Mayursinh Zala to add created Date time of LIS in Mongo panel on 29-12-2021
                                            
                                            // trip.trip_type= trip_type;   
                                            var dateNow = new Date();
                                            var schedule_start_time = null;
                                            var server_start_time_for_schedule = null;
                                            var is_schedule_trip = false;
                                            //change below condition on 29-03-2022 by Monika Patel
                                            // if(tripOrder.status==4){
                                            if(tripOrder.status >= 3 && tripOrder.status != 101){
                                                trip.current_provider = tripOrder.provider_id;
                                                trip.confirmed_provider = tripOrder.provider_id;
                                            }

                                            //add below condition on 29-03-2022 by monika as not update is_trip_cancelled flag while cancelled from LIS
                                            if(tripOrder.status==101){
                                                trip.is_trip_cancelled = 1;
                                            }
                                            //end 29-03-2022
                                            //if (tripData.order.orderlist[0].status=='Pending') {
                                            
                                            if (tripOrder.start_time) {
                                                is_schedule_trip = true;   
                                                schedule_start_time = Number(tripOrder.start_time);
                                                // var addMiliSec = dateNow.getTime() + schedule_start_time;
                                                // server_start_time_for_schedule = new Date(addMiliSec);
                                                server_start_time_for_schedule = tripOrder.start_time
                                            }

                                            
                                            trip.is_schedule_trip = is_schedule_trip;
                                            trip.schedule_start_time = schedule_start_time;                                                            
                                            trip.server_start_time_for_schedule = server_start_time_for_schedule;
                                            
                                            trip.save().then(() => {
                                                tripOrder.save().then(() => {
                                                    if (provider) {
                                                         
                                                        var trips = provider.is_trip;
                                                        trips.push(trip._id);
                                                        const unique = (value, index, self) => {
                                                            return self.indexOf(value) === index
                                                        }
                                                        const uniquetrips = trips.filter(unique);
                                                        provider.is_trip = uniquetrips;
                                                        // console.log(uniquetrips);
                                                        provider.total_request = provider.total_request + 1;
                                                        myAnalytics.insert_daily_provider_analytics(trip.timezone, provider._id, TRIP_STATUS.INITIATE_TRIP, null);
                                                        provider.accepted_request = provider.accepted_request + 1;
                                                        // myAnalytics.insert_daily_provider_analytics(trip.timezone, provider_detail._id, TRIP_STATUS.PROVIDER_ACCEPTED, null);
                                                        provider.save(function (err) {
                                                            // console.log("err 9")
                                                            // console.log(err)
                                                        });

                                                    }
                                                    res.json({
                                                        success: true,
                                                        trip: trip,
                                                        tripOrder: tripOrder,
                                                        message: success_messages.MESSAGE_CODE_YOUR_FUTURE_TRIP_CREATE_SUCCESSFULLY
                                                    });
                                                },
                                                    (err) => {
                                                        // console.log("err 10")
                                                                    // console.log(err)
                                                        res.json({
                                                            success: false,
                                                            message: err,
                                                            error_code: error_message.ERROR_CODE_TRIP_ORDER_NOT_SAVE
                                                        });
                                                    });
                                            });
                                        }
                                        else {
                                            console.log('add new trip entry ------6722----')
                                            exports.create_trip_new(user_data, trip_type, tripOrder.service_type_id, tripOrder, 'Draw', function (response) {

                                                if (response.success) {
                                                    var trip = response.trip;
                                                    tripOrder.trip_id = trip.id;

                                                    tripOrder.save().then(() => {
                                                        //if (trip.is_schedule_trip) {
                                                        if (trip.status != 2) {
                                                            if (provider) {

                                                                var trips = provider.is_trip;

                                                                trips.push(trip._id);
                                                                const unique = (value, index, self) => {
                                                                    return self.indexOf(value) === index
                                                                }
                                                                const uniquetrips = trips.filter(unique);
                                                                provider.is_trip = uniquetrips;
                                                                // console.log(uniquetrips);

                                                                provider.total_request = provider.total_request + 1;
                                                                myAnalytics.insert_daily_provider_analytics(trip.timezone, provider._id, TRIP_STATUS.INITIATE_TRIP, null);
                                                                provider.accepted_request = provider.accepted_request + 1;
                                                                // myAnalytics.insert_daily_provider_analytics(trip.timezone, provider_detail._id, TRIP_STATUS.PROVIDER_ACCEPTED, null);
                                                                provider.save(function (err) {
                                                                    // console.log("err 11")
                                                                    // console.log(err)
                                                                });


                                                                utils.sendPushNotification(constant_json.PROVIDER_UNIQUE_NUMBER, provider.device_type, provider.device_token, push_messages.PUSH_CODE_FOR_SCHEDULE_TRIP, constant_json.PUSH_NOTIFICATION_SOUND_FILE_IN_IOS);
                                                            }

                                                            res.json({
                                                                success: true,
                                                                trip: trip,
                                                                tripOrder: tripOrder,
                                                                message: success_messages.MESSAGE_CODE_YOUR_FUTURE_TRIP_CREATE_SUCCESSFULLY
                                                            });
                                                        } else {
                                                            exports.nearest_provider(trip, provider_id, user_data.favourite_providers, function (nearest_provider_response) {
                                                                if (nearest_provider_response.success) {
                                                                    user_data.current_trip_id = trip._id;
                                                                    user_data.save();
                                                                   // return nearest_provider_response;
                                                                   return res.json({
                                                                    success: true,
                                                                    message: success_messages.MESSAGE_CODE_YOUR_TRIP_CREATED_SUCCESSFULLY,
                                                                    trip_id: trip._id
                                                                   });
                                                                } else {
                                                                    // console.log(nearest_provider_response)
                                                                    // console.log("error trip 6687")
                                                                    res.json({
                                                                        success: false,
                                                                        error_code: error_message.ERROR_CODE_CREATE_TRIP_FAILED+" Could not find nearest_provider"
                                                                    });
                                                                }
                                                            });
                                                        }
                                                    });


                                                } else {
                                                    res.json(response);
                                                }
                                            });
                                        }
                                    },
                                        (err) => {
                                            // console.log("err 12")
                                            // console.log(err)
                                            res.json({
                                                success: false,
                                                message: err,
                                                error_code: error_message.ERROR_CODE_TRIP_NOT_FOUND
                                            });
                                        });

                                });
                            },
                                (err) => {
                                    // console.log("err 13")
                                        // console.log(err)
                                    res.json({
                                        success: false,
                                        message: err,
                                        error_code: error_message.ERROR_CODE_CITY_TYPE_NOT_FOUND
                                    });
                                });
                        },
                            (err) => {
                                // console.log("err 15")
                                                                    // console.log(err)
                                res.json({
                                    success: false,
                                    message: err,
                                    error_code: error_message.ERROR_CODE_PROVIDER_NOT_FOUND
                                });
                            });
                    // }
                }
            },
                (err) => {
                    // console.log("err 16")
                                                                    // console.log(err)
                    res.json({
                        success: false,
                        message: err,
                        error_code: error_message.ERROR_CODE_USER_DETAIL_NOT_FOUND
                    });
                });

            //End Save Trip
        });
    }
};


/*** 
 * save user if not exist at import trip time 
 * Crated By: ripal ptel
 * Created Date: 8th-june-2021
 * ***/
exports.save_user = function (req, res) {
    var gender = req.gender;
    if (gender != undefined) {
        gender = ((gender).trim()).toLowerCase();
    }

    var first_name = req.first_name;
    var last_name = req.last_name;
    var email = req.email;

    if (email == undefined || email == null || email == "") {
        email = null;
    } else {
        email = ((req.email).trim()).toLowerCase();
    }
    var referral_code = (utils.tokenGenerator(8)).toUpperCase();
    var token = utils.tokenGenerator(32);

    if (email == null) {
        email = "";
    }

    if (first_name.length > 0) {
        first_name = first_name.charAt(0).toUpperCase() + first_name.slice(1);
    } else {
        first_name = "";
    }

    if (last_name.length > 0) {
        last_name = last_name.charAt(0).toUpperCase() + last_name.slice(1);
    } else {
        last_name = "";
    }

    var user = new User({
        first_name: first_name,
        last_name: last_name,
        email: email,
        phone: req.phone,
        gender: gender,
        address: req.address,
        city: req.city,
        token: token,
        country: req.country,
        referral_code: referral_code,
        user_type: Number(constant_json.USER_TYPE_NORMAL),
        userSysID: req.userSysId
    });
    // console.log("Order Import Trip in save_user function :: ");
    user.save().then(() => {
        res({ success: true });
    },
    (err) => {
        // console.log("err err err ");
        // console.log(er3r);
        res.json({
            success: false,
            message: err,
            error_code: error_message.ERROR_CODE_TRIP_ORDER_NOT_SAVE
        });
    });

};


/*** 
 * Create trip New (Without validte city Type)  
 * Crated By: Ketan Prajapati
 * Created Date: 25-May-2021
 * ***/
exports.create_trip_new = function (user_data, trip_type, service_type_id, req_data, triptype, response) {

    var tripData = req_data;
    if (user_data.is_approved == 0) {
        response({ success: false, error_code: error_message.ERROR_CODE_USER_NOT_APPROVED });
    } else {
        if (user_data.wallet < 0) {
            response({ success: false, trip_id: null, error_code: error_message.ERROR_CODE_YOUR_TRIP_PAYMENT_IS_PENDING });
        } else {
            if (tripData.trip_type !== undefined && tripData.trip_type != '') {
                trip_type = tripData.trip_type;
            }
            var user_id = tripData.user_id;
            if (trip_type == constant_json.TRIP_TYPE_CORPORATE) {
                user_id = user_data.user_type_id;
                tripData.user_type_id = user_data.user_type_id;
            }
            Card.find({ user_id: user_id }).then((card) => {
                if (tripData.payment_mode == Number(constant_json.PAYMENT_MODE_CARD)) {
                    if (card.length == 0) {
                        return response({ success: false, error_code: error_message.ERROR_CODE_ADD_CREDIT_CARD_FIRST });
                    }
                }
                Citytype.findOne({ _id: service_type_id }).then((citytype) => {
                    if (citytype) {
                        var city_id = citytype.cityid;
                        var country_id = citytype.countryid;
                        City.findOne({ _id: city_id }).then((city_detail) => {
                            if (city_detail) {

                                var is_fixed_fare = false;
                                var fixed_price = 0;
                                var received_trip_from_gender = [];
                                var provider_language = [];
                                var accessibility = [];

                                // Start 6 March //
                                if (tripData.is_fixed_fare != undefined) {
                                    is_fixed_fare = tripData.is_fixed_fare;
                                    if (is_fixed_fare) {
                                        fixed_price = tripData.fixed_price;
                                    }
                                }

                                if (tripData.received_trip_from_gender != undefined) {
                                    received_trip_from_gender = tripData.received_trip_from_gender;
                                }

                                if (tripData.provider_language != undefined) {
                                    provider_language = tripData.provider_language;
                                }

                                if (tripData.accessibility != undefined) {
                                    accessibility = tripData.accessibility;
                                }
                                // End 6 March //



                                var dateNow = new Date();
                                var schedule_start_time = null;
                                var server_start_time_for_schedule = null;
                                var is_schedule_trip = false;

                                //if (tripData.order.orderlist[0].status=='Pending') {

                                if (tripData.start_time) {

                                    is_schedule_trip = true;
                                    schedule_start_time = Number(tripData.start_time);
                                    // var addMiliSec = dateNow.getTime() + schedule_start_time;
                                    // server_start_time_for_schedule = new Date(addMiliSec);
                                    server_start_time_for_schedule = tripData.start_time;
                                }

                                
                                var trip = new Trip({
                                    user_last_name: user_data.last_name,
                                    user_first_name: user_data.first_name,
                                    service_type_id: service_type_id,
                                    user_id: user_data._id,
                                    is_trip_inside_zone_queue: tripData.is_trip_inside_zone_queue,
                                    token: tripData.token,
                                    current_provider: req_data.provider_id,
                                    provider_id: req_data.provider_id,
                                    confirmed_provider: req_data.provider_id,
                                    trip_type: trip_type,
                                    car_rental_id: tripData.car_rental_id,
                                    is_surge_hours: tripData.is_surge_hours,
                                    surge_multiplier: tripData.surge_multiplier,
                                    hotel_name: tripData.hotel_name,
                                    room_number: tripData.room_number,
                                    floor: tripData.floor,
                                    source_address: tripData.source_address,
                                    destination_address: tripData.destination_address,
                                    // sourceLocation: [tripData.latitude, tripData.longitude],
                                    destinationLocation: [],
                                    timezone: city_detail.timezone,
                                    payment_mode: tripData.payment_mode,
                                    user_create_time: tripData.user_create_time,
                                    payment_id: tripData.payment_id,
                                    unit: city_detail.unit,
                                    // Start 6 March //
                                    country_id: country_id,
                                    city_id: city_detail._id,
                                    fixed_price: fixed_price,
                                    is_fixed_fare: is_fixed_fare,
                                    is_provider_earning_set_in_wallet: false,
                                    received_trip_from_gender: received_trip_from_gender,
                                    provider_language: provider_language,
                                    accessibility: accessibility,
                                    // End 6 March //
                                    // start 9 jul //
                                    is_schedule_trip: is_schedule_trip,
                                    schedule_start_time: schedule_start_time,
                                    server_start_time_for_schedule: server_start_time_for_schedule,
                                    requsitionSysID: tripData.requisitionsysid,
                                    status: tripData.status,
                                    triptype: triptype,
                                    // end 9 jul //
                                    //9-Sep-21//
                                    labRequisitionID: tripData.labRequisitionID,
                                    lis_created_time: tripData.lis_created_time//added by Mayursinh Zala to add created Date time of LIS in Mongo panel on 29-12-2021
                                });

                                //added by Mayursinh Zala for validating Lat Long on 
                                if (tripData.latitude && tripData.longitude) {
                                    trip.sourceLocation = [tripData.latitude, tripData.longitude];
                                }
                                // if (trip.sourceLocation == null) {
                                //     trip.sourceLocation = tripData.sourceLocation;
                                //     // trip.destinationLocation = tripData.destinationLocation;
                                // }
                                if (tripData.d_longitude && tripData.d_latitude) {
                                    trip.destinationLocation = [tripData.d_latitude, tripData.d_longitude];
                                }
                                if (tripData.user_type_id) {
                                    trip.user_type = tripData.user_type;
                                    trip.user_type_id = tripData.user_type_id;
                                } else {
                                    trip.user_type = constant_json.USER_TYPE_NORMAL;
                                    trip.user_type_id = null;
                                }
                                //add below condition on 29-03-2022 by monika as not update is_trip_cancelled flag while cancelled from LIS
                                if(tripData.status==101){
                                    trip.is_trip_cancelled = 1;
                                }
                                //end 29-03-2022

                                if (tripData.device == undefined && trip_type != constant_json.TRIP_TYPE_PROVIDER) {
                                    trip.is_tip = setting_detail.is_tip;
                                }
                                trip.is_toll = setting_detail.is_toll;

                                Country.findOne({ _id: country_id }).then((country_data) => {

                                    var currency = "";
                                    var currencycode = "";
                                    if (country_data) {
                                        currency = country_data.currencysign;
                                        currencycode = country_data.currencycode;
                                    }
                                    trip.currency = currency;
                                    trip.currencycode = currencycode;

                                    user_data.total_request = user_data.total_request + 1;
                                    user_data.save();

                                    var service_type_id = tripData.service_type_id;
                                    if (tripData.car_rental_id) {
                                        service_type_id = tripData.car_rental_id;
                                    }
                                    // trip.save().then(() => {
                                    Trip_Service.find({
                                        service_type_id: service_type_id
                                    }, function (err, tripservice) {
                                        if (tripservice && tripservice.length > 0) {
                                            trip.trip_service_city_type_id = tripservice[0]._id;
                                            if (is_fixed_fare) {
                                                trip.provider_service_fees = Number((fixed_price * tripservice[0].provider_profit * 0.01).toFixed(3));
                                            }
                                        }
                                        trip.save().then(() => {

                                            var triplocation = new TripLocation({
                                                tripID: trip._id,
                                                trip_unique_id: trip.unique_id,
                                                providerStartTime: dateNow,
                                                providerStartLocation: [0, 0],
                                                startTripTime: dateNow,
                                                startTripLocation: [0, 0],
                                                endTripTime: dateNow,
                                                endTripLocation: [0, 0],
                                                providerStartToStartTripLocations: [],
                                                startTripToEndTripLocations: [],
                                                googlePathStartLocationToPickUpLocation: "",
                                                googlePickUpLocationToDestinationLocation: ""
                                            });
                                            triplocation.save(function (error) {
                                            }, (error) => {
                                                // console.log(" ERROR_CODE_SOMETHING_WENT_WRONG 0000")
                                                // console.log(error)
                                            });

                                            response({
                                                success: true,
                                                trip: trip,
                                                message: success_messages.MESSAGE_CODE_YOUR_FUTURE_TRIP_CREATE_SUCCESSFULLY
                                            });
                                        }, (err) => {
                                            // console.log(" ERROR_CODE_SOMETHING_WENT_WRONG 111")
                                            // console.log(err)
                                            response({
                                                success: false,
                                                error_code: error_message.ERROR_CODE_SOMETHING_WENT_WRONG
                                            });
                                        });
                                    }).sort({ _id: -1 }).limit(1);

                                    // }, (err) => {
                                    //     console.log(err);
                                    //     res.json({
                                    //         success: false,
                                    //         error_code: error_message.ERROR_CODE_SOMETHING_WENT_WRONG
                                    //     });
                                    // });
                                });

                            } else {
                                response({ success: false, error_code: error_message.ERROR_CODE_CITY_TYPE_NOT_FOUND });

                            }
                        }, (err) => {
                            // console.log("err 7044")
                            // console.log(err);
                            response({
                                success: false,
                                error_code: error_message.ERROR_CODE_SOMETHING_WENT_WRONG
                            });
                        });
                    } else {
                        response({ success: false, error_code: error_message.ERROR_CODE_CITY_TYPE_NOT_FOUND });
                    }
                }, (err) => {
                    // console.log("err 7055")
                    // console.log(err);
                    response({
                        success: false,
                        error_code: error_message.ERROR_CODE_SOMETHING_WENT_WRONG
                    });
                });
            }, (err) => {
                // console.log("err 7063")
                // console.log(err);
                response({
                    success: false,
                    error_code: error_message.ERROR_CODE_SOMETHING_WENT_WRONG
                });
            });
        }
    }

};

/*** 
 * Parse Requisition Order XML data into TripOrder object  
 * Crated By: Ketan Prajapati
 * Created Date: 11-May-2021
 * ***/
function parse_import_trip_xml(order, req_data) {
    var tripOrder = new TripOrder();
    if (req_data != null) {
        tripOrder = req_data;
    }
    var headerInfo = order.hl7outboundmessagedto.headerinfo[0];
    var orderInfo = order.hl7outboundmessagedto.orderinfo[0];
    //tripOrder.provider_id = '5d0c617f95bbc03595c12130';
    tripOrder.phlebotomistid = headerInfo.phlebotomistid[0];
    // tripOrder.service_type_id = '5d0c5c439c7b81338cbcb9fc';//indian Servie Type Luxury  commented by Mayursih Zala to set US TimeZone on 29-12-2021 
    tripOrder.service_type_id = '5d11e2d795bbc03595c12136';//Us  Servie Type Luxury    
    tripOrder.status = orderInfo.status[0];
    tripOrder.lis_created_time = orderInfo.createdwhendtm[0];//added by Mayursinh Zala to add created Date time of LIS in Mongo panel on 29-12-2021
    console.log(" requisitionsysid ::: "+orderInfo.requisitionsysid[0]);
    tripOrder.requisitionsysid = orderInfo.requisitionsysid[0],
        tripOrder.labRequisitionID = orderInfo.labrequisitionid[0],
        tripOrder.destination = {
            labsysid: headerInfo.destinationlabsysid[0],
            code: headerInfo.destination[0],
            street: headerInfo.street[0],
            street1: headerInfo.street1[0],
            city: headerInfo.city[0],
            state: headerInfo.state[0],
            zip: headerInfo.zip[0],
            country: headerInfo.country[0]
        };

    var destaddress = '';
    if (headerInfo.street[0] != '') {
        destaddress += headerInfo.street[0] + ', ';
    }
    if (headerInfo.street1[0] != '') {
        destaddress += headerInfo.street1[0] + ', ';
    }
    if (headerInfo.city[0] != '') {
        destaddress += headerInfo.city[0] + ', ';
    }
    if (headerInfo.state[0] != '') {
        destaddress += headerInfo.state[0] + ', ';
    }
    if (headerInfo.zip[0] != '') {
        destaddress += headerInfo.zip[0] + ', ';
    }
    if (headerInfo.country[0] != '') {
        destaddress += headerInfo.country[0];
    }

    tripOrder.destination_address = destaddress.trim().trim(',');

    // tripOrder.destination_address = headerInfo.street[0] + ', ' + headerInfo.street1[0] + ', ' + headerInfo.city[0] + ', ' + headerInfo.state[0] + ', ' + headerInfo.zip[0] + ', ' + headerInfo.country[0];
    var patient = "";
    var clinic = "";
    var physician = "";
    var tripLatitude="";
    var tripLongitude="";


    if(orderInfo.patientinfodto){
        patient = orderInfo.patientinfodto[0];
    }
    if(orderInfo.clinicinfodto){
        clinic = orderInfo.clinicinfodto[0];
    }
    if(orderInfo.physicianinfodto){
        physician = orderInfo.physicianinfodto[0];
    }
    var address = '';

    if(patient!="" && clinic!="" && physician!=""){
        
        tripOrder.order = {
            patient: {
                user_id: patient.patientsysid[0],
                external_patient_id: patient.externalpatientid[0],
                user_patient_id: patient.userpatientid[0],
                firstname: patient.firstname[0],
                lastname: patient.lastname[0],
                email: '',
                primaryphone: patient.primaryphone[0],
                gender: patient.gender[0],
                dob: patient.dob[0],
                mrn: patient.externalpatientid[0],
                patientprofilepicture: '',
                address: {
                    street: patient.address[0].street[0],
                    city: patient.address[0].city[0],
                    citycode: patient.address[0].citycode[0],
                    citysysid: patient.address[0].citysysid[0],
                    state: patient.address[0].state[0],
                    statecode: patient.address[0].statecode[0],
                    country: patient.address[0].country[0],
                    countrycode: patient.address[0].countrycode[0],
                    zip: patient.address[0].zip[0],
                    latitude: patient.address[0].latitude[0],
                    longitude: patient.address[0].longitude[0]
                }
            },
            clinic: {
                sysid: clinic.sysid[0],
                code: clinic.code[0],
                name: clinic.name[0]
            },
            physician: {
                sysid: physician.physiciansysid[0],
                code: physician.code[0],
                name: physician.name[0]
            }
        };
    }
    else{
        tripOrder.order = {
            patient: {},
            clinic: {},
            physician:{}
        }
    }
    
    
    if(patient.address){
        if (patient.address[0].street){
            if (patient.address[0].street[0] != '') {
                address += patient.address[0].street[0] + ', ';
            }
        }
        if (patient.address[0].city){
            if (patient.address[0].city[0] != '') {
                address += patient.address[0].city[0] + ', ';
            }
        }
        if (patient.address[0].state){
            if (patient.address[0].state[0] != '') {
                address += patient.address[0].state[0] + ', ';
            }
        }
        if (patient.address[0].zip){
            if (patient.address[0].zip[0] != '') {
                address += patient.address[0].zip[0] + ', ';
            }
        }
        if (patient.address[0].country){
            if (patient.address[0].country[0] != '') {
                address += patient.address[0].country[0];
            }
        }
        if(patient.address[0].latitude){
            tripLatitude = patient.address[0].latitude[0]
        }
        if(patient.address[0].longitude){
            tripLongitude = patient.address[0].longitude[0]
        }
    }
    

    tripOrder.source_address = address.trim().trim(',');
    //tripOrder.source_address = patient.address[0].street[0] + ', ' + patient.address[0].city[0] + ', ' + patient.address[0].state[0] + ', ' + patient.address[0].zip[0] + ', ' + patient.address[0].country[0];
    
    tripOrder.latitude = tripLatitude;
    tripOrder.longitude = tripLongitude;

    var orders = orderInfo.orderlist[0].requisitionorderdto;
    tripOrder.order.orderlist = [];
    for (var i = 0; i < orders.length; i++) {
        requisitionorder = orders[i];
        var mongospecimens = [];

        if(requisitionorder.specimenlist){
            var orderspecimens = requisitionorder.specimenlist[0].requisitionspecimendto;
            if (orderspecimens) {
                for (var s = 0; s < orderspecimens.length; s++) {
                    var specimen = orderspecimens[s];
                    mongospecimens.push({
                        id: specimen.id[0],
                        requisitionsysid: specimen.requisitionsysid[0],
                        specimenid: specimen.specimenid[0],
                        parentspecid: specimen.parentspecid[0],
                        ownerid: specimen.ownerid[0],
                        sequencenumber: specimen.sequencenumber[0],
                        operationstatus: specimen.operationstatus[0],
                        specimenuserid: specimen.specimenuserid[0],
                        scheduledate: specimen.scheduledtm[0],
                        collectiondate: specimen.collectiondtm[0],
                        receiveddate: specimen.receiveddtm[0],
                        expiredate: specimen.expiredtm[0],
                        status: specimen.status[0],
                        shipmentstatus: specimen.shipmentstatus[0],
                        isactive: specimen.isactive[0],
                        specimencode: specimen.specimencode[0],
                        specimenname: specimen.specimenname[0],
                        studyid: specimen.studyid[0],
                        noofaliquot: specimen.noofaliquot[0],
                        isspecimenhandlingnotes: specimen.isspecimenhandlingnotes[0]
                    });
                }
            }
        }

        var mongoresults = [];
        if(requisitionorder.resultlist){

            var orderResults = requisitionorder.resultlist[0].requisitionresultdto;
            if (orderResults) {
                for (var ord = 0; ord < orderResults.length; ord++) {
                    var orderres = orderResults[ord];
                    // console.log(orderres);
                    // console.log(orderres.resalpha[0]);
                    var checkResalpha = ""
                    var procedureSysId = "";
                    var orderProcedureCode = "";
                    var orderProcedureName = "";
                    var orderOperationstatus = "";
                    var orderResultType = ""

                    if(orderres.resalpha){
                        checkResalpha = orderres.resalpha[0]
                    }
                    if(orderres.proceduresysid){
                        procedureSysId = orderres.proceduresysid[0]
                    }
                    if(orderres.procedurecode){
                        orderProcedureCode = orderres.procedurecode[0]
                    }
                    if(orderres.procedurename){
                        orderProcedureName = orderres.procedurename[0]
                    }
                    if(orderres.operationstatus){
                        orderOperationstatus = orderres.operationstatus[0]
                    }
                    if(orderres.resulttype){
                        orderResultType = orderres.resulttype[0]
                    }
                    

                    mongoresults.push({
                        id: orderres.id[0],
                        requisitionsysid: orderres.requisitionsysid[0],
                        patientsysid: orderres.patientsysid[0],
                        proceduresysid: procedureSysId,
                        procedurecode: orderProcedureCode,
                        procedurename: orderProcedureName,
                        status: orderres.status[0],
                        operationstatus: orderOperationstatus[0],
                        resulttype: orderResultType,
                        resalpha: checkResalpha
                    });
                }
            }
        }

        var mongoOrder = {
            id: requisitionorder.id,
            proceduresysid: requisitionorder.proceduresysid[0],
            proceduretype: requisitionorder.proceduretype[0],
            testcode: requisitionorder.testcode[0],
            testname: requisitionorder.testname[0],
            iswaived: requisitionorder.iswaived[0],
            //procedure_loincode: requisitionorder.procedure_loinccode[0],
            print_seq: requisitionorder.printseq[0],
            processseq: requisitionorder.processseq[0],
            stat: requisitionorder.stat[0],
            status: requisitionorder.status[0],
            scheduledate: requisitionorder.scheduleddtm[0],
            specimens: mongospecimens,
            results: mongoresults
        };
        // console.log(mongoOrder);
        tripOrder.order.orderlist.push(mongoOrder);
        tripOrder.start_time = requisitionorder.scheduleddtm[0];
    }
    
    tripOrder.order.diagcodes = [];

    if(orderInfo.diagcodelist){
        var diagcodes = orderInfo.diagcodelist[0].diagcodedto;
        if (diagcodes) {
            for (var i = 0; i < diagcodes.length; i++) {
                var diagcode = diagcodes[i];
                tripOrder.order.diagcodes.push({
                    sysid: diagcode.sysid[0],
                    code: diagcode.code[0],
                    name: diagcode.name[0],
                    type: diagcode.type[0]
                });
            }
        }
    }

    return tripOrder;
};

exports.calculateDistance = function (req, res) {
    distance2.apiKey = config.GoogleMapKey;
    distance2.units = 'imperial';
    distance2.get(
        {
            origin: req.body.origin,
            destination: req.body.destination
        }, function (err, response) {
            if (err) {
                res.json({
                    success: false,
                    error_code: error_message.ERROR_CODE_USER_DETAIL_NOT_FOUND,
                    error_message: err
                });
            }
            else {
                res.json({
                    success: true,
                    distance: response
                });
            }
        });
}

function calcDistance(origin, destination, res) {
    distance2.apiKey = config.GoogleMapKey;
    distance2.units = 'imperial';
    return new Promise(function (resolve, reject) {
        distance2.get(
            {
                origin: origin,
                destination: destination
            }
            , function (err, response) {
                if (err) {
                    reject(err);
                }
                else {
                    resolve(response);
                }
            }
        );
    });
}

function calcDistances(locations, res) {
    distance2.apiKey = config.GoogleMapKey;
    distance2.units = 'imperial';
    return new Promise(function (resolve, reject) {
        distance2.get({
            origins: locations.origins,
            destinations: locations.destinations
        }
            , function (err, response) {
                if (err) {
                    reject(err);
                }
                else {
                    resolve(response);
                }
            }
        );
    });
}

/*** 
 * Update Trip Object
 * Crated By: Ripal Patel
 * Created Date: 9-9-2021
 * ***/
// funtion update_existing_Trip(oldtrip,newrtrip,provider) {

//     return oldtrip;
// }

/*** 
 * Get Equipment List
 * Crated By: Ripal Patel
 * Created Date: 12-5-2021
 * ***/

exports.get_equipment_list = function (req, res) {
    utils.check_request_params(req.body, [{ name: 'token', type: 'string' }, { name: 'schedule_time', type: 'string' }, { name: 'reqsysid', type: 'string' }], function (response) {
        if (response.success) {
            var jwt = utils.validate_token(req.body.token);

            if (jwt) {
                var token = req.body.token;
                var schedule_time = req.body.schedule_time;
                var req_sys_id = req.body.reqsysid;
                var apipath = config.PathPrefix + '/Requisition/Equipmentlist';
                var data = JSON.stringify({
                    Token: token,
                    ScheduleDtm: schedule_time,
                    ReqSysId: req_sys_id
                })
                var options = {
                    hostname: config.apiurl,
                    //port: 80,
                    path: apipath,
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Content-Length': data.length,
                        'X-IndralokWebAPIKey': config.AuthHeaderValue
                    }
                }

                utils.httpRequest(options, data).then(response => {
                    var jsonstr = '';
                    response.forEach(function (str) {
                        jsonstr += str;
                    });
                    var data = JSON.parse(jsonstr);
                    // console.log(response);
                    // var data = JSON.parse(response);
                    if (data.success) {
                        res.json({
                            success: data.success,
                            message: data.message,
                            lstItems: data.lstItems
                        });
                    }
                    else {
                        var resultobj = error_message.ERROR_CODE_API_RETURN_FALSE;
                        resultobj.message = data.message;

                        res.json({
                            success: false,
                            error_code: resultobj
                        });
                    }

                }).catch((err) => {
                    // console.log(err);
                    res.json({
                        success: false,
                        error_code: error_message.ERROR_CODE_SOMETHING_WENT_WRONG
                    });
                });
            }
            else {
                res.json({
                    success: false,
                    error_code: error_message.ERROR_CODE_INVALID_TOKEN
                });
            }
        } else {
            res.json({
                success: false,
                error_code: response.error_code,
                error_description: response.error_description
            });
        }
    });
};

/*** 
 * End trip
 * Crated By: Ripal Patel
 * Created Date: 12-5-2021
 * ***/
exports.end_trip = function (req, res) {
    utils.check_request_params(req.body, [{ name: 'tripId', type: 'string' }, { name: 'token', type: 'string' }, { name: 'reqsysid', type: 'string' }, { name: 'notes', type: 'string' }], function (response) {
        if (response.success) {
            var jwt = utils.validate_token(req.body.token);

            if (jwt) {
                var token = req.body.token;
                var tripId = req.body.tripId;
                //var schedule_time = req.body.schedule_time;
                var req_sys_id = req.body.reqsysid;
                var reason = req.body.notes;
                var apipath = config.PathPrefix + '/Requisition/CancelSchedule';
                var data = JSON.stringify({
                    ScheduleDtm: new Date(),
                    ReqSysId: req_sys_id,
                    Notes: reason,
                    Token: token
                })
                var options = {
                    hostname: config.apiurl,
                    // port: 80,
                    path: apipath,
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Content-Length': data.length,
                        'X-IndralokWebAPIKey': config.AuthHeaderValue
                    }
                }

                Trip.find({ _id: req.body.tripId }).then((response) => {
                    if (response.length == 0) {
                        res.json({
                            success: false,
                            error_code: error_message.ERROR_CODE_TRIP_NOT_FOUND
                        });
                    }
                    else {
                        utils.httpRequest(options, data).then(response => {
                            var jsonstr = '';
                            response.forEach(function (str) {
                                jsonstr += str;
                            });
                            var data = JSON.parse(jsonstr);
                            // console.log(JSON.parse(response));
                            if (data.success) {
                                Trip.findOne({ _id: tripId }).then((trip) => {
                                    trip.provider_trip_end_time = new Date();
                                    trip.is_trip_end = 1;
                                    trip.is_trip_cancelled = 1;
                                    trip.is_trip_cancelled_by_provider = 1;
                                    trip.notes = reason;
                                    trip.status = 101; //add new one on 17-02-2022 by monika
                                    trip.save();
                                });
                            }

                            if (data.success) {
                                res.json({
                                    success: data.success,
                                    message: data.message,
                                    lstItems: data.lstItems
                                });
                            }
                            else {
                                var resultobj = error_message.ERROR_CODE_API_RETURN_FALSE;
                                resultobj.message = data.message;

                                res.json({
                                    success: false,
                                    error_code: resultobj
                                });
                            }


                        }).catch((err) => {

                            // console.log("end_trip 7675")
                            // console.log(err);
                            res.json({
                                success: false,
                                error_code: error_message.ERROR_CODE_SOMETHING_WENT_WRONG
                            });
                        });
                    }
                });

            }
            else {
                res.json({
                    success: false,
                    error_code: error_message.ERROR_CODE_INVALID_TOKEN
                });
            }

        } else {
            res.json({
                success: false,
                error_code: response.error_code,
                error_description: response.error_description
            });
        }
    });
};

/*** 
 * Reschedule trip
 * Crated By: Ripal Patel
 * Created Date: 12-5-2021
 * ***/
exports.reschedule_trip = function (req, res) {
    utils.check_request_params(req.body, [{ name: 'tripId', type: 'string' }, { name: 'token', type: 'string' }, { name: 'schedule_time', type: 'string' }, { name: 'reqsysid', type: 'string' }, { name: 'notes', type: 'string' }], function (response) {
        // console.log("reschedule_trip 7708")
        if (response.success) {
            // console.log("reschedule_trip 7710")
            var jwt = utils.validate_token(req.body.token);

            if (jwt) {
                var token = req.body.token;
                var tripId = req.body.tripId;
                var schedule_time = req.body.schedule_time;
                var req_sys_id = req.body.reqsysid;
                var reason = req.body.notes;
                var apipath = config.PathPrefix + '/Requisition/Reschedule';
                var data = JSON.stringify({
                    Token: token,
                    ScheduleDtm: schedule_time,
                    ReqSysId: req_sys_id,
                    Notes: reason
                })
                // console.log("reschedule_trip 7726")
                console.log(data)
                var options = {
                    hostname: config.apiurl,
                    // port: 80,
                    path: apipath,
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Content-Length': data.length,
                        'X-IndralokWebAPIKey': config.AuthHeaderValue
                    }
                }
                Trip.find({ _id: req.body.tripId }).then((response) => {
                    // console.log("reschedule_trip 7740")
                    if (response.length == 0) {
                        res.json({
                            success: false,
                            error_code: error_message.ERROR_CODE_TRIP_NOT_FOUND
                        });
                    }
                    else {
                        utils.httpRequest(options, data).then(response => {
                            // console.log("reschedule_trip httpRequest 7751")
                            // console.log(response);
                            var data = JSON.parse(response);
                            // console.log(JSON.parse(response));
                            if (data.success) {
                                Trip.findOne({ _id: tripId }).then((trip) => {

                                    trip.schedule_start_time = schedule_time;
                                    trip.notes = reason;
                                    trip.save();
                                });
                            }

                            if (data.success) {
                                res.json({
                                    success: data.success,
                                    message: data.message,
                                    lstItems: data.lstItems
                                });
                            }
                            else {
                                var resultobj = error_message.ERROR_CODE_API_RETURN_FALSE;
                                resultobj.message = data.message;

                                res.json({
                                    success: false,
                                    error_code: resultobj
                                });
                            }

                        }).catch((err) => {
                            // console.log("reschedule_trip 7782 starts")
                            // console.log(err);
                            // console.log("reschedule_trip 7784 ends ")
                            res.json({
                                success: false,
                                error_code: error_message.ERROR_CODE_SOMETHING_WENT_WRONG
                            });
                        });
                    }

                });
            }
            else {
                // console.log("reschedule_trip ERROR_CODE_INVALID_TOKEN 7795 ")
                res.json({
                    success: false,
                    error_code: error_message.ERROR_CODE_INVALID_TOKEN
                });
            }
        } else {
            // console.log("reschedule_trip 7801 ")
            res.json({
                success: false,
                error_code: response.error_code,
                error_description: response.error_description
            });
        }
    });
};


/*** 
 * Print lable responce
 * Crated By: Ripal Patel
 * Created Date: 22-5-2021
 * ***/

exports.print_lable = function (req, res) {
    utils.check_request_params(req.body, [{ name: 'reqSysId', type: 'string' },
    { name: 'printerName', type: 'string' }, { name: 'token', type: 'string' },
    { name: 'labelType', type: 'string' }], function (response) {
        if (response.success) {
            var jwt = utils.validate_token(req.body.token);

            if (jwt) {
                var reqSysId = req.body.reqSysId;
                var token = req.body.token;
                var printerName = req.body.printerName;
                var labelType = req.body.labelType;
                
                var apipath = config.PathPrefix + '/Print/Print';
                var data = JSON.stringify({
                    ReqSysId: reqSysId,
                    Token: token,
                    PrinterName: printerName,
                    LabelType: labelType
                })
                var options = {
                    hostname: config.apiurl,
                    //port: 80,
                    path: apipath,
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Content-Length': data.length,
                        'X-IndralokWebAPIKey': config.AuthHeaderValue
                    }
                }

                utils.httpRequest(options, data).then(response => {
                    var jsonstr = '';
                    response.forEach(function (str) {
                        jsonstr += str;
                    });

                    var data = JSON.parse(jsonstr);
                    // console.log(data);
                    if (data.success) {
                        res.json({
                            success: data.success,
                            message: data.message,
                            lstItems: data.lstItems
                        });
                    }
                    else {
                        var resultobj = error_message.ERROR_CODE_API_RETURN_FALSE;
                        resultobj.message = data.message;

                        res.json({
                            success: false,
                            error_code: resultobj
                        });
                    }

                }).catch((err) => {
                    // console.log(err);
                    res.json({
                        success: false,
                        error_code: error_message.ERROR_CODE_SOMETHING_WENT_WRONG
                    });
                });
            }
            else {
                res.json({
                    success: false,
                    error_code: error_message.ERROR_CODE_INVALID_TOKEN
                });
            }
        } else {
            res.json({
                success: false,
                error_code: response.error_code,
                error_description: response.error_description
            });
        }
    });
};




/*** 
* Add Requisition note
* Crated By: Ripal Patel
* Created Date: 22-5-2021
* ***/


exports.add_req_note = function (req, res) {
    utils.check_request_params(req.body, [{ name: 'reqSysId', type: 'string' },
    { name: 'notes', type: 'string' }, { name: 'token', type: 'string' }], function (response) {
        if (response.success) {

            var jwt = utils.validate_token(req.body.token);

            if (jwt) {
                var apipath = config.PathPrefix + '/Requisition/AddRequisitionNotes';

                var reqSysId = req.body.reqSysId;
                var notes = req.body.notes;
                var token = req.body.token;
                var document = [];

                //Save file to S3
                var path = require('path');
                if (req.files != undefined && req.files.length > 0) {
                    for (var i = 0; i < req.files.length; i++) {
                        var extension = path.extname(req.files[i].originalname);
                        var filepath = utils.saveImagetos3browser(req.files[i].path, req.files[i].originalname, 10)
                        var doc = {
                            fileName: req.files[i].originalname,
                            filePath: filepath,
                            fileSize: req.files[i].size
                        }
                        document.push(doc);
                    }
                }

                var data = JSON.stringify({
                    ReqSysId: reqSysId,
                    Notes: notes,
                    Token: token,
                    Document: document
                })
                var options = {
                    hostname: config.apiurl,
                    path: apipath,
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Content-Length': data.length,
                        'X-IndralokWebAPIKey': config.AuthHeaderValue
                    }
                }


                utils.httpRequest(options, data).then(response => {
                    var jsonstr = '';
                    response.forEach(function (str) {
                        jsonstr += str;
                    });
                    var data = JSON.parse(jsonstr);
                    if (data.success) {
                        res.json({
                            success: data.success,
                            message: data.message,
                            lstItems: data.lstItems
                        });
                    }
                    else {
                        var resultobj = error_message.ERROR_CODE_API_RETURN_FALSE;
                        resultobj.message = data.message;

                        res.json({
                            success: false,
                            error_code: resultobj
                        });
                    }

                }).catch((err) => {
                    // console.log(err);
                    res.json({
                        success: false,
                        error_code: error_message.ERROR_CODE_SOMETHING_WENT_WRONG
                    });
                });
            }
            else {
                res.json({
                    success: false,
                    error_code: error_message.ERROR_CODE_INVALID_TOKEN
                });
            }
        } else {
            res.json({
                success: false,
                error_code: response.error_code,
                error_description: response.error_description
            });
        }
    });
};




/*** 
* Get Requisition note
* Crated By: Ripal Patel
* Created Date: 22-5-2021;
const provider = require('../models/provider');
* ***/
const https = require('https')
exports.get_req_note = function (req, res) {
    utils.check_request_params(req.body, [{ name: 'sysId', type: 'string' }, { name: 'token', type: 'string' }], function (response) {
        if (response.success) {
            var jwt = utils.validate_token(req.body.token);

            if (jwt) {
                var reqSysId = req.body.sysId;
                var token = req.body.token;

                var apipath = config.PathPrefix + '/Requisition/GetRequisitionNotes';
                var data = JSON.stringify({
                    ReqSysId: reqSysId,
                    Token: token
                })

                var options = {
                    hostname: config.apiurl,
                    //port: 80,
                    path: apipath,
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Content-Length': data.length,
                        'X-IndralokWebAPIKey': config.AuthHeaderValue
                    }
                }


                utils.httpRequest(options, data).then(response => {
                    var jsonstr = '';
                    response.forEach(function (str) {
                        jsonstr += str;
                    });
                    var data = JSON.parse(jsonstr);
                    if (data.success) {
                        res.json({
                            success: data.success,
                            message: data.message,
                            lstItems: data.lstItems
                        });
                    }
                    else {
                        var resultobj = error_message.ERROR_CODE_API_RETURN_FALSE;
                        resultobj.message = data.message;

                        res.json({
                            success: false,
                            error_code: resultobj
                        });
                    }

                }).catch((err) => {
                    // console.log(err);
                    res.json({
                        success: false,
                        error_code: error_message.ERROR_CODE_SOMETHING_WENT_WRONG
                    });
                });
            }
            else {
                res.json({
                    success: false,
                    error_code: error_message.ERROR_CODE_INVALID_TOKEN
                });
            }
        } else {
            res.json({
                success: false,
                error_code: response.error_code,
                error_description: response.error_description
            });
        }
    });
};

/*** 
* Get Requisition Result
* Crated By: Ripal Patel
* Created Date: 22-5-2021
* ***/

exports.get_req_result = function (req, res) {
    utils.check_request_params(req.body, [{ name: 'reqSysId', type: 'string' }, { name: 'token', type: 'string' }], function (response) {
        if (response.success) {
            var jwt = utils.validate_token(req.body.token);

            if (jwt) {
                var reqSysId = req.body.reqSysId;
                var token = req.body.token;

                var apipath = config.PathPrefix + '/Requisition/GetRequisitionResult';
                var data = JSON.stringify({
                    ReqSysId: reqSysId,
                    Token: token
                })

                var options = {
                    hostname: config.apiurl,
                    //port: 80,
                    path: apipath,
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Content-Length': data.length,
                        'X-IndralokWebAPIKey': config.AuthHeaderValue
                    }
                }


                utils.httpRequest(options, data).then(response => {
                    var jsonstr = '';
                    response.forEach(function (str) {
                        jsonstr += str;
                    });
                    var data = JSON.parse(jsonstr);
                    res.json({
                        success: data.success,
                        message: data.message,
                        lstItems: data.lstItems
                    });

                }).catch((err) => {
                    // console.log(err);
                    res.json({
                        success: false,
                        error_code: error_message.ERROR_CODE_SOMETHING_WENT_WRONG
                    });
                });
            }
            else {
                res.json({
                    success: false,
                    error_code: error_message.ERROR_CODE_INVALID_TOKEN
                });
            }
        } else {
            res.json({
                success: false,
                error_code: response.error_code,
                error_description: response.error_description
            });
        }
    });
};

/*** 
* Get Requisition result
* Crated By: Ripal Patel
* Created Date: 22-5-2021
* ***/

exports.add_req_result = function (req, res) {
    utils.check_request_params(req.body, [{ name: 'reqSysID', type: 'string' }, { name: 'token', type: 'string' },
    { name: 'patientSysID', type: 'string' }, { name: 'procedureSysID', type: 'string' },
    { name: 'resultType', type: 'string' }, { name: 'resAlpha', type: 'string' },
    { name: 'resNum', type: 'string' }, { name: 'resAnal', type: 'string' },
    { name: 'notes', type: 'string' }, { name: 'reportable', type: 'string' }, { name: 'onHold', type: 'string' }], function (response) {
        if (response.success) {
            var jwt = utils.validate_token(req.body.token);

            if (jwt) {
                var reqSysID = req.body.reqSysID;
                var token = req.body.token;
                var patientSysID = req.body.patientSysID;
                var procedureSysID = req.body.procedureSysID;
                var resultType = req.body.resultType;
                var resAlpha = req.body.resAlpha;
                var resNum = req.body.resNum;
                var resAnal = req.body.resAnal;
                var notes = req.body.notes;
                var reportable = req.body.reportable;
                var onHold = req.body.onHold;
                var document = [];

                //Save file to S3
                var path = require('path');
                if (req.files != undefined && req.files.length > 0) {
                    for (var i = 0; i < req.files.length; i++) {
                        var extension = path.extname(req.files[i].originalname);
                        var filepath = utils.saveImagetos3browser(req.files[i].path, req.files[i].originalname, 11)
                        var doc = {
                            fileName: req.files[i].originalname,
                            filePath: filepath,
                            fileSize: req.files[i].size
                        }
                        document.push(doc);
                    }
                }


                var apipath = config.PathPrefix + '/Requisition/AddRequisitionResults';
                var data = JSON.stringify({
                    RequisitionSysID: reqSysID,
                    Token: token,
                    PatientSysID: patientSysID,
                    ProcedureSysID: procedureSysID,
                    ResultType: resultType,
                    ResAlpha: resAlpha,
                    ResNum: resNum,
                    ResAnal: resAnal,
                    Notes: notes,
                    Reportable: reportable,
                    OnHold: onHold,
                    Document: document
                })

                var options = {
                    hostname: config.apiurl,
                    //port: 80,
                    path: apipath,
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Content-Length': data.length,
                        'X-IndralokWebAPIKey': config.AuthHeaderValue
                    }
                }

                utils.httpRequest(options, data).then(response => {
                    var jsonstr = '';
                    response.forEach(function (str) {
                        jsonstr += str;
                    });
                    var data = JSON.parse(jsonstr);
                    if (data.success) {
                        res.json({
                            success: data.success,
                            message: data.message,
                            lstItems: data.lstItems
                        });
                    }
                    else {
                        var resultobj = error_message.ERROR_CODE_API_RETURN_FALSE;
                        resultobj.message = data.message;

                        res.json({
                            success: false,
                            error_code: resultobj
                        });
                    }

                }).catch((err) => {
                    // console.log(err);
                    res.json({
                        success: false,
                        error_code: error_message.ERROR_CODE_SOMETHING_WENT_WRONG
                    });
                });
            }
            else {
                res.json({
                    success: false,
                    error_code: error_message.ERROR_CODE_INVALID_TOKEN
                });
            }
        } else {
            res.json({
                success: false,
                error_code: response.error_code,
                error_description: response.error_description
            });
        }
    });
};


/*** 
* Get Requisition note
* Crated By: Ripal Patel
* Created Date: 22-5-2021
* ***/

exports.phleb_assignment = function (req, response) {
    var reqSysId = req.reqSysId;
    var userEmail = req.userEmail;

    // var reqSysId = '1';
    // var userEmail = 'milan.patel@indralok.com';

    var apipath = config.PathPrefix + '/Requisition/PhlebAssignment';
    var data = JSON.stringify({
        ReqSysId: reqSysId,
        UserEmail: userEmail,
    })

    var options = {
        hostname: config.apiurl,
        //port: 80,
        path: apipath,
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'Content-Length': data.length,
            'X-IndralokWebAPIKey': config.AuthHeaderValue
        }
    }
    utils.httpRequest(options, data).then(res => {
        var jsonstr = '';
        res.forEach(function (str) {
            jsonstr += str;
        });
        var data = JSON.parse(jsonstr);
        response({
            success: true,
            response: data
        });

    }).catch((err) => {
        // console.log(err);
        response({
            success: false,
            error_code: error_message.ERROR_CODE_SOMETHING_WENT_WRONG
        });
    });
};


/*** 
 * My Schedules for Phebotomics
 * Crated By: Ketan Prajapati
 * Created Date: 12-5-2021
 * ***/

exports.myschedules = function (req, res) {
    utils.check_request_params(req.body, [{ name: 'providerid', type: 'string' }, { name: 'date', type: 'string' }, { name: 'token', type: 'string' }], function (response) {
        if (response.success) {

            var jwt = utils.validate_token(req.body.token);
            if (jwt) {
                var searchdate = new Date(req.body.date).toISOString().slice(0, 10);
                Trip.find({
                    current_provider: req.body.providerid,
                    is_trip_cancelled: 0,
                    is_trip_cancelled_by_provider: 0,
                    is_trip_cancelled_by_user: 0,
                    is_schedule_trip: true,
                    status: {$gte: 4},//added by Mayursinh Zala to match the status with LIS for schedule trip
                }).sort({ schedule_start_time: 1 }).then(async (response) => {
                    var totalMiles = 0;
                    var ETA = 0;
                    var trips = [];
                    let completedTripCount = 0; //added by monika patel to pass the updated count for completed trip on 11-02-2022
                    var getTotalNewTripCount = await getNewTripCount(req.body.providerid)
                    
                    if (response.length > 0) {
                        // let completedTripCount = 0; //added by Mayursinh Zala to pass the updated count for completed trip on 08-12-2021, commedted by monika on 11-02-2022
                        let promises = [];
                        response.forEach(function (trip) {
                            // console.log(trip.schedule_start_time);
                            if (trip.current_provider && new Date(trip.schedule_start_time).toISOString().slice(0, 10) == searchdate) {
                                promises.push(TripOrder.findOne({ trip_id: trip._id }).then((tripOrder) => {
                                    var patient = null;
                                    var physician = null;
                                    var clinic = null;
                                    var specimens = [];
                                    var results = [];
                                    var provider_id = '';
                                    //var stats = [];
                                    //var orderids = [];
                                    var order = [];
                                    trip.requsitionSysID
                                    trip.requisition_num = parseInt(trip.requsitionSysID)
                                    var preCheck = config.PrePostUrl + '?procedureCode=PRECHK&requisitionSysID=' + trip.requsitionSysID + '&token=@token';
                                    var postCheck = config.PrePostUrl + '?procedureCode=POSTCHK&requisitionSysID=' + trip.requsitionSysID + '&token=@token';//changed by Mayursinh on 30-12-2021 for changing POSTCHK name 

                                    if (tripOrder != null && tripOrder.order != null) {
                                        provider_id = tripOrder.provide_id;
                                        patient = tripOrder.order.patient;
                                        physician = tripOrder.order.physician;
                                        var age = getAge(patient.dob);
                                        patient.age = age;
                                        clinic = tripOrder.order.clinic;
                                        for (var j = 0; j < tripOrder.order.orderlist.length; j++) {
                                            //orderids.push(tripOrder.order.orderlist[j].id);
                                            //stats.push(tripOrder.order.orderlist[j].stat);
                                            order.push({
                                                status: tripOrder.order.orderlist[j].status,
                                                stat: tripOrder.order.orderlist[j].stat,
                                                processseq: tripOrder.order.orderlist[j].processseq,
                                                print_seq: tripOrder.order.orderlist[j].print_seq,
                                                procedure_loincode: tripOrder.order.orderlist[j].procedure_loincode,
                                                testname: tripOrder.order.orderlist[j].testname,
                                                testcode: tripOrder.order.orderlist[j].testcode,
                                                iswaived: tripOrder.order.orderlist[j].iswaived,
                                                proceduretype: tripOrder.order.orderlist[j].proceduretype,
                                                proceduresysid: tripOrder.order.orderlist[j].proceduresysid,
                                            });

                                            var tripOrderListOrder = tripOrder.order.orderlist[j];
                                            for (var k = 0; j < tripOrderListOrder.specimens.length; k++) {
                                                if (tripOrder.order.orderlist[j].specimens[k] == null) {
                                                    break;
                                                }
                                                specimens.push(tripOrder.order.orderlist[j].specimens[k]);
                                            }
                                            for (var k = 0; j < tripOrderListOrder.results.length; k++) {
                                                if (tripOrder.order.orderlist[j].results[k] == null) {
                                                    break;
                                                }
                                                results.push(tripOrder.order.orderlist[j].results[k]);
                                            }
                                        }
                                    }

                                    return Provider.findOne({ _id: req.body.providerid }).then((provider) => {
                                        var origins = [];
                                        var destinations = [];
                                        var labdestinations = [];

                                        origins.push(provider.providerLocation[0] + "," + provider.providerLocation[1]);
                                        if (trip.sourceLocation != null && trip.sourceLocation.length > 0) {
                                            destinations.push(trip.sourceLocation[0] + "," + trip.sourceLocation[1]);
                                        }
                                        else {
                                            destinations.push(trip.source_address);
                                        }

                                        if (trip.destinationLocation != null && trip.destinationLocation.length > 0) {
                                            labdestinations.push(trip.destinationLocation[0] + "," + trip.destinationLocation[1]);
                                        }
                                        else {
                                            labdestinations.push(trip.destination_address);
                                        }
                                        //added by Mayursinh Zala for incrementing completed count if is_provider_status = 9
                                        if(trip.is_provider_status >= 9)
                                        {
                                            completedTripCount++
                                        }
                                        
                                        // { 'status': { $in: tripstatus } } 2 and 3

                                        return calcDistances({ origins: origins, destinations: destinations }).then(result => {
                                            trips.push({
                                                triptype: trip.triptype,
                                                tripDrive: {
                                                    sourcelocation: provider.providerLocation,
                                                    destinationlocation: trip.sourceLocation
                                                },
                                                trip: trip,
                                                notes: '',
                                                precheck: preCheck,
                                                postcheck: postCheck,
                                                //stats: stats,
                                                provider_id: provider_id,
                                                //orderids: orderids,
                                                order: order,
                                                patient: patient,
                                                physician: physician,
                                                specimens: specimens,
                                                results: results,
                                                clinic: clinic,
                                                totalMiles: result[0].distanceValue != 0 ? (result[0].distanceValue / 1609).toFixed(2) + " mi" : '',
                                                ETA: result[0].duration,
                                                status:trip.status 
                                            });
                                            
                                            //

                                            //   return calcDistances({ origins: origins, destinations: labdestinations }).then(result => {

                                            //     trips.push({
                                            //         triptype: 'Drop',
                                            //         tripDrive: {
                                            //             sourcelocation: provider.providerLocation,
                                            //             destinationlocation: trip.destinationLocation
                                            //         },
                                            //         trip: trip,
                                            //         notes: '',
                                            //         precheck: preCheck,
                                            //         postcheck: postCheck,
                                            //         //stats: stats,
                                            //         provider_id: provider_id,
                                            //         //orderids: orderids,
                                            //         order: order,
                                            //         physician:physician,
                                            //         specimens: specimens,
                                            //         results: results,
                                            //         clinic: clinic,
                                            //         totalMiles: result[1].distanceValue!=0?(result[1].distanceValue/1609).toFixed(2)+ " mi":'',
                                            //         ETA: result[1].duration
                                            //     })
                                            // }).catch(() => {


                                            //     trips.push({
                                            //         triptype: 'Drop',
                                            //         tripDrive: {
                                            //             sourcelocation: provider.providerLocation,
                                            //             destinationlocation: trip.destinationLocation
                                            //         },
                                            //         trip: trip,
                                            //         notes: '',
                                            //         precheck: preCheck,
                                            //         postcheck: postCheck,
                                            //         //stats: stats,
                                            //         provider_id: provider_id,
                                            //         //orderids: orderids,
                                            //         order: order,
                                            //         physician:physician,
                                            //         specimens: specimens,
                                            //         results: results,
                                            //         clinic: clinic,
                                            //         totalMiles: '',
                                            //         ETA: ''
                                            //     })
                                            // });

                                            //

                                        }).catch(() => {
                                            trips.push({
                                                triptype: trip.triptype,
                                                tripDrive: {
                                                    sourcelocation: provider.providerLocation,
                                                    destinationlocation: trip.sourceLocation
                                                },
                                                trip: trip,
                                                notes: '',
                                                precheck: preCheck,
                                                postcheck: postCheck,
                                                //stats: stats,
                                                provider_id: provider_id,
                                                //orderids: orderids,
                                                order: order,
                                                patient: patient,
                                                physician: physician,
                                                specimens: specimens,
                                                results: results,
                                                clinic: clinic,
                                                totalMiles: '',
                                                ETA: '',
                                                status:trip.status 
                                            });


                                            //   return calcDistances({ origins: origins, destinations: labdestinations }).then(result => {

                                            //     trips.push({
                                            //         triptype: 'Drop',
                                            //         tripDrive: {
                                            //             sourcelocation: provider.providerLocation,
                                            //             destinationlocation: trip.destinationLocation
                                            //         },
                                            //         trip: trip,
                                            //         notes: '',
                                            //         precheck: preCheck,
                                            //         postcheck: postCheck,
                                            //         //stats: stats,
                                            //         provider_id: provider_id,
                                            //         //orderids: orderids,
                                            //         order: order,
                                            //         physician:physician,
                                            //         specimens: specimens,
                                            //         results: results,
                                            //         clinic: clinic,
                                            //         totalMiles: result[1].distanceValue!=0?(result[1].distanceValue/1609).toFixed(2)+ " mi":'',
                                            //         ETA: result[1].duration
                                            //     })
                                            // }).catch(() => {


                                            //     trips.push({
                                            //         triptype: 'Drop',
                                            //         tripDrive: {
                                            //             sourcelocation: provider.providerLocation,
                                            //             destinationlocation: trip.destinationLocation
                                            //         },
                                            //         trip: trip,
                                            //         notes: '',
                                            //         precheck: preCheck,
                                            //         postcheck: postCheck,
                                            //         //stats: stats,
                                            //         provider_id: provider_id,
                                            //         //orderids: orderids,
                                            //         order: order,
                                            //         physician:physician,
                                            //         specimens: specimens,
                                            //         results: results,
                                            //         clinic: clinic,
                                            //         totalMiles: '',
                                            //         ETA: ''
                                            //     })
                                            // });

                                            //

                                        });



                                    }).catch(() => {
                                        trips.push({
                                            triptype: trip.triptype,
                                            tripDrive: {
                                                sourcelocation: '',
                                                destinationlocation: trip.sourceLocation
                                            },
                                            trip: trip,
                                            notes: '',
                                            precheck: preCheck,
                                            postcheck: postCheck,
                                            //stats: stats,
                                            provider_id: provider_id,
                                            //orderids: orderids,
                                            order: order,
                                            patient: patient,
                                            physician: physician,
                                            specimens: specimens,
                                            results: results,
                                            clinic: clinic,
                                            totalMiles: '',
                                            ETA: '',
                                            status:trip.status 
                                        })

                                        // trips.push({
                                        //     triptype: 'Drop',
                                        //     tripDrive: {
                                        //         sourcelocation: '',
                                        //         destinationlocation: trip.destinationLocation
                                        //     },
                                        //     trip: trip,
                                        //     notes: '',
                                        //     precheck: preCheck,
                                        //     postcheck: postCheck,
                                        //     ///stats: stats,
                                        //     provider_id: provider_id,
                                        //     //orderids: orderids,
                                        //     order: order,
                                        //     physician:physician,
                                        //     specimens: specimens,
                                        //     results: results,
                                        //     clinic: clinic,
                                        //     totalMiles: '',
                                        //     ETA: ''
                                        // })
                                    });
                                }));
                            }
                        });

                        Promise.all(promises).then(() => {
                            var seqTrips = trips.sort(compare_schedule_start_time);
                            var finalTrips = [];
                            for (var i = 0; i < seqTrips.length; i++) {
                                if (seqTrips[i].trip.is_provider_status == 1 || seqTrips[i].trip.is_provider_status == 2) {
                                    finalTrips.push(seqTrips[i]);
                                }
                            }
                            for (var i = 0; i < seqTrips.length; i++) {
                                if (seqTrips[i].trip.is_provider_status == 4) {
                                    finalTrips.push(seqTrips[i]);
                                }
                            }
                            for (var i = 0; i < seqTrips.length; i++) {
                                if (seqTrips[i].trip.is_provider_status == 6) {
                                    finalTrips.push(seqTrips[i]);
                                }
                            }

                            for (var i = 0; i < seqTrips.length; i++) {
                                if (seqTrips[i].trip.is_provider_status == 0) {
                                    finalTrips.push(seqTrips[i]);
                                }
                            }

                            for (var i = 0; i < seqTrips.length; i++) {
                                if (seqTrips[i].trip.is_provider_status != 1 && seqTrips[i].trip.is_provider_status != 2 && seqTrips[i].trip.is_provider_status != 4 && seqTrips[i].trip.is_provider_status != 6 && seqTrips[i].trip.is_provider_status != 0) {
                                    finalTrips.push(seqTrips[i]);
                                }
                            }
                            
                            // var getTotalNewTripCount = 0;
                            res.json({
                                success: true,
                                trips: finalTrips,
                                completed_trip: completedTripCount,
                                new_trip: getTotalNewTripCount
                            })
                        });
                    }
                    else {
                        res.json({
                            success: false,
                            error_code: error_message.ERROR_CODE_SCHEDULE_TRIP_NOT_FOUND,
                            completed_trip: completedTripCount,
                            new_trip: getTotalNewTripCount
                        });
                    }
                });
            }
            else {
                res.json({
                    success: false,
                    error_code: error_message.ERROR_CODE_INVALID_TOKEN
                });
            }

        } else {
            res.json({
                success: false,
                error_code: response.error_code,
                error_description: response.error_description
            });
        }
    });
}

function getAge(dateString) {
    var today = new Date();
    var birthDate = new Date(dateString);
    var age = today.getFullYear() - birthDate.getFullYear();
    var m = today.getMonth() - birthDate.getMonth();
    if (m != 0) {
        return age + " Years " + m + " Months";
    }
    return age + " Years";
}

function compare_schedule_start_time(a, b) {
    if (new Date(a.trip.schedule_start_time) < new Date(b.trip.schedule_start_time)) {
        return -1;
    } else if (new Date(a.trip.schedule_start_time) > new Date(b.trip.schedule_start_time)) {
        return 1;
    } else {
        return 0;
    }
}

/*** 
* Get trip by id 
* Crated By: Ripal Patel
* Created Date: 08-06-2021
* ***/
exports.get_trip_byid = function (req, res) {
    utils.check_request_params(req.body, [{ name: 'tripid', type: 'string' }, { name: 'token', type: 'string' }], function (response) {
        if (response.success) {
            var jwt = utils.validate_token(req.body.token);
            if (jwt) {
                Trip.find({ _id: req.body.tripid }).then((response) => {
                    var totalMiles = 0;
                    var ETA = 0;
                    var trips = [];

                    if (response.length > 0) {
                        let promises = [];
                        response.forEach(function (trip) {
                            if (trip.current_provider) {
                                promises.push(TripOrder.findOne({ trip_id: trip._id }).then((tripOrder) => {
                                    var patient = null;
                                    var clinic = null;
                                    var specimens = [];
                                    var results = [];
                                    var provider_id = '';
                                    var stats = [];
                                    var orderids = [];
                                    if (tripOrder != null && tripOrder.order != null) {
                                        provider_id = tripOrder.provide_id;
                                        patient = tripOrder.order.patient;
                                        clinic = tripOrder.order.clinic;
                                        for (var j = 0; j < tripOrder.order.orderlist.length; j++) {
                                            orderids.push(tripOrder.order.orderlist[j].id);
                                            stats.push(tripOrder.order.orderlist[j].stat);
                                            var tripOrderListOrder = tripOrder.order.orderlist[j];
                                            for (var k = 0; j < tripOrderListOrder.specimens.length; k++) {
                                                if (tripOrder.order.orderlist[j].specimens[k] == null) {
                                                    break;
                                                }
                                                specimens.push(tripOrder.order.orderlist[j].specimens[k]);
                                            }
                                            for (var k = 0; j < tripOrderListOrder.results.length; k++) {
                                                if (tripOrder.order.orderlist[j].results[k] == null) {
                                                    break;
                                                }
                                                results.push(tripOrder.order.orderlist[j].results[k]);
                                            }
                                        }
                                    }

                                    return Provider.findOne({ _id: trip.current_provider }).then((provider) => {
                                        var origins = [];
                                        var destinations = [];

                                        origins.push(provider.providerLocation[0] + "," + provider.providerLocation[1]);

                                        if (trip.sourceLocation != null && trip.sourceLocation.length > 0) {
                                            destinations.push(trip.sourceLocation[0] + "," + trip.sourceLocation[1]);
                                        }
                                        else {
                                            destinations.push(trip.source_address);
                                        }

                                        if (trip.destinationLocation != null && trip.destinationLocation.length > 0) {
                                            destinations.push(trip.destinationLocation[0] + "," + trip.destinationLocation[1]);
                                        }
                                        else {
                                            destinations.push(trip.destination_address);
                                        }

                                        return calcDistances({ origins: origins, destinations: destinations }).then(result => {
                                            trips.push({
                                                triptype: trip.triptype,//'Draw',
                                                tripDrive: {
                                                    sourcelocation: provider.providerLocation,
                                                    destinationlocation: trip.sourceLocation
                                                },
                                                trip: trip,
                                                notes: '',
                                                stats: stats,
                                                provider_id: provider_id,
                                                orderids: orderids,
                                                patient: patient,
                                                specimens: specimens,
                                                results: results,
                                                clinic: clinic,
                                                totalMiles: result[0].distance,
                                                ETA: result[0].duration
                                            })

                                            // trips.push({
                                            //     triptype: 'Drop',
                                            //     tripDrive: {
                                            //         sourcelocation: provider.providerLocation,
                                            //         destinationlocation: trip.destinationLocation
                                            //     },
                                            //     trip: trip,
                                            //     notes: '',
                                            //     stats: stats,
                                            //     provider_id: provider_id,
                                            //     orderids: orderids,
                                            //     specimens: specimens,
                                            //     results: results,
                                            //     clinic: clinic,
                                            //     totalMiles: result[1].distance,
                                            //     ETA: result[1].duration
                                            // })
                                        }).catch(() => {
                                            trips.push({
                                                triptype: trip.triptype,//'Draw',
                                                tripDrive: {
                                                    sourcelocation: provider.providerLocation,
                                                    destinationlocation: trip.sourceLocation
                                                },
                                                trip: trip,
                                                notes: '',
                                                stats: stats,
                                                provider_id: provider_id,
                                                orderids: orderids,
                                                patient: patient,
                                                specimens: specimens,
                                                results: results,
                                                clinic: clinic,
                                                totalMiles: '',
                                                ETA: ''
                                            })

                                            // trips.push({
                                            //     triptype: 'Drop',
                                            //     tripDrive: {
                                            //         sourcelocation: provider.providerLocation,
                                            //         destinationlocation: trip.destinationLocation
                                            //     },
                                            //     trip: trip,
                                            //     notes: '',
                                            //     stats: stats,
                                            //     provider_id: provider_id,
                                            //     orderids: orderids,
                                            //     specimens: specimens,
                                            //     results: results,
                                            //     clinic: clinic,
                                            //     totalMiles: '',
                                            //     ETA: ''
                                            // })
                                        })
                                    }).catch(() => {
                                        trips.push({
                                            triptype: trip.triptype,//'Draw',
                                            tripDrive: {
                                                sourcelocation: '',
                                                destinationlocation: trip.sourceLocation
                                            },
                                            trip: trip,
                                            notes: '',
                                            stats: stats,
                                            provider_id: provider_id,
                                            orderids: orderids,
                                            patient: patient,
                                            specimens: specimens,
                                            results: results,
                                            clinic: clinic,
                                            totalMiles: '',
                                            ETA: ''
                                        })

                                        // trips.push({
                                        //     triptype: trip.triptype,//'Drop',
                                        //     tripDrive: {
                                        //         sourcelocation: '',
                                        //         destinationlocation: trip.destinationLocation
                                        //     },
                                        //     trip: trip,
                                        //     notes: '',
                                        //     stats: stats,
                                        //     provider_id: provider_id,
                                        //     orderids: orderids,
                                        //     specimens: specimens,
                                        //     results: results,
                                        //     clinic: clinic,
                                        //     totalMiles: '',
                                        //     ETA: ''
                                        // })
                                    });
                                }));
                            }
                        });
                        Promise.all(promises).then(() => {

                            res.json({
                                success: true,
                                trips: trips
                                // trips: trips.sort(function(a, b) {
                                //     return parseFloat(a.trip.requsitionSysID) - parseFloat(b.trip.requsitionSysID);
                                // })
                            })

                        });

                    }
                    else {
                        res.json({
                            success: false,
                            error_code: error_message.ERROR_CODE_SCHEDULE_TRIP_NOT_FOUND
                        });
                    }
                });
            }
            else {
                res.json({
                    success: false,
                    error_code: error_message.ERROR_CODE_INVALID_TOKEN
                });
            }
        } else {
            res.json({
                success: false,
                error_code: response.error_code,
                error_description: response.error_description
            });
        }
    });
}

/*** 
* Collect specimens
* Crated By: Ketan Prajapati
* Created Date: 14-5-2021
* ***/
exports.collectspecimens = function (req, res) {
    utils.check_request_params(req.body, [{ name: 'tripid', type: 'string' }, { name: 'orderid', type: 'string' }, { name: 'token', type: 'string' }], function (response) {
        if (response.success) {
            TripOrder.findOne({ trip_id: req.body.tripid }).then((tripOrder) => {
                var specimens = [];
                if (tripOrder != null) {
                    var order = tripOrder.order.orderlist.find(o => o._id == req.body.orderid);
                    if (order != null) {
                        var promises = []
                        specimens = order.specimens;
                        promises.push(specimens.forEach((specimen) => {
                            var newpspecimen = req.body.specimens.find(s => s._id == specimen._id);
                            if (newpspecimen != null) {
                                specimen.collectiondate = new Date();
                                specimen.status = newpspecimen.status;
                            }
                        }));
                        Promise.all(promises).then(() => {
                            order.specimens = specimens;
                            tripOrder.save().then(() => {
                                res.json({
                                    success: true,
                                    tripid: tripOrder.trip_id,
                                    orderid: order._id,
                                    specimens: specimens
                                });
                            });
                        });
                    }

                }
            });
        }
        else {
            res.json({
                success: false,
                error_code: response.error_code,
                error_description: response.error_description
            });
        }
    });
}


exports.new_trips = function (req, res) {
    utils.check_request_params(req.body, [{ name: 'provider_id', type: 'string' }, { name: 'token', type: 'string' }], function (response) {
        if (response.success) {
            Provider.findOne({ _id: req.body.provider_id }).then((provider) => {
                if (provider) {
                    var jwt = utils.validate_token(req.body.token);
                    if (jwt) {
                        if (provider) {
                            var lookup1 = {
                                $lookup:
                                {
                                    from: "users",
                                    localField: "user_id",
                                    foreignField: "_id",
                                    as: "user_detail"
                                }
                            };
                            var unwind1 = { $unwind: "$user_detail" };

                            var mongoose = require('mongoose');
                            var Schema = new mongoose.Types.ObjectId;
                            var dest = 0;
                            var dura = 0;

                            var isTrip = [];
                            var tripstatus=[2,3];
                            for (var x of provider.is_trip) {
                                isTrip.push(Schema(x));
                            }
                            //var condition = { $match: { $and: [{ '_id': { $in: isTrip } }, { is_trip_cancelled: { $eq: 0 } }, { is_provider_invoice_show: { $eq: 0 } }, { is_provider_accepted: { $eq: 0 } }, { is_trip_completed: { $eq: 0 } },{ 'status': { $in: tripstatus } }] } };
                            var condition = { $match: { $and: [{ '_id': { $in: isTrip } }, { is_trip_cancelled: { $eq: 0 } }, { is_provider_invoice_show: { $eq: 0 } }, { is_trip_completed: { $eq: 0 } },{ 'status': { $in: tripstatus } }] } };
                            var group = {
                                $project: {
                                    message: success_messages.MESSAGE_CODE_YOU_GET_TRIP,
                                    trip_id: '$_id',
                                    source_address: 1,
                                    start_time: 1,
                                    destination_address: 1,
                                    sourceLocation: 1,
                                    destinationLocation: 1,
                                    distance: "",
                                    duration: "",
                                    requisition_num: "$requsitionSysID",
                                    STAT: 1,
                                    drop_location: 1,
                                    drop_address: 1,
                                    drop_account_no: 1,
                                    lab_name: 1,
                                    specimen: 1,
                                    is_trip_end: 1,
                                    triptype: '$triptype',
                                    user: "$user_detail",
                                    status:"$status",
                                    labRequisitionID:"$labRequisitionID"
                                }
                            };

                            //Trip.aggregate([condition, lookup1, unwind1, group])
                            Trip.aggregate([condition, lookup1, unwind1, group]).then((array) => {
                                var trips = [];
                                if (array.length > 0) {
                                    var promises = [];
                                    array.forEach(function (trip) {
                                        promises.push(TripOrder.findOne({ trip_id: trip._id }).then((tripOrder) => {

                                            if (tripOrder) {

                                                //add on 13/9/21
                                                var physician = null;
                                                var clinic = null;
                                                var results = [];
                                                var provider_id = '';
                                                var order = [];
                                                var preCheck = config.PrePostUrl + '?procedureCode=PRECHK&requisitionSysID=' + trip.requsitionSysID + '&token=@token';
                                                var postCheck = config.PrePostUrl + '?procedureCode=POSTCHK&requisitionSysID=' + trip.requsitionSysID + '&token=@token';
                                                //end 13/9/21

                                                var patient = null;
                                                var specimens = [];
                                                // if (tripOrder != null && tripOrder.order != null) {
                                                //     patient = tripOrder.order.patient;
                                                //     for (var j = 0; j < tripOrder.order.orderlist.length; j++) {
                                                //         specimens.push(tripOrder.order.orderlist[j].specimens);
                                                //     }
                                                // }
                                                //add on 13/9/21
                                                if (tripOrder != null && tripOrder.order != null) {
                                                    provider_id = tripOrder.provide_id;
                                                    patient = tripOrder.order.patient;
                                                    physician = tripOrder.order.physician;
                                                    var age = getAge(patient.dob);
                                                    patient.age = age;
                                                    clinic = tripOrder.order.clinic;
                                                    for (var j = 0; j < tripOrder.order.orderlist.length; j++) {
                                                        //orderids.push(tripOrder.order.orderlist[j].id);
                                                        //stats.push(tripOrder.order.orderlist[j].stat);
                                                        order.push({
                                                            status: tripOrder.order.orderlist[j].status,
                                                            stat: tripOrder.order.orderlist[j].stat,
                                                            processseq: tripOrder.order.orderlist[j].processseq,
                                                            print_seq: tripOrder.order.orderlist[j].print_seq,
                                                            procedure_loincode: tripOrder.order.orderlist[j].procedure_loincode,
                                                            testname: tripOrder.order.orderlist[j].testname,
                                                            testcode: tripOrder.order.orderlist[j].testcode,
                                                            iswaived: tripOrder.order.orderlist[j].iswaived,
                                                            proceduretype: tripOrder.order.orderlist[j].proceduretype,
                                                            proceduresysid: tripOrder.order.orderlist[j].proceduresysid,
                                                        });

                                                        var tripOrderListOrder = tripOrder.order.orderlist[j];
                                                        for (var k = 0; j < tripOrderListOrder.specimens.length; k++) {
                                                            if (tripOrder.order.orderlist[j].specimens[k] == null) {
                                                                break;
                                                            }
                                                            specimens.push(tripOrder.order.orderlist[j].specimens[k]);
                                                        }
                                                        for (var k = 0; j < tripOrderListOrder.results.length; k++) {
                                                            if (tripOrder.order.orderlist[j].results[k] == null) {
                                                                break;
                                                            }
                                                            results.push(tripOrder.order.orderlist[j].results[k]);
                                                        }
                                                    }
                                                }

                                                // end 13/9/21
                                                var origins = [];
                                                var destinations = [];
                                                if (trip.sourceLocation != null && trip.sourceLocation.length > 0) {
                                                    origins.push(trip.sourceLocation[0] + "," + trip.sourceLocation[1]);
                                                }
                                                else {
                                                    origins.push(trip.source_address);
                                                }

                                                if (trip.destinationLocation != null && trip.destinationLocation.length > 0) {
                                                    destinations.push(trip.destinationLocation[0] + "," + trip.destinationLocation[1]);
                                                }
                                                else {
                                                    destinations.push(trip.destination_address);
                                                }
                                                return calcDistances({ origins: origins, destinations: destinations }).then(result => {
                                                    // trip.duration = result.duration;
                                                    // trip.distance = result.distance;
                                                    // trips.push({
                                                    //     trip: trip,
                                                    //     patient: patient,
                                                    //     specimens: specimens
                                                    // console.log(trip);
                                                    trips.push({
                                                        triptype: trip.triptype,
                                                        tripDrive: {
                                                            sourcelocation: provider.providerLocation,
                                                            destinationlocation: trip.sourceLocation
                                                        },
                                                        trip: trip,
                                                        notes: '',
                                                        precheck: preCheck,
                                                        postcheck: postCheck,
                                                        //stats: stats,
                                                        provider_id: provider_id,
                                                        //orderids: orderids,
                                                        order: order,
                                                        patient: patient,
                                                        physician: physician,
                                                        specimens: specimens,
                                                        results: results,
                                                        clinic: clinic,
                                                        totalMiles: result[0].distanceValue != 0 ? (result[0].distanceValue / 1609).toFixed(2) + " mi" : '',
                                                        ETA: result[0].duration,
                                                        status:trip.status

                                                    });
                                                }).catch(() => {
                                                    // trips.push({
                                                    //     trip: trip,
                                                    //     patient: patient,
                                                    //     specimens: specimens

                                                    trips.push({
                                                        triptype: trip.triptype,
                                                        tripDrive: {
                                                            sourcelocation: provider.providerLocation,
                                                            destinationlocation: trip.sourceLocation
                                                        },
                                                        trip: trip,
                                                        notes: '',
                                                        precheck: preCheck,
                                                        postcheck: postCheck,
                                                        //stats: stats,
                                                        provider_id: provider_id,
                                                        //orderids: orderids,
                                                        order: order,
                                                        patient: patient,
                                                        physician: physician,
                                                        specimens: specimens,
                                                        results: results,
                                                        clinic: clinic,
                                                        totalMiles: result[0].distanceValue != 0 ? (result[0].distanceValue / 1609).toFixed(2) + " mi" : '',
                                                        ETA: result[0].duration,
                                                        status:trip.status

                                                    });
                                                });
                                            }
                                            else {
                                                trips.push({
                                                    trip: trip
                                                })
                                            }
                                        }));
                                    });
                                    //change on 13/9/21

                                    // Promise.all(promises).then(() => {
                                    //     res.json({
                                    //         success: true,
                                    //         trips: trips
                                    //     })
                                    // });

                                    Promise.all(promises).then(() => {
                                        var seqTrips = trips.sort(compare_schedule_start_time);
                                        var finalTrips = [];
                                        for (var i = 0; i < seqTrips.length; i++) {
                                            if (seqTrips[i].trip.is_provider_status == 1 || seqTrips[i].trip.is_provider_status == 2) {
                                                finalTrips.push(seqTrips[i]);
                                            }
                                        }
                                        for (var i = 0; i < seqTrips.length; i++) {
                                            if (seqTrips[i].trip.is_provider_status == 4) {
                                                finalTrips.push(seqTrips[i]);
                                            }
                                        }
                                        for (var i = 0; i < seqTrips.length; i++) {
                                            if (seqTrips[i].trip.is_provider_status == 6) {
                                                finalTrips.push(seqTrips[i]);
                                            }
                                        }

                                        for (var i = 0; i < seqTrips.length; i++) {
                                            if (seqTrips[i].trip.is_provider_status == 0) {
                                                finalTrips.push(seqTrips[i]);
                                            }
                                        }

                                        for (var i = 0; i < seqTrips.length; i++) {
                                            if (seqTrips[i].trip.is_provider_status != 1 && seqTrips[i].trip.is_provider_status != 2 && seqTrips[i].trip.is_provider_status != 4 && seqTrips[i].trip.is_provider_status != 6 && seqTrips[i].trip.is_provider_status != 0) {
                                                finalTrips.push(seqTrips[i]);
                                            }
                                        }

                                        res.json({
                                            success: true,
                                            trips: finalTrips
                                        })
                                    });
                                }
                                else {
                                    res.json({ success: false, error_code: error_message.ERROR_CODE_NO_TRIP_FOUND });
                                }
                            }, (err) => {
                                // console.log(err);
                                res.json({
                                    success: false,
                                    error_code: error_message.ERROR_CODE_SOMETHING_WENT_WRONG
                                });
                            });
                        } else {
                            res.json({ success: false, error_code: error_message.ERROR_CODE_NO_TRIP_FOUND });
                        }
                    }
                    else {
                        res.json({
                            success: false,
                            error_code: error_message.ERROR_CODE_INVALID_TOKEN
                        });
                    }
                } else {
                    res.json({ success: false, error_code: error_message.ERROR_CODE_PROVIDER_DETAIL_NOT_FOUND });
                }
            }, (err) => {
                // console.log(err);
                res.json({
                    success: false,
                    error_code: error_message.ERROR_CODE_SOMETHING_WENT_WRONG
                });
            });
        } else {
            res.json({
                success: false,
                error_code: response.error_code,
                error_description: response.error_description
            });
        }
    });
};

/*** 
* Post Requisition result
* Crated By: Nehal Patel
* Created Date: 05-07-2021
* ***/

exports.post_req_result = function (req, res) {
    utils.check_request_params(req.body, [{ name: 'procedurecode', type: 'string' }, { name: 'token', type: 'string' },
    { name: 'resultvalue', type: 'string' }, { name: 'notes', type: 'string' },
    { name: 'isabnormal', type: 'string' },
    { name: 'requisitionsysid', type: 'string' }], function (response) {
        if (response.success) {
            var jwt = utils.validate_token(req.body.token);

            if (jwt) {
                var procedurecode = req.body.procedurecode;
                var token = req.body.token;
                var resultvalue = req.body.resultvalue;
                var notes = req.body.notes;
                var isabnormal = req.body.isabnormal;
                var requisitionuserid = req.body.requisitionsysid;
                var requisitionsysid = req.body.requisitionsysid;
                var document = [];

                //Save file to S3
                var path = require('path');
                if (req.files != undefined && req.files.length > 0) {
                    for (var i = 0; i < req.files.length; i++) {
                        var extension = path.extname(req.files[i].originalname);
                        var filepath = utils.saveImagetos3browser(req.files[i].path, req.files[i].originalname, 11)
                        var doc = {
                            fileName: req.files[i].originalname,
                            filePath: filepath,
                            fileSize: req.files[i].size
                        }
                        document.push(doc);
                    }
                }


                var apipath = config.PathPrefix + '/Requisition/PostResults';
                var data = JSON.stringify({
                    ProcedureCode: procedurecode,
                    Token: token,
                    ResultValue: resultvalue,
                    Notes: notes,
                    RequisitionUserID: requisitionuserid,
                    IsAbnormal: isabnormal,
                    RequisitionSysID: requisitionsysid,
                    Document: document
                })

                var options = {
                    hostname: config.apiurl,
                    //port: 80,
                    path: apipath,
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Content-Length': data.length,
                        'X-IndralokWebAPIKey': config.AuthHeaderValue
                    }
                }

                utils.httpRequest(options, data).then(response => {
                    var jsonstr = '';
                    response.forEach(function (str) {
                        jsonstr += str;
                    });
                    var data = JSON.parse(jsonstr);
                    if (data.success) {
                        res.json({
                            success: data.success,
                            message: data.message,
                            lstItems: data.lstItems
                        });
                    }
                    else {
                        var resultobj = error_message.ERROR_CODE_API_RETURN_FALSE;
                        resultobj.message = data.message;

                        res.json({
                            success: false,
                            error_code: resultobj
                        });
                    }

                }).catch((err) => {
                    // console.log(err);
                    res.json({
                        success: false,
                        error_code: error_message.ERROR_CODE_SOMETHING_WENT_WRONG
                    });
                });
            }
            else {
                res.json({
                    success: false,
                    error_code: error_message.ERROR_CODE_INVALID_TOKEN
                });
            }
        } else {
            res.json({
                success: false,
                error_code: response.error_code,
                error_description: response.error_description
            });
        }
    });
};



/*** 
 * Get Requisition Collection
 * Crated By: Nehal Patel
 * Created Date: 05-07-2021
 * ***/

exports.get_req_collection = function (req, res) {
    utils.check_request_params(req.body, [{ name: 'token', type: 'string' }, { name: 'notes', type: 'string' },
    { name: 'collectiondtm', type: 'string' }, { name: 'reqsysid', type: 'string' }], function (response) {
        if (response.success) {
            var jwt = utils.validate_token(req.body.token);

            if (jwt) {
                var token = req.body.token;
                var collectiondtm = req.body.collectiondtm;
                var reqsysid = req.body.reqsysid;
                var notes = req.body.notes;
                var document = [];

                //Save file to S3
                var path = require('path');
                if (req.files != undefined && req.files.length > 0) {
                    for (var i = 0; i < req.files.length; i++) {
                        var extension = path.extname(req.files[i].originalname);
                        var filepath = utils.saveImagetos3browser(req.files[i].path, req.files[i].originalname, 11)
                        var doc = {
                            fileName: req.files[i].originalname,
                            filePath: filepath,
                            fileSize: req.files[i].size
                        }
                        document.push(doc);
                    }
                }

                var apipath = config.PathPrefix + '/Requisition/Collection';
                var data = JSON.stringify({
                    Token: token,
                    CollectionDtm: collectiondtm,
                    ReqSysId: reqsysid,
                    Notes: notes,
                    UserEmail: '',
                    Document: document
                });

                var options = {
                    hostname: config.apiurl,
                    //port: 80,
                    path: apipath,
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Content-Length': data.length,
                        'X-IndralokWebAPIKey': config.AuthHeaderValue
                    }
                }

                utils.httpRequest(options, data).then(response => {
                    var jsonstr = '';
                    response.forEach(function (str) {
                        jsonstr += str;
                    });
                    var data = JSON.parse(jsonstr);

                    if (data.success) {
                        res.json({
                            success: data.success,
                            message: data.message,
                            lstItems: data.lstItems
                        });
                    }
                    else {
                        var resultobj = error_message.ERROR_CODE_API_RETURN_FALSE;
                        resultobj.message = data.message;

                        res.json({
                            success: false,
                            error_code: resultobj
                        });
                    }

                }).catch((err) => {
                    // console.log(err);
                    res.json({
                        success: false,
                        error_code: error_message.ERROR_CODE_SOMETHING_WENT_WRONG
                    });
                });
            }
            else {
                res.json({
                    success: false,
                    error_code: error_message.ERROR_CODE_INVALID_TOKEN
                });
            }
        } else {
            res.json({
                success: false,
                error_code: response.error_code,
                error_description: response.error_description
            });
        }
    });
};



/*** 
 * Update Schedule time 
 * Crated By: Mayursinh Zala
 * Created Date: 30-12-2021
 * ***/

 exports.updatescheduletime = function (req, res) {
     var dataBody = req.body; 

     //updtate triporders
     TripOrder.find().then((tripOrders) => {
        tripOrders.forEach(function (trip_order) {
            // trip_order.phlebotomistid = req.body.provider_id;
            server_start_time_for_schedule = trip_order.start_time
            trip_order.save();
        });
    });        
};


/*** 
 * Update Timezone of all trips 
 * Crated By: Mayursinh Zala
 * Created Date: 30-12-2021
 * ***/

 exports.updateuserpatientdetails = function (req, res) {
    var dataBody = req.body; 

    //updtate patient/user 
    User.find().then((userPatients) => {
        userPatients.forEach(async function (userPatient) {
           // trip_order.phlebotomistid = req.body.provider_id;
           userPatient.country = userPatient.address.country
           userPatient.city = userPatient.address.city
           userPatient.save();
          //update user trip data 
          Trip.find({"user_id":userPatient._id}).then((userTrips) => {
            userTrips.forEach(async function (userTrip) {
                console.log(" timezone before update")
                console.log(userTrip.timezone)
                City.find({"cityname":userPatient.address.city}).then((userTripCitys) => {
                    userTripCitys.forEach(async function (userTripCity) {
                        userTrip.timezone = userTripCity.timezone
                        userTrip.save();
                        console.log(userTrip.timezone)
                        console.log(" timezone after update")
                    })
                })
            })
          })
       });
   });        
};

/*
Function dded by Mayursinh zala to get the count of newtrip for the current provider 
and return count in int on 11th Jan 2022
*/
async function getNewTripCount(providerId) {
    try{
           var tripstatus=[2,3];
           var totoalNewTripCount = 0;
           await Trip.countDocuments({ 'status': { $in: tripstatus } ,'is_trip_cancelled' : {$eq: 0},'is_trip_completed': {$eq : 0},'provider_id': providerId, 'is_provider_invoice_show': { $eq: 0 } }).then(async (newtripcount) => {
               totoalNewTripCount = newtripcount
               return parseInt(totoalNewTripCount)
           });
           return parseInt(totoalNewTripCount);
       }
       catch (err) {
           return parseInt(0);
       }
   }